<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GeographicLib</name>
    </assembly>
    <members>
        <member name="T:GeographicLib.Accumulator">
            <summary>
            An accumulator for sums.
            </summary>
            <remarks>
            This allows many numbers of floating point type T to be added together with twice the normal precision.
            Thus if T is double, the effective precision of the sum is 106 bits or about 32 decimal places.
            <para>
            The implementation follows J. R. Shewchuk,
            <a href="https://doi.org/10.1007/PL00009321">Adaptive Precision Floating-Point Arithmetic and Fast Robust Geometric Predicates</a>,
            Discrete &amp; Computational Geometry 18(3) 305–363 (1997).
            </para>
            Approximate timings (summing a vector&lt;double>)
            <list type="bullet">
            <item>double: 2ns</item>
            <item>Accumulator&lt;double>: 23ns</item>
            </list>
            In the documentation of the member functions, <i>sum</i> stands for the value currently held in the accumulator.
            </remarks>
        </member>
        <member name="M:GeographicLib.Accumulator.#ctor(System.Double)">
            <summary>
            Construct from a T. This is not declared explicit, so that you can write Accumulator a = 5;
            </summary>
            <param name="y">set <i>sum</i> = <i>y</i>.</param>
        </member>
        <member name="M:GeographicLib.Accumulator.op_Addition(GeographicLib.Accumulator,System.Double)">
            <summary>
            Add a number to the accumulator.
            </summary>
            <param name="acc"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Accumulator.op_Subtraction(GeographicLib.Accumulator,System.Double)">
            <summary>
            Subtract a number from the accumulator.
            </summary>
            <param name="acc"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Accumulator.op_Multiply(GeographicLib.Accumulator,System.Int32)">
            <summary>
            Multiply accumulator by an integer.
            To avoid loss of accuracy, use only integers such that <i>n</i> × <i>T</i> is exactly representable as a <i>T</i> (i.e., ± powers of two).
            Use <i>n</i> = −1 to negate sum.
            </summary>
            <param name="acc"></param>
            <param name="n">set <i>sum</i> *= <i>n</i>.</param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Accumulator.op_Multiply(GeographicLib.Accumulator,System.Double)">
            <summary>
            Multiply accumulator by a number.
            The fma (fused multiply and add) instruction is used (if available) in order to maintain accuracy.
            </summary>
            <param name="acc"></param>
            <param name="y">set <i>sum</i> *= <i>y</i>.</param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Accumulator.op_Implicit(GeographicLib.Accumulator)~System.Double">
            <summary>
            Return the value held in the accumulator.
            </summary>
            <param name="acc"></param>
        </member>
        <member name="M:GeographicLib.Accumulator.op_Implicit(System.Double)~GeographicLib.Accumulator">
            <summary>
            Set the accumulator to a number.
            </summary>
            <param name="y">set <i>sum</i> = <i>y</i>.</param>
        </member>
        <member name="M:GeographicLib.Accumulator.Sum(System.Double)">
            <summary>
            Return the result of adding a number to sum (but don't change sum).
            </summary>
            <param name="y">the number to be added to the sum.</param>
            <returns><i>sum</i> + <i>y</i>.</returns>
        </member>
        <member name="M:GeographicLib.Accumulator.Remainder(System.Double)">
            <summary>
            Reduce accumulator to the range [-y/2, y/2].
            </summary>
            <param name="y">the modulus</param>
            <returns></returns>
        </member>
        <member name="T:GeographicLib.AuxAngle">
            <summary>
            An accurate representation of angles.
            </summary>
            <remarks>
            This class is an implementation of the methods described in
            
            <list type="bullet">
            <item>
            C. F. F. Karney,
            <a href = "https://doi.org/10.1080/00396265.2023.2217604">On auxiliary latitudes</a>,
            Survey Review(2023);
            preprint <a href = "https://arxiv.org/abs/2212.05818">arXiv:2212.05818</a>.
            </item>
            </list>
            
            An angle is represented by the <i>y</i> and <i>x</i> coordinates of a point in the
            2d plane.The two coordinates are proportional to the sine and cosine of
            the angle.This allows angles close to the cardinal points to be
            represented accurately.It also saves on unnecessary recomputations of
            trigonometric functions of the angle.Only angles in [-180°,180°] can be represented.
            (A possible extension would be to keep count of the number of turns.)
            </remarks>
        </member>
        <member name="F:GeographicLib.AuxAngle.NaN">
            <summary>
            A "NaN" <see cref="T:GeographicLib.AuxAngle"/>.
            </summary>
        </member>
        <member name="M:GeographicLib.AuxAngle.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GeographicLib.AuxAngle"/> struct with the specified coordinates. 
            </summary>
            <param name="y">The <i>y</i> coordinate.</param>
            <param name="x">The <i>x</i> coordinate.</param>
        </member>
        <member name="P:GeographicLib.AuxAngle.X">
            <summary>
            Gets the <i>x</i> coordinate of the <see cref="T:GeographicLib.AuxAngle"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.AuxAngle.Y">
            <summary>
            Gets the <i>y</i> coordinate of the <see cref="T:GeographicLib.AuxAngle"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.AuxAngle.Tan">
            <summary>
            Gets the tangent of the angle.
            </summary>
        </member>
        <member name="P:GeographicLib.AuxAngle.Degrees">
            <summary>
            Gets the <see cref="T:GeographicLib.AuxAngle"/> converted to the conventional angle measured in degrees.
            </summary>
        </member>
        <member name="P:GeographicLib.AuxAngle.Radians">
            <summary>
            Gets the <see cref="T:GeographicLib.AuxAngle"/> converted to the conventional angle measured in radians.
            </summary>
        </member>
        <member name="P:GeographicLib.AuxAngle.Lam">
            <summary>
            Gets the lambertian of the <see cref="T:GeographicLib.AuxAngle"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.AuxAngle.Lamd">
            <summary>
            Gets the lambertian of the <see cref="T:GeographicLib.AuxAngle"/> in degrees.
            </summary>
        </member>
        <member name="M:GeographicLib.AuxAngle.Normalized">
            <summary>
            Gets a new normalized <see cref="T:GeographicLib.AuxAngle"/> with the point lying on the unit
            circle and the <i>y</i> and <i>x</i> components are equal to the sine and
            cosine of the angle.
            </summary>
            <returns>A normalized copy of current <see cref="T:GeographicLib.AuxAngle"/> instance.</returns>
        </member>
        <member name="M:GeographicLib.AuxAngle.CopyQuadrant(GeographicLib.AuxAngle)">
            <summary>
            Copy the quadrant from specified <see cref="T:GeographicLib.AuxAngle"/> instance.
            </summary>
            <param name="p">The <see cref="T:GeographicLib.AuxAngle"/> instance from which the quadrant information is taken.</param>
            <returns>A copy of current <see cref="T:GeographicLib.AuxAngle"/> instance in the same quadrant as <paramref name="p"/>.</returns>
        </member>
        <member name="M:GeographicLib.AuxAngle.AbsError(GeographicLib.AuxAngle)">
            <summary>
            Compute the absolute error in another angle.
            </summary>
            <param name="p">The other angle.</param>
            <returns>The absolute error between <paramref name="p"/> and <see langword="this"/> considered as angles in radians.</returns>
        </member>
        <member name="M:GeographicLib.AuxAngle.RelError(GeographicLib.AuxAngle)">
            <summary>
            Compute the relative error in another angle.
            </summary>
            <param name="p">The other angle.</param>
            <returns>The relative error between <paramref name="p"/>.Tan  and <see langword="this"/>.Tan.</returns>
        </member>
        <member name="M:GeographicLib.AuxAngle.CopyWith(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Create a copy of current <see cref="T:GeographicLib.AuxAngle"/> instance with <see cref="P:GeographicLib.AuxAngle.X"/> or <see cref="P:GeographicLib.AuxAngle.Y"/> replaced with given value.
            </summary>
            <param name="y">The <i>y</i> coordinate.</param>
            <param name="x">The <i>x</i> coordinate.</param>
            <returns>The copied <see cref="T:GeographicLib.AuxAngle"/> instance.</returns>
        </member>
        <member name="M:GeographicLib.AuxAngle.op_Addition(GeographicLib.AuxAngle,GeographicLib.AuxAngle)">
            <summary>
            Add two <see cref="T:GeographicLib.AuxAngle"/> instances.
            </summary>
            <remarks>
            Neither <paramref name="a"/> nor <paramref name="b"/> should have an infinite component.
            If necessary, create normalized angles with <see cref="M:GeographicLib.AuxAngle.Normalized"/> first.
            </remarks>
            <param name="a">The <see cref="T:GeographicLib.AuxAngle"/> to be added.</param>
            <param name="b">The <see cref="T:GeographicLib.AuxAngle"/> to be added.</param>
            <returns>The sum of <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:GeographicLib.AuxAngle.FromDegrees(System.Double)">
            <summary>
            Convert degrees to an <see cref="T:GeographicLib.AuxAngle"/>.
            </summary>
            <param name="d">The angle measured in degrees.</param>
            <returns>The corresponding <see cref="T:GeographicLib.AuxAngle"/>.</returns>
        </member>
        <member name="M:GeographicLib.AuxAngle.FromRadians(System.Double)">
            <summary>
            Convert radians to an <see cref="T:GeographicLib.AuxAngle"/>.
            </summary>
            <param name="r">The angle measured in radians.</param>
            <returns>The corresponding <see cref="T:GeographicLib.AuxAngle"/>.</returns>
        </member>
        <member name="M:GeographicLib.AuxAngle.FromLam(System.Double)">
            <summary>
            Convert lambertian to an <see cref="T:GeographicLib.AuxAngle"/>.
            </summary>
            <param name="psi">The lambertian of the angle.</param>
            <returns>The corresponding <see cref="T:GeographicLib.AuxAngle"/>.</returns>
        </member>
        <member name="M:GeographicLib.AuxAngle.FromLamd(System.Double)">
            <summary>
            Convert lambertian in degrees to an <see cref="T:GeographicLib.AuxAngle"/>.
            </summary>
            <param name="psid">The lambertian of the angle in degrees.</param>
            <returns>The corresponding <see cref="T:GeographicLib.AuxAngle"/>.</returns>
        </member>
        <member name="M:GeographicLib.AuxAngle.ToString">
            <summary>
            Gets the string representation of current <see cref="T:GeographicLib.AuxAngle"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GeographicLib.AuxLatitude">
             <summary>
             Conversions between auxiliary latitudes.
             </summary>
             <remarks>
             This class is an implementation of the methods described in
             
             <list type="bullet">
             <item>
             C. F. F. Karney,
             <a href = "https://doi.org/10.1080/00396265.2023.2217604">On auxiliary latitudes</a>,
             Survey Review(2023);
             preprint <a href = "https://arxiv.org/abs/2212.05818">arXiv:2212.05818</a>.
             </item>
             </list>
             
             <para>
             The class provides accurate conversions between geographic(<i>phi</i>, φ),
             parametric(<i>beta</i>, β), geocentric(<i>theta</i>, θ), rectifying
             (<i>mu</i>, µ), conformal(<i>chi</i>, χ), and authalic(<i>xi</i>, ξ)
             latitudes for an ellipsoid of revolution. A latitude is represented by
             <see cref="T:GeographicLib.AuxAngle"/> in order to maintain precision close to the poles.
             </para>
            
             The class implements two methods for the conversion:
             <list type="bullet">
             <item>
             Direct evaluation of the defining equations, the <b>exact</b> method. These
             equations are formulated so as to preserve relative accuracy of the
             tangent of the latitude, ensuring high accuracy near the equator and the
             poles. Newton's method is used for those conversions that can't be
             expressed in closed form.
             </item>
             <item>
             Expansions in powers of <i>n</i>, the third flattening, the <b>series</b> method.
             This delivers full accuracy for abs(<i>f</i>) ≤ 1/150. Here, <i>f</i> is the
             flattening of the ellipsoid.
             </item>
             </list>
            
             The series method is the preferred method of conversion for any conversion
             involving µ, χ, or ξ, with abs(<i>f</i>) ≤ 1/150.  The equations
             for the conversions between φ, β, and θ are sufficiently
             simple that the exact method should be used for such conversions and also
             for conversions with with abs(<i>f</i>) &gt; 1/150.
             </remarks>
        </member>
        <member name="F:GeographicLib.AuxLatitude.Lmax">
            <summary>
            The order of the series expansions.  This is set at compile time to
            either 4, 6, or 8, by the preprocessor macro
            GEOGRAPHICLIB_AUXLATITUDE_ORDER.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitude.AUXNUMBER">
            <summary>
            The total number of auxiliary latitudes.
            </summary>
        </member>
        <member name="M:GeographicLib.AuxLatitude.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GeographicLib.AuxLatitude"/> class
            with the equatorial radius and flattening. 
            </summary>
            <param name="a">Equatorial radius.</param>
            <param name="f">
            Flattening of ellipsoid. Setting <paramref name="f"/> = 0 gives a sphere.
            Negative <paramref name="f"/> gives a prolate ellipsoid.
            </param>
            <remarks>
            The constructor does not precompute the coefficients for the
            Fourier series for the series conversions. These are computed and saved
            when first needed.
            </remarks>
            <exception cref="T:GeographicLib.GeographicException"/>
        </member>
        <member name="M:GeographicLib.AuxLatitude.#ctor(GeographicLib.IEllipsoid)">
            <summary>
            Initializes a new instance of the <see cref="T:GeographicLib.AuxLatitude"/> class
            with the given <see cref="T:GeographicLib.IEllipsoid"/> object. 
            </summary>
            <param name="ellipsoid">Source <see cref="T:GeographicLib.IEllipsoid"/> object.</param>
        </member>
        <member name="F:GeographicLib.AuxLatitude.WGS84">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.AuxLatitude"/> with the parameters for the WGS84 ellipsoid.
            </summary>
        </member>
        <member name="M:GeographicLib.AuxLatitude.FromAxes(System.Double,System.Double)">
            <summary>
            Construct and return an AuxLatitude object specified in terms of the semi-axes.
            </summary>
            <param name="a">Equatorial radius.</param>
            <param name="b">Polar semi-axis.</param>
            <returns></returns>
            <exception cref="T:GeographicLib.GeographicException"/>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Clenshaw(System.Boolean,System.Double,System.Double,System.ReadOnlySpan{System.Double},System.Int32)">
            <summary>
            Use Clenshaw to sum a Fouier series.
            </summary>
            <param name="sinp">If <see langword="true"/> sum the sine series, else sum the cosine series.</param>
            <param name="szeta">sin(<i>zeta</i>).</param>
            <param name="czeta">cos(<i>zeta</i>).</param>
            <param name="c">The array of coefficients.</param>
            <param name="K">The number of coefficients.</param>
            <returns>
            sum(c[k] * sin((2*k+2) * zeta), i, 0, K-1);, 
            if <paramref name="sinp"/> is <see langword="true"/>;
            with <paramref name="sinp"/> <see langword="false"/>, replace sin by cos.
            </returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Convert(GeographicLib.AuxLatitudeType,GeographicLib.AuxLatitudeType,GeographicLib.AuxAngle,System.Boolean)">
            <summary>
            Convert between any two auxiliary latitudes specified as <see cref="T:GeographicLib.AuxAngle"/>.
            </summary>
            <param name="auxin">Type of auxiliary latitude <i>zeta</i>.</param>
            <param name="auxout">Type of auxiliary latitude <i>eta</i>.</param>
            <param name="zeta">The input auxiliary latitude as an <see cref="T:GeographicLib.AuxAngle"/>.</param>
            <param name="exact">If <see langword="true"/> use the exact equations instead of the Taylor series.</param>
            <returns>The output auxiliary latitude <i>eta</i> as an <see cref="T:GeographicLib.AuxAngle"/>.</returns>
            <remarks>
            With <paramref name="exact"/> = <see langword="false"/>, the Fourier coefficients for a specific <paramref name="auxin"/>
            and <paramref name="auxout"/> are computed and saved on the first call; the saved
            coefficients are used on subsequent calls. The series method is
            accurate for abs(<i>f</i>) ≤ 1/150; for other <i>f</i>, the exact method
            should be used.
            </remarks>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Convert(GeographicLib.AuxLatitudeType,GeographicLib.AuxLatitudeType,System.Double,System.Boolean)">
            <summary>
            Convert between any two auxiliary latitudes specified in degrees.
            </summary>
            <param name="auxin">Type of auxiliary latitude <i>zeta</i>.</param>
            <param name="auxout">Type of auxiliary latitude <i>eta</i>.</param>
            <param name="zeta">The input auxiliary latitude in degrees.</param>
            <param name="exact">If <see langword="true"/> use the exact equations instead of the Taylor series.</param>
            <returns>The output auxiliary latitude <i>eta</i> in degrees.</returns>
            <remarks>
            With <paramref name="exact"/> = <see langword="false"/>, the Fourier coefficients for a specific <paramref name="auxin"/>
            and <paramref name="auxout"/> are computed and saved on the first call; the saved
            coefficients are used on subsequent calls. The series method is
            accurate for abs(<i>f</i>) ≤ 1/150; for other <i>f</i>, the exact method
            should be used.
            </remarks>
        </member>
        <member name="M:GeographicLib.AuxLatitude.ToAuxiliary(GeographicLib.AuxLatitudeType,GeographicLib.AuxAngle,System.Double@)">
            <summary>
            Convert geographic latitude to an auxiliary latitude <i>eta</i>.
            </summary>
            <param name="auxout">The auxiliary latitude to be returned.</param>
            <param name="phi">The geographic latitude.</param>
            <param name="diff">the derivative d tan(<i>eta</i>) / d tan(<i>phi</i>).</param>
            <returns>The auxiliary latitude <i>eta</i>.</returns>
            <remarks>
            This uses the exact equations.
            </remarks>
        </member>
        <member name="M:GeographicLib.AuxLatitude.ToAuxiliary(GeographicLib.AuxLatitudeType,GeographicLib.AuxAngle)">
            <summary>
            Convert geographic latitude to an auxiliary latitude <i>eta</i>.
            </summary>
            <param name="auxout">The auxiliary latitude to be returned.</param>
            <param name="phi">The geographic latitude.</param>
            <returns>The auxiliary latitude <i>eta</i>.</returns>
            <remarks>
            This uses the exact equations.
            </remarks>
        </member>
        <member name="M:GeographicLib.AuxLatitude.FromAuxiliary(GeographicLib.AuxLatitudeType,GeographicLib.AuxAngle,System.Int32@)">
            <summary>
            Convert an auxiliary latitude <paramref name="zeta"/> to geographic latitude.
            </summary>
            <param name="auxin">The type of auxiliary latitude <paramref name="zeta"/>.</param>
            <param name="zeta">The input auxiliary latitude.</param>
            <param name="niter">The number of iterations.</param>
            <returns>The geographic latitude <i>phi</i>.</returns>
            <remarks>
            This uses the exact equations.
            </remarks>
        </member>
        <member name="M:GeographicLib.AuxLatitude.FromAuxiliary(GeographicLib.AuxLatitudeType,GeographicLib.AuxAngle)">
            <summary>
            Convert an auxiliary latitude <paramref name="zeta"/> to geographic latitude.
            </summary>
            <param name="auxin">The type of auxiliary latitude <paramref name="zeta"/>.</param>
            <param name="zeta">The input auxiliary latitude.</param>
            <returns>The geographic latitude <i>phi</i>.</returns>
            <remarks>
            This uses the exact equations.
            </remarks>
        </member>
        <member name="M:GeographicLib.AuxLatitude.RectifyingRadius(System.Boolean)">
            <summary>
            Return the rectifying radius.
            </summary>
            <param name="exact">If <see langword="true"/> use the exact expression instead of the Taylor series.</param>
            <returns>The rectifying radius in the same units as <i>a</i>.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.AuthalicRadiusSquared(System.Boolean)">
            <summary>
            Return the authalic radius squared.
            </summary>
            <param name="exact">If <see langword="true"/> use the exact expression instead of the Taylor series.</param>
            <returns>The authalic radius squared in the same units as <i>a</i>.</returns>
        </member>
        <member name="P:GeographicLib.AuxLatitude.EquatorialRadius">
            <summary>
            <i>a</i>, the equatorial radius of the ellipsoid (meters).
            </summary>
        </member>
        <member name="P:GeographicLib.AuxLatitude.PolarSemiAxis">
            <summary>
            <i>b</i>, the polar semi-axis of the ellipsoid (meters).
            </summary>
        </member>
        <member name="P:GeographicLib.AuxLatitude.Flattening">
            <summary>
            <i>f</i>, the flattening of the ellipsoid.
            </summary>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Parametric(GeographicLib.AuxAngle,System.Double@)">
            <summary>
            Convert geographic latitude to parametric latitude.
            </summary>
            <param name="phi">Geographic latitude.</param>
            <param name="diff">The derivative d tan(<i>beta</i>) / d tan(<i>phi</i>).</param>
            <returns><i>beta</i>, the parametric latitude.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Parametric(GeographicLib.AuxAngle)">
            <summary>
            Convert geographic latitude to parametric latitude.
            </summary>
            <param name="phi">Geographic latitude.</param>
            <returns><i>beta</i>, the parametric latitude.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Geocentric(GeographicLib.AuxAngle,System.Double@)">
            <summary>
            Convert geographic latitude to geocentric latitude.
            </summary>
            <param name="phi">Geographic latitude.</param>
            <param name="diff">The derivative d tan(<i>theta</i>) / d tan(<i>phi</i>).</param>
            <returns><i>theta</i>, the geocentric latitude.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Geocentric(GeographicLib.AuxAngle)">
            <summary>
            Convert geographic latitude to geocentric latitude.
            </summary>
            <param name="phi">Geographic latitude.</param>
            <returns><i>theta</i>, the geocentric latitude.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Rectifying(GeographicLib.AuxAngle,System.Double@)">
            <summary>
            Convert geographic latitude to rectifying latitude.
            </summary>
            <param name="phi">Geographic latitude.</param>
            <param name="diff">The derivative d tan(<i>mu</i>) / d tan(<i>phi</i>).</param>
            <returns><i>mu</i>, the rectifying latitude.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Rectifying(GeographicLib.AuxAngle)">
            <summary>
            Convert geographic latitude to rectifying latitude.
            </summary>
            <param name="phi">Geographic latitude.</param>
            <returns><i>mu</i>, the rectifying latitude.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Conformal(GeographicLib.AuxAngle,System.Double*)">
            <summary>
            Convert geographic latitude to rectifying latitude.
            </summary>
            <param name="phi">Geographic conformal.</param>
            <param name="diff">The derivative d tan(<i>chi</i>) / d tan(<i>phi</i>).</param>
            <returns><i>chi</i>, the conformal latitude.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Conformal(GeographicLib.AuxAngle,System.Double@)">
            <summary>
            Convert geographic latitude to rectifying latitude.
            </summary>
            <param name="phi">Geographic conformal.</param>
            <param name="diff">The derivative d tan(<i>chi</i>) / d tan(<i>phi</i>).</param>
            <returns><i>chi</i>, the conformal latitude.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Conformal(GeographicLib.AuxAngle)">
            <summary>
            Convert geographic latitude to rectifying latitude.
            </summary>
            <param name="phi">Geographic conformal.</param>
            <returns><i>chi</i>, the conformal latitude.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Authalic(GeographicLib.AuxAngle,System.Double@)">
            <summary>
            Convert geographic latitude to authalic latitude.
            </summary>
            <param name="phi">Geographic conformal.</param>
            <param name="diff">The derivative d tan(<i>xi</i>) / d tan(<i>phi</i>).</param>
            <returns><i>xi</i>, the authalic latitude.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Authalic(GeographicLib.AuxAngle)">
            <summary>
            Convert geographic latitude to authalic latitude.
            </summary>
            <param name="phi">Geographic conformal.</param>
            <returns><i>xi</i>, the authalic latitude.</returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.ind(GeographicLib.AuxLatitudeType,GeographicLib.AuxLatitudeType)">
            <summary>
            1d index into AUXNUMBER x AUXNUMBER data
            </summary>
            <param name="auxout"></param>
            <param name="auxin"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.sc(System.Double)">
            <summary>
            the function sqrt(1 + tphi^2), convert tan to sec
            </summary>
            <param name="tphi"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.sn(System.Double)">
            <summary>
            the function tphi / sqrt(1 + tphi^2), convert tan to sin
            </summary>
            <param name="tphi"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.fillcoeff(GeographicLib.AuxLatitudeType,GeographicLib.AuxLatitudeType,System.Int32)">
            <summary>
            Populate [_c[Lmax * k], _c[Lmax * (k + 1)])
            </summary>
            <param name="auxin"></param>
            <param name="auxout"></param>
            <param name="k"></param>
        </member>
        <member name="M:GeographicLib.AuxLatitude.atanhee(System.Double)">
            <summary>
            the function atanh(e * sphi)/e; works for e^2 = 0 and e^2 &lt; 0
            </summary>
            <param name="tphi"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.q(System.Double)">
            <summary>
            the function atanh(e * sphi)/e + sphi / (1 - (e * sphi)^2);
            </summary>
            <param name="tphi"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.AuxLatitude.Dq(System.Double)">
            <summary>
            The divided difference of (q(1) - q(sphi)) / (1 - sphi)
            </summary>
            <param name="tphi"></param>
            <returns></returns>
        </member>
        <member name="T:GeographicLib.AuxLatitudeType">
            <summary>
            Represents different types of auxiliary latitudes.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Geographic">
            <summary>
            Geographic latitude, <i>phi</i>, φ.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Parametric">
            <summary>
            Parametric latitude, <i>beta</i>, β.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Geocentric">
            <summary>
            Geocentric latitude, <i>theta</i>, θ.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Rectifying">
            <summary>
            Rectifying latitude, <i>mu</i>, µ.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Conformal">
            <summary>
            Conformal latitude, <i>chi</i>, χ.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Authalic">
            <summary>
            Authalic latitude, <i>xi</i>, ξ.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Phi">
            <summary>
            An alias for <see cref="F:GeographicLib.AuxLatitudeType.Geographic"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Beta">
            <summary>
            An alias for <see cref="F:GeographicLib.AuxLatitudeType.Parametric"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Theta">
            <summary>
            An alias for <see cref="F:GeographicLib.AuxLatitudeType.Geocentric"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Mu">
            <summary>
            An alias for <see cref="F:GeographicLib.AuxLatitudeType.Rectifying"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Chi">
            <summary>
            An alias for <see cref="F:GeographicLib.AuxLatitudeType.Conformal"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Xi">
            <summary>
            An alias for <see cref="F:GeographicLib.AuxLatitudeType.Authalic"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Common">
            <summary>
            An alias for <see cref="F:GeographicLib.AuxLatitudeType.Geographic"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Geodetic">
            <summary>
            An alias for <see cref="F:GeographicLib.AuxLatitudeType.Geographic"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.AuxLatitudeType.Reduced">
            <summary>
            An alias for <see cref="F:GeographicLib.AuxLatitudeType.Parametric"/>.
            </summary>
        </member>
        <member name="T:GeographicLib.Bit32">
            <summary>
            Provides a uniform way to reinterpret 32-bit binary data as <see cref="T:System.Single"/>, <see cref="T:System.Int32"/> or <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="T:GeographicLib.Bit64">
            <summary>
            Provides a uniform way to reinterpret 64-bit binary data as <see cref="T:System.Double"/>, <see cref="T:System.Int64"/> or <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="M:GeographicLib.CMathManaged.Remquo(System.Double,System.Double,System.Int32@)">
            <summary>
            Computes the remainder of two integer values, 
            and stores an integer value with the sign and approximate magnitude of the quotient in a location that's specified in a parameter.
            </summary>
            <param name="x">The numerator.</param>
            <param name="y">The denominator.</param>
            <param name="quo">A pointer to an integer to store a value that has the sign and approximate magnitude of the quotient.</param>
            <returns>
            Returns the floating-point remainder of <paramref name="x"/> / <paramref name="y"/>.
            If the value of <paramref name="y"/> is 0.0, this method returns a quiet <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:GeographicLib.CMathManaged.Hypot(System.Double,System.Double)">
            <summary>
            Computes the square root of the sum of the squares of x and y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>Hypotenuse of a right-angled triangle computed as √(x^2+y^2).</returns>
        </member>
        <member name="M:GeographicLib.CMathManaged.Log1p(System.Double)">
            <summary>
            Compute log(1+x) without losing precision for small values of <paramref name="x"/>.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.CMathManaged.Expm1(System.Double)">
            <summary>
            Compute exp(x) - 1 without loss of precision for small values of x.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:GeographicLib.Constants">
            <summary>
            Constants need by GeographicLib.
            </summary>
            <remarks>
            Define constants specifying the WGS84 ellipsoid, the UTM and UPS
            projections, and various unit conversions.
            </remarks>
        </member>
        <member name="F:GeographicLib.Constants.Degree">
            <summary>
            A synonym for <see cref="F:GeographicLib.MathEx.Degree"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Arcminute">
            <summary>
            The number of radians in an arcminute.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Arcsecond">
            <summary>
            The number of radians in an arcsecond.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.WGS84_a">
            <summary>
            The equatorial radius of WGS84 ellipsoid (6378137 m).
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.WGS84_f">
            <summary>
            The flattening of WGS84 ellipsoid (1/298.257223563).
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.WGS84_GM">
            <summary>
            The gravitational constant of the WGS84 ellipsoid, <i>GM</i> , in m^3/s^2
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.WGS84_omega">
            <summary>
            The angular velocity of the WGS84 ellipsoid, <i>ω</i>, in rad/s
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.GRS80_a">
            <summary>
            The equatorial radius of GRS80 ellipsoid (6378137 m).
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.GRS80_GM">
            <summary>
            The gravitational constant of the GRS80 ellipsoid, <i>GM</i> , in m^3/s^2
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.GRS80_omega">
            <summary>
            The angular velocity of the GRS80 ellipsoid, <i>ω</i>, in rad/s.
            </summary>
            <remarks>
            This is about 2π * 366.25 / (365.25 * 24 * 3600) rad/s.
            365.25 is the number of days in a Julian year and
            365.35/366.25 converts from solar days to sidereal days.Using the
            number of days in a Gregorian year(365.2425) results in a worse
            approximation(because the Gregorian year includes the precession of the
            earth's axis).
            </remarks>
        </member>
        <member name="F:GeographicLib.Constants.GRS80_J2">
            <summary>
            Dynamical form factor of the GRS80 ellipsoid, in <i>J^2</i>.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.UTM_k0">
            <summary>
            The central scale factor for UTM (0.9996).
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.UPS_k0">
            <summary>
            The central scale factor for UPS (0.994).
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Meter">
            <summary>
            The number of meters in a meter.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Kilometer">
            <summary>
            The number of meters in a kilometer.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.NauticalMile">
            <summary>
            The number of meters in a nautical mile (approximately 1 arcminute).
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.SquareMeter">
            <summary>
            The number of square meters in a square meter
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Hectare">
            <summary>
            The number of square meters in a hectare.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.SquareKilometer">
            <summary>
            The number of square meters in a square kilometer.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.SquareNauticleMile">
            <summary>
            The number of square meters in a square nautical mile.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Foot">
            <summary>
            The number of meters in an international foot.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Yard">
            <summary>
            The number of meters in a yard.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Fathom">
            <summary>
            The number of meters in a fathom.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Chain">
            <summary>
            The number of meters in a chain.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Furlong">
            <summary>
            The number of meters in a furlong.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Mile">
            <summary>
            The number of meters in a statute mile.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.Acre">
            <summary>
            The number of square meters in an acre.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.SquareMile">
            <summary>
            The number of square meters in a square statute mile.
            </summary>
        </member>
        <member name="F:GeographicLib.Constants.SurveyFoot">
            <summary>
            The number of meters in a US survey foot.
            </summary>
        </member>
        <member name="T:GeographicLib.ConvertFlag">
            <summary>
            Flags indicating conversions between heights above the geoid and heights above the ellipsoid.
            </summary>
        </member>
        <member name="F:GeographicLib.ConvertFlag.EllipsoidToGeoid">
            <summary>
            The multiplier for converting from heights above the ellipsoid to heights above the geoid.
            </summary>
        </member>
        <member name="F:GeographicLib.ConvertFlag.None">
            <summary>
            No conversion.
            </summary>
        </member>
        <member name="F:GeographicLib.ConvertFlag.GeoidToEllipsoid">
            <summary>
            The multiplier for converting from heights above the geoid to heights above the ellipsoid.
            </summary>
        </member>
        <member name="T:GeographicLib.DAuxLatitude">
            <summary>
            Divided differences of auxiliary latitudes.
            </summary>
            <remarks>
            This class computed the divided differences of auxiliary latitudes and
            some other divided differences needed to support rhumb line calculations.
            </remarks>
        </member>
        <member name="M:GeographicLib.DAuxLatitude.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GeographicLib.DAuxLatitude"/> class
            with the equatorial radius and flattening. 
            </summary>
            <param name="a">Equatorial radius.</param>
            <param name="f">
            Flattening of ellipsoid. Setting <paramref name="f"/> = 0 gives a sphere.
            Negative <paramref name="f"/> gives a prolate ellipsoid.
            </param>
            <exception cref="T:GeographicLib.GeographicException"/>
        </member>
        <member name="M:GeographicLib.DAuxLatitude.DConvert(GeographicLib.AuxLatitudeType,GeographicLib.AuxLatitudeType,GeographicLib.AuxAngle,GeographicLib.AuxAngle)">
             <summary>
             The divided difference of one auxiliary latitude with respect to another.
             </summary>
             <param name="auxin">The type of auxiliary latitude <i>zeta</i>.</param>
             <param name="auxout">The type of auxiliary latitude <i>eta</i>.</param>
             <param name="zeta1">The first of the input auxiliary latitudes.</param>
             <param name="zeta2">The second of the input auxiliary latitudes.</param>
             <returns>The divided difference (<i>eta2</i> - <i>eta1</i>) / (<i>zeta2</i> - <i>zeta1</i>).</returns>
             <remarks>
             <para>This routine uses the series method.</para>
            
             <para>
             In the expression for the divided difference above, the angle quantities
             should be understood as the conventional measure of angle(either in
             radians or in degrees).
             </para>
            
             <para>
             The Fourier coefficients for a specific <paramref name="auxin"/> and <paramref name="auxout"/> are
             computed and saved on the first call; the saved coefficients are used on
             subsequent calls.The series method is accurate for abs(<i>f</i>) ≤ 1/150.
             </para>
             </remarks>
        </member>
        <member name="M:GeographicLib.DAuxLatitude.DParametric(GeographicLib.AuxAngle,GeographicLib.AuxAngle)">
            <summary>
            The divided difference of the parametric latitude with respect to the geographic latitude.
            </summary>
            <param name="phi1">The first geographic latitude as an <see cref="T:GeographicLib.AuxAngle"/>.</param>
            <param name="phi2">The second geographic latitude as an <see cref="T:GeographicLib.AuxAngle"/>.</param>
            <returns>
            The divided difference (<i>beta2</i> - <i>beta1</i>) / (<i>phi2</i> - <i>phi1</i>), where <i>beta</i> is the parametric latitude.
            </returns>
            <remarks>
            This routine uses the exact formulas and is valid for arbitrary latitude.
            </remarks>
        </member>
        <member name="M:GeographicLib.DAuxLatitude.DRectifying(GeographicLib.AuxAngle,GeographicLib.AuxAngle)">
            <summary>
            The divided difference of the rectifying latitude with respect to the geographic latitude.
            </summary>
            <param name="phi1">The first geographic latitude as an <see cref="T:GeographicLib.AuxAngle"/>.</param>
            <param name="phi2">The second geographic latitude as an <see cref="T:GeographicLib.AuxAngle"/>.</param>
            <returns>
            The divided difference (<i>mu2</i> - <i>mu1</i>) / (<i>phi2</i> - <i>phi1</i>), where <i>mu</i> is the rectifying latitude.
            </returns>
            <remarks>
            This routine uses the exact formulas and is valid for arbitrary latitude.
            </remarks>
        </member>
        <member name="M:GeographicLib.DAuxLatitude.DIsometric(GeographicLib.AuxAngle,GeographicLib.AuxAngle)">
            <summary>
            The divided difference of the isometric latitude with respect to the geographic latitude.
            </summary>
            <param name="phi1">The first geographic latitude as an <see cref="T:GeographicLib.AuxAngle"/>.</param>
            <param name="phi2">The second geographic latitude as an <see cref="T:GeographicLib.AuxAngle"/>.</param>
            <returns>
            The divided difference (<i>psi2</i> - <i>psi1</i>) / (<i>phi2</i> - <i>phi1</i>), 
            where <i>psi</i> = asinh(tan(<i>chi</i>)) is the isometric latitude
            and <i>chi</i> is the conformal latitude.
            </returns>
            <remarks>
            This routine uses the exact formulas and is valid for arbitrary latitude.
            </remarks>
        </member>
        <member name="M:GeographicLib.DAuxLatitude.DClenshaw(System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,System.ReadOnlySpan{System.Double},System.Int32)">
            <summary>
            The divided difference of <see cref="M:GeographicLib.AuxLatitude.Clenshaw(System.Boolean,System.Double,System.Double,System.ReadOnlySpan{System.Double},System.Int32)"/>.
            </summary>
            <param name="sinp">If <see langword="true"/> sum the sine series, else sum the cosine series.</param>
            <param name="Delta">Either 1 <b>or</b> (<i>zeta2</i> - <i>zeta1</i>) in radians.</param>
            <param name="szeta1">sin(<i>zeta1</i>).</param>
            <param name="czeta1">cos(<i>zeta1</i>).</param>
            <param name="szeta2">sin(<i>zeta2</i>).</param>
            <param name="czeta2">cos(<i>zeta2</i>).</param>
            <param name="c">The array of coefficients.</param>
            <param name="K">The number of coefficients.</param>
            <returns>
            The divided difference.
            <para>
            The result is
            <c>
               (AuxLatitude.Clenshaw(sinp, szeta2, czeta2, c, K) -
                 AuxLatitude.Clenshaw(sinp, szeta1, czeta1, c, K) ) / Delta
            </c>
            </para>
            </returns>
            <remarks>
            <paramref name="Delta"/> **must** be either 1 or (<i>zeta2</i> - <i>zeta1</i>);
            other values will return nonsense.
            </remarks>
        </member>
        <member name="M:GeographicLib.DAuxLatitude.Dlam(System.Double,System.Double)">
            <summary>
            The divided difference of the isometric latitude with respect to the conformal latitude.
            </summary>
            <param name="x">tan(<i>chi1</i>).</param>
            <param name="y">tan(<i>chi2</i>).</param>
            <returns>
            The divided difference (<i>psi2</i> - <i>psi1</i>) / (<i>chi2</i> - <i>chi1</i>),
            where <i>psi</i> = asinh(tan(<i>chi</i>)).
            </returns>
            <remarks>
            The parameters for this routine are the <b>tangents</b> of conformal latitude.
            <para>
            This routine computes Dasinh(x, y) / Datan(x, y).
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.DAuxLatitude.Dp0Dpsi(System.Double,System.Double)">
            <summary>
            The divided difference of the spherical rhumb area term with respect to the isometric latitude.
            </summary>
            <param name="x">tan(<i>chi1</i>).</param>
            <param name="y">tan(<i>chi2</i>).</param>
            <returns>
            The divided difference (p0(<i>chi2</i>) - p0(<i>chi1</i>)) / (<i>psi2</i> - <i>psi1</i>), 
            where p0(<i>chi</i>) = log(sec(<i>chi</i>)) and <i>psi</i> = asinh(tan(<i>chi</i>)).
            </returns>
            <remarks>
            This parameters for this routine are the <b>tangents</b> of conformal latitude.
            </remarks>
        </member>
        <member name="T:GeographicLib.DMS">
            <summary>
            Convert between degrees and the DMS representation.
            </summary>
            <remarks>
            Parse a string representing degree, minutes, and seconds and return the angle in degrees and format an angle in degrees as degree,
            minutes, and seconds.In addition, handle NANs and infinities on input and output.
            </remarks>
        </member>
        <member name="M:GeographicLib.DMS.Decode(System.String)">
            <summary>
            Convert a string in <see cref="T:GeographicLib.DMS"/> to an angle.
            </summary>
            <param name="dms">string input</param>
            <returns>
            Angle in degrees and a <see cref="T:GeographicLib.HemisphereIndicator"/> value indicating the presence of a hemisphere indicator.
            </returns>
            <remarks>
            Degrees, minutes, and seconds are indicated by the characters d, ' (single quote), " (double quote), and these components may only be
            given in this order. Any (but not all) components may be omitted and other symbols (e.g., the ° symbol for degrees and the unicode prime
            and double prime symbols for minutes and seconds) may be substituted; two single quotes can be used instead of ". The last component 
            indicator may be omitted and is assumed to be the next smallest unit (thus <c>33d10</c> is interpreted as <c>33d10'</c>).
            The final component may be a decimal fraction but the non-final components must be integers.
            Instead of using d, ', and " to indicate degrees, minutes, and seconds, : (colon) may be used to separate these components (numbers must
            appear before and after each colon); thus <c>50d30'10.3"</c> may be written as <c>50:30:10.3</c>, <c>5.5'</c> may be written <c>0:5.5</c>,
            and so on. The integer parts of the minutes and seconds components must be less than 60. A single leading sign is permitted.
            A hemisphere designator (N, E, W, S) may be added to the beginning or end of the string.
            The result is multiplied by the implied sign of the hemisphere designator (negative for S and W).
            In addition ind is set to <see cref="F:GeographicLib.HemisphereIndicator.Latitude"/> if N or S is present, to <see cref="F:GeographicLib.HemisphereIndicator.Longitude"/>
            if E or W is present, and to <see cref="F:GeographicLib.HemisphereIndicator.None"/> otherwise.
            Leading and trailing whitespace is removed from the string before processing. This routine throws an error on a malformed string.
            No check is performed on the range of the result. Examples of legal and illegal strings are
            <list type="bullet">
            <item>
            <i>LEGAL</i> (all the entries on each line are equivalent)
            <list type="bullet">
            <item><c>-20.51125, 20d30'40.5"S, -20°30'40.5, -20d30.675, N-20d30'40.5", -20:30:40.5</c></item>
            <item><c>4d0'9, 4d9", 4d9'', 4:0:9, 004:00:09, 4.0025, 4.0025d, 4d0.15, 04:.15</c></item>
            <item><c>4:59.99999999999999, 4:60.0, 4:59:59.9999999999999, 4:59:60.0, 5</c></item>
            <item>
            <i>ILLEGAL</i> (the exception thrown explains the problem)
            <list type="bullet">
            <item><c>4d5"4', 4::5, 4:5:, :4:5, 4d4.5'4", -N20.5, 1.8e2d, 4:60, 4:59:60</c></item>
            </list>
            </item>
            </list>
            </item>
            </list>
            The decoding operation can also perform addition and subtraction operations.
            If the string includes internal signs (i.e., not at the beginning nor immediately after an initial hemisphere designator),
            then the string is split immediately before such signs and each piece is decoded according to the above rules and the results added;
            thus <c>S3-2.5+4.1N</c> is parsed as the sum of <c>S3</c>, <c>-2.5</c>, <c>+4.1N</c>. Any piece can include a hemisphere designator;
            however, if multiple designators are given, they must compatible; e.g., you cannot mix N and E. In addition, the designator can appear
            at the beginning or end of the first piece, but must be at the end of all subsequent pieces (a hemisphere designator is not allowed after
            the initial sign). Examples of legal and illegal combinations are
            <list type="bullet">
            <item>
            <i>LEGAL</i> (these are all equivalent): <c>-070:00:45, 70:01:15W+0:0.5, 70:01:15W-0:0:30W, W70:01:15+0:0:30E</c>
            </item>
            <item>
            <i>ILLEGAL</i> (the exception thrown explains the problem): <c>70:01:15W+0:0:15N, W70:01:15+W0:0:15</c>
            </item>
            </list>
            <para>
            <b>WARNING</b>: The "exponential" notation is not recognized. Thus 7.0E1 is illegal, while 7.0E+1 is parsed as (7.0E) + (+1), yielding the same result as 8.0E.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.DMS.Decode(System.Double,System.Double,System.Double)">
            <summary>
            Convert <see cref="T:GeographicLib.DMS"/> to an angle.
            </summary>
            <param name="d">degrees</param>
            <param name="m">arc minutes</param>
            <param name="s">arc seconds</param>
            <returns>Angle in degrees.</returns>
            <remarks>
            This does not propagate the sign on <paramref name="d"/> to the other components, so <c>-3d20'</c> would need to be represented as
            <c>-DMS.Decode(3.0, 20.0)</c> or <c>DMS.Decode(-3.0, -20.0)</c>.
            </remarks>
        </member>
        <member name="M:GeographicLib.DMS.Decode(System.String,System.String,System.Boolean)">
            <summary>
            Convert a pair of strings to latitude and longitude.
            </summary>
            <param name="stra">first string.</param>
            <param name="strb">second string.</param>
            <param name="longfirst">
            if <see langword="true"/> assume longitude is given before latitude in the absence of hemisphere designators (default <see langword="false"/>).
            </param>
            <returns>latitude and longitude in degrees.</returns>
            <remarks>
            By default, the <i>lat</i> (resp., <i>lon</i>) is assigned to the results of decoding <paramref name="stra"/> (resp., <paramref name="strb"/>).
            However this is overridden if either <paramref name="stra"/> or <paramref name="strb"/> contain a latitude or longitude hemisphere designator
            (N, S, E, W).
            </remarks>
        </member>
        <member name="M:GeographicLib.DMS.DecodeAngle(System.String)">
            <summary>
            Convert a string to an angle in degrees.
            </summary>
            <param name="angstr">input string.</param>
            <returns>Angle in degrees.</returns>
            <remarks>
            No hemisphere designator is allowed and no check is done on the range of the result.
            </remarks>
        </member>
        <member name="M:GeographicLib.DMS.DecodeAzimuth(System.String)">
            <summary>
            Convert a string to an azimuth in degrees.
            </summary>
            <param name="azistr">input string.</param>
            <returns>azimuth (degrees) reduced to the range [−180°, 180°].</returns>
            <remarks>
            A hemisphere designator E/W can be used; the result is multiplied by −1 if W is present.
            </remarks>
        </member>
        <member name="M:GeographicLib.DMS.Encode(System.Double,System.Int32,GeographicLib.HemisphereIndicator,System.Char)">
            <summary>
            Convert angle into a <see cref="T:GeographicLib.DMS"/> string (using d, ', and ") selecting the trailing component based on the precision.
            </summary>
            <param name="angle">input angle (degrees)</param>
            <param name="prec">the precision relative to 1 degree.</param>
            <param name="ind"><see cref="T:GeographicLib.HemisphereIndicator"/> value indicating additional formatting.</param>
            <param name="dmssep">if not <c>0</c>, use as the <see cref="T:GeographicLib.DMS"/> separator character (instead of d, ', " delimiters).</param>
            <returns>formatted string</returns>
            <remarks>
            <paramref name="prec"/> indicates the precision relative to 1 degree, e.g., <paramref name="prec"/> = 3 gives a result accurate to 0.1' and
            <paramref name="prec"/> = 4 gives a result accurate to 1". <paramref name="ind"/> is interpreted as in 
            <see cref="M:GeographicLib.DMS.Encode(System.Double,GeographicLib.TrailingUnit,System.Int32,GeographicLib.HemisphereIndicator,System.Char)"/> with the additional facility that <see cref="F:GeographicLib.HemisphereIndicator.Number"/>
            represents angle as a number in fixed format with precision <paramref name="prec"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.DMS.Encode(System.Double,GeographicLib.TrailingUnit,System.Int32,GeographicLib.HemisphereIndicator,System.Char)">
            <summary>
            Convert angle (in degrees) into a DMS string (using d, ', and ").
            </summary>
            <param name="angle">input angle (degrees)</param>
            <param name="trailing"><see cref="T:GeographicLib.TrailingUnit"/> value indicating the trailing units of the string (this component is given as a decimal number if necessary).</param>
            <param name="prec">the number of digits after the decimal point for the trailing component.</param>
            <param name="ind"><see cref="T:GeographicLib.HemisphereIndicator"/> value indicating additional formatting.</param>
            <param name="dmssep">if not <c>0</c>, use as the <see cref="T:GeographicLib.DMS"/> separator character (instead of d, ', " delimiters).</param>
            <returns>formatted string</returns>
            <remarks>
            The interpretation of <paramref name="ind"/> is as follows:
            <list type="bullet">
            <item><paramref name="ind"/> == <see cref="F:GeographicLib.HemisphereIndicator.None"/>,
            signed result no leading zeros on degrees except in the units place, e.g., <c>-8d03'</c>.</item>
            <item><paramref name="ind"/> == <see cref="F:GeographicLib.HemisphereIndicator.Latitude"/>,
            trailing N or S hemisphere designator, no sign, pad degrees to 2 digits, e.g., <c>08d03'S</c>.
            </item>
            <item><paramref name="ind"/> == <see cref="F:GeographicLib.HemisphereIndicator.Longitude"/>,
            trailing E or W hemisphere designator, no sign, pad degrees to 3 digits, e.g., <c>008d03'W</c>.
            </item>
            <item><paramref name="ind"/> == <see cref="F:GeographicLib.HemisphereIndicator.Azimuth"/>,
            convert to the range [0, 360°), no sign, pad degrees to 3 digits, e.g., <c>351d57'</c>.
            </item>
            </list>
            The integer parts of the minutes and seconds components are always given with 2 digits.
            </remarks>
        </member>
        <member name="M:GeographicLib.DMS.EncodeDM(System.Double)">
            <summary>
            Split angle into degrees and minutes.
            </summary>
            <param name="ang">angle (degrees)</param>
            <returns>degrees and arc minutes.</returns>
        </member>
        <member name="M:GeographicLib.DMS.Encode(System.Double)">
            <summary>
            Split angle into degrees and minutes and seconds.
            </summary>
            <param name="ang">angle (degrees)</param>
            <returns>degrees and arc minutes and arc seconds</returns>
        </member>
        <member name="T:GeographicLib.DST">
            <summary>
            Discrete sine transforms.
            </summary>
            <remarks>
            See <a href="https://geographiclib.sourceforge.io/C++/doc/classGeographicLib_1_1DST.html">here</a>
            for detailed description.
            </remarks>
        </member>
        <member name="M:GeographicLib.DST.#ctor(System.Int32)">
            <summary>
            Constructor specifying the number of points to use.
            </summary>
            <param name="N">the number of points to use.</param>
        </member>
        <member name="P:GeographicLib.DST.N">
            <summary>
            Return the number of points.
            </summary>
        </member>
        <member name="M:GeographicLib.DST.Transform(System.Func{System.Double,System.Double},System.Span{System.Double})">
            <summary>
            Determine first <i>N</i> terms in the Fourier series.
            </summary>
            <param name="f">the function used for evaluation.</param>
            <param name="F">the first <i>N</i> coefficients of the Fourier series.</param>
            <remarks>
            The evaluates <i>f</i>(σ) at σ=(<i>j</i>+1)π/(2<i>N</i>) for integer <i>j</i>∈[0,<i>N</i>).
            <i>F</i> should be an array of length at least <i>N</i>.
            </remarks>
        </member>
        <member name="M:GeographicLib.DST.Refine(System.Func{System.Double,System.Double},System.Span{System.Double})">
            <summary>
            Refine the Fourier series by doubling the number of points sampled
            </summary>
            <param name="f">the function used for evaluation.</param>
            <param name="F">
            on input this is the first <i>N</i> coefficents of the Fourier series;
            on output this is the refined transform based on 2<i>N</i> points, i.e., the first 2<i>N</i> coefficents.
            </param>
            <remarks>
            The evaluates <i>f</i>(σ) at additional points σ=(<i>j</i> + 1/2)π/(2<i>N</i>)
            for integer <i>j</i>∈[0,<i>N</i>),
            computes the DST-IV transform of these, and combines this with the input <i>F</i>
            to compute the 2<i>N</i> term DST-III discrete sine transform.
            <para>
            This is equivalent to calling transform with twice the value of <i>N</i> but is
            more efficient, given that the <i>N</i> term coefficients are already known.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.DST.Eval(System.Double,System.Double,System.ReadOnlySpan{System.Double})">
            <summary>
            Evaluate the Fourier sum given the sine and cosine of the angle.
            </summary>
            <param name="sinx">sinσ.</param>
            <param name="cosx">cosσ.</param>
            <param name="F">the array of Fourier coefficients.</param>
            <returns>the value of the Fourier sum.</returns>
        </member>
        <member name="M:GeographicLib.DST.Integral(System.Double,System.Double,System.ReadOnlySpan{System.Double})">
            <summary>
            Evaluate the integral of Fourier sum given the sine and cosine of the
            angle.
            </summary>
            <param name="sinx">sinσ.</param>
            <param name="cosx">cosσ.</param>
            <param name="F">the array of Fourier coefficients.</param>
            <returns>the value of the integral.</returns>
            <remarks>
            The constant of integration is chosen so that the integral is zero at σ=(1/2)π.
            </remarks>
        </member>
        <member name="T:GeographicLib.Ellipsoid">
            <summary>
            Defines properties of an ellipsoid.
            </summary>
            <remarks>
            This class returns various properties of the ellipsoid and converts
            between various types of latitudes. This is for the most part a thin
            wrapper on top of the <see cref="T:GeographicLib.AuxLatitude"/> class which is called with <i>exact</i> =
            <see langword="true"/> so that the results are valid for arbitrary flattenings -100 &lt;
            <i>f</i> &lt; 99/100 (i.e., 1/100 &lt; b/a &lt; 100).
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.#ctor(System.Double,System.Double)">
            <summary>
            Constructor for an ellipsoid with equatorial radius and flattening.
            </summary>
            <param name="a">Equatorial radius (meters).</param>
            <param name="f">Flattening of ellipsoid.  Setting <i>f</i> = 0 gives a sphere.</param>
        </member>
        <member name="P:GeographicLib.Ellipsoid.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius of the ellipsoid (meters).  This is the value used in the constructor.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.PolarRadius">
            <summary>
            Gets a value representing the polar semi-axis (meters).
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.QuarterMeridian">
            <summary>
            Gets a value representing the distance between the equator and a pole along a
            meridian(meters).  For a sphere <i>L</i> = (φ/2) <i>a</i>.The radius
            of a sphere with the same meridian length is <i>L</i> / (φ/2).
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Area">
            <summary>
            Gets a value representing the total area of the ellipsoid (meters^2).  For
            a sphere <i>A</i> = 4π <i>a</i>^2.  The radius of a sphere
            with the same area is sqrt(<i>A</i> / (4π))
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Volume">
            <summary>
            Gets a value representing the total volume of the ellipsoid (meters^3).
            For a sphere <i>V</i> = (4π / 3) <i>a</i>^3.  The radius of
            a sphere with the same volume is cbrt(<i>V</i> / (4π/3)).
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Flattening">
            <summary>
            <i>f</i> = (<i>a</i> - <i>b</i>) / <i>a</i>, the flattening of the
            ellipsoid.This is the value used in the constructor.This is zero,
            positive, or negative for a sphere, oblate ellipsoid, or prolate
            ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.SecondFlattening">
            <summary>
            <i>f</i> ' = (<i>a</i> - <i>b</i>) / <i>b</i>, the second flattening of
            the ellipsoid.This is zero, positive, or negative for a sphere,
            oblate ellipsoid, or prolate ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.ThirdFlattening">
            <summary>
            <i>n</i> = (<i>a</i> - <i>b</i>) / (<i>a</i> + <i>b</i>), the third flattening
            of the ellipsoid.This is zero, positive, or negative for a sphere,
            oblate ellipsoid, or prolate ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.EccentricitySq">
            <summary>
            <i>e</i>^2 = (<i>a</i>^2 - <i>b</i>^2) / <i>a</i>^2, the eccentricity squared
            of the ellipsoid.This is zero, positive, or negative for a sphere,
            oblate ellipsoid, or prolate ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.SecondEccentricitySq">
            <summary>
            <i>e'</i> ^2 = (<i>a</i>^2 - <i>b</i>^2) / <i>b</i>^2, the second eccentricity
            squared of the ellipsoid.This is zero, positive, or negative for a
            sphere, oblate ellipsoid, or prolate ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.ThirdEccentricitySq">
            <summary>
            <i>e''</i> ^2 = (<i>a</i>^2 - <i>b</i>^2) / (<i>a</i>^2 + <i>b</i>^2),
            the third eccentricity squared of the ellipsoid.This is zero,
            positive, or negative for a sphere, oblate ellipsoid, or prolate
            ellipsoid.
            </summary>
        </member>
        <member name="M:GeographicLib.Ellipsoid.ParametricLatitude(System.Double)">
            <summary>
            Parametric latitude conversion.
            </summary>
            <param name="phi">the geographic latitude (degrees).</param>
            <returns>β, the parametric latitude (degrees).</returns>
            <remarks>
            <para>The geographic latitude, φ, is the angle between the equatorial
            plane and a vector normal to the surface of the ellipsoid.</para>
            <para>
            The parametric latitude (also called the reduced latitude), β,
            allows the cartesian coordinates of a meridian to be expressed
            conveniently in parametric form as
            </para>
            <para>
            <i>R</i> = <i>a</i> cos β;
            </para>
            <para>
            <i>Z</i> = <i>b</i> sin β;
            </para>
            <para>
            where <i>a</i> and <i>b</i> are the equatorial radius and the polar semi-axis.
            For a sphere β = φ.
            </para>
            <para>
            φ must lie in the range [-90°, 90°]; the
            result is undefined if this condition does not hold.The returned value
            β lies in [-90°, 90°].
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.InverseParametricLatitude(System.Double)">
            <summary>
            Inverse of <see cref="M:GeographicLib.Ellipsoid.ParametricLatitude(System.Double)"/>.
            </summary>
            <remarks>
            β must lie in the range [-90°, 90°]; the
            result is undefined if this condition does not hold.The returned value
            φ lies in [-90°, 90°].
            </remarks>
            <param name="beta">the parametric latitude (degrees).</param>
            <returns>φ, the geographic latitude (degrees).</returns>
        </member>
        <member name="M:GeographicLib.Ellipsoid.GeocentricLatitude(System.Double)">
            <summary>
            Geocentric latitude conversion.
            </summary>
            <remarks>
            <para>
            The geocentric latitude, θ, is the angle between the equatorial
            plane and a line between the center of the ellipsoid and a point on the
            ellipsoid.For a sphere θ = φ.
            </para>
            <para>
            φ must lie in the range [-90°, 90°]; the
            result is undefined if this condition does not hold.The returned value
            θ lies in [-90°, 90°].
            </para>
            </remarks>
            <param name="phi">the geographic latitude (degrees).</param>
            <returns>θ, the geocentric latitude (degrees).</returns>
        </member>
        <member name="M:GeographicLib.Ellipsoid.InverseGeocentricLatitude(System.Double)">
            <summary>
            Inverse of <see cref="M:GeographicLib.Ellipsoid.GeocentricLatitude(System.Double)"/>.
            </summary>
            <param name="theta">the geocentric latitude (degrees).</param>
            <returns>φ, the geographic latitude (degrees).</returns>
            <remarks>
            θ must lie in the range [-90°, 90°]; the
            result is undefined if this condition does not hold.The returned value
            φ lies in [-90°, 90°].
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.RectifyingLatitude(System.Double)">
            <summary>
            Rectifying latitude conversion.
            </summary>
            <param name="phi">the geographic latitude (degrees).</param>
            <returns>µ, the rectifying latitude (degrees).</returns>
            <remarks>
            <para>
            The rectifying latitude, µ, has the property that the distance along
            a meridian of the ellipsoid between two points with rectifying latitudes
            µ1 and µ2 is equal to
            (µ2 - µ1) <i>L</i> / 90°,
            where <i>L</i> = <see cref="P:GeographicLib.Ellipsoid.QuarterMeridian"/>.For a sphere µ = φ.
            </para>
            <para>
            φ must lie in the range [-90°, 90°]; the
            result is undefined if this condition does not hold.The returned value
            µ lies in [-90°, 90°].
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.InverseRectifyingLatitude(System.Double)">
            <summary>
            Inverse of <see cref="M:GeographicLib.Ellipsoid.RectifyingLatitude(System.Double)"/>.
            </summary>
            <param name="mu">the rectifying latitude (degrees).</param>
            <returns>φ, the geographic latitude (degrees).</returns>
            <remarks>
            µ must lie in the range [-90°, 90°]; the
            result is undefined if this condition does not hold.The returned value
            φ lies in [-90°, 90°].
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.AuthalicLatitude(System.Double)">
            <summary>
            Authalic latitude conversion.
            </summary>
            <param name="phi">the geographic latitude (degrees).</param>
            <returns>ξ, the authalic latitude (degrees).</returns>
            <remarks>
            The authalic latitude, ξ, has the property that the area of the
            ellipsoid between two circles with authalic latitudes
            ξ1 and ξ2 is equal to (sin ξ2 - sin ξ1) <i>A</i> / 2, where <i>A</i>
            = <see cref="P:GeographicLib.Ellipsoid.Area"/>.  For a sphere ξ = φ.
            <para>
            φ must lie in the range [-90°, 90°]; the
            result is undefined if this condition does not hold.The returned value
            ξ lies in [-90°, 90°].
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.InverseAuthalicLatitude(System.Double)">
            <summary>
            Inverse of <see cref="M:GeographicLib.Ellipsoid.AuthalicLatitude(System.Double)"/>.
            </summary>
            <param name="xi">the authalic latitude (degrees).</param>
            <returns>φ, the geographic latitude (degrees).</returns>
            <remarks>
            ξ must lie in the range [-90°, 90°]; the
            result is undefined if this condition does not hold.The returned value
            φ lies in [-90°, 90°].
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.ConformalLatitude(System.Double)">
            <summary>
            Conformal latitude conversion.
            </summary>
            <param name="phi">the geographic latitude (degrees).</param>
            <returns>χ, the conformal latitude (degrees).</returns>
            <remarks>
            The conformal latitude, χ, gives the mapping of the ellipsoid to a
            sphere which which is conformal(angles are preserved) and in which the
            equator of the ellipsoid maps to the equator of the sphere.For a
            sphere χ = φ.
            <para>
            φ must lie in the range [-90°, 90°]; the
            result is undefined if this condition does not hold.The returned value
            χ lies in [-90°, 90°].
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.InverseConformalLatitude(System.Double)">
            <summary>
            Inverse of <see cref="M:GeographicLib.Ellipsoid.ConformalLatitude(System.Double)"/>.
            </summary>
            <param name="chi">the conformal latitude (degrees).</param>
            <returns>φ, the geographic latitude (degrees).</returns>
            <remarks>
            χ must lie in the range [-90°, 90°]; the
            result is undefined if this condition does not hold.The returned value
            φ lies in [-90°, 90°].
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.IsometricLatitude(System.Double)">
            <summary>
            Isometric latitude conversion.
            </summary>
            <param name="phi">the geographic latitude (degrees).</param>
            <returns>Ψ, the isometric latitude (degrees).</returns>
            <remarks>
            <para>
            The isometric latitude gives the mapping of the ellipsoid to a plane
            which which is conformal(angles are preserved) and in which the equator
            of the ellipsoid maps to a straight line of constant scale; this mapping
            defines the Mercator projection.For a sphere Ψ =
            sinh^-1 tan φ.
            </para>
            <para>
            φ must lie in the range [-90°, 90°]; the result is
            undefined if this condition does not hold.The value returned for φ
            = ±90° is some(positive or negative) large but finite value,
            such that <see cref="M:GeographicLib.Ellipsoid.InverseIsometricLatitude(System.Double)"/> returns the original value of φ.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.InverseIsometricLatitude(System.Double)">
            <summary>
            Inverse of <see cref="M:GeographicLib.Ellipsoid.IsometricLatitude(System.Double)"/>.
            </summary>
            <param name="psi">the isometric latitude (degrees).</param>
            <returns>φ, the geographic latitude (degrees).</returns>
            <remarks>
            The returned value φ lies in [-90°, 90°].  For a
            sphere φ = tan^-1 sinh Ψ.
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.CircleRadius(System.Double)">
            <summary>
            Calculates the radius of a circle of specified latitude.
            </summary>
            <param name="phi">the geographic latitude (degrees).</param>
            <returns>
            <i>R</i> = <i>a</i> cos β, the radius of a circle of latitude
            φ (meters). <i>R</i> (π/180°) gives meters per degree
            longitude measured along a circle of latitude.
            </returns>
            <remarks>
            φ must lie in the range [-90°, 90°]; the result is undefined if this condition does not hold.
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.CircleHeight(System.Double)">
            <summary>
            Calculates the distance of a circle of specified latitude from the equator measured parallel to the ellipsoid axis.
            </summary>
            <param name="phi">the geographic latitude (degrees).</param>
            <returns>
            <i>Z</i> = <i>b</i> sin β, the distance of a circle of latitude
              φ from the equator measured parallel to the ellipsoid axis
            (meters).
            </returns>
            <remarks>
            φ must lie in the range [-90°, 90°]; the result is undefined if this condition does not hold.
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.MeridianDistance(System.Double)">
            <summary>
            Calculates the distance along a meridian between the equator and a point of specified latitude.
            </summary>
            <param name="phi">the geographic latitude (degrees).</param>
            <returns>
            <i>s</i>, the distance along a meridian
            between the equator and a point of latitude φ (meters). <i>s</i> is
             given by <i>s</i> = µ <i>L</i> / 90°, where <i>L</i> = <see cref="P:GeographicLib.Ellipsoid.QuarterMeridian"/>.
            </returns>
            <remarks>
            φ must lie in the range [-90°, 90°]; the result is undefined if this condition does not hold.
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.MeridionalCurvatureRadius(System.Double)">
            <summary>
            Calculates the meridional radius of curvature of the ellipsoid at specified latitude.
            </summary>
            <param name="phi">the geographic latitude (degrees).</param>
            <returns>
            ρ, the meridional radius of curvature of the ellipsoid at
            latitude φ (meters); this is the curvature of the meridian. ρ is given by ρ = (180°/π) d<i>s</i> / dφ,
            where <i>s</i> = <see cref="M:GeographicLib.Ellipsoid.MeridianDistance(System.Double)"/>; thus ρ (π/180°)
            gives meters per degree latitude measured along a meridian.
            </returns>
            <remarks>
            φ must lie in the range [-90°, 90°]; the result is undefined if this condition does not hold.
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.TransverseCurvatureRadius(System.Double)">
            <summary>
            Calculate the transverse radius of curvature of the ellipsoid at specified latitude.
            </summary>
            <param name="phi">the geographic latitude (degrees).</param>
            <returns>
            ν, the transverse radius of curvature of the ellipsoid at
            latitude φ (meters); this is the curvature of a curve on the
            ellipsoid which also lies in a plane perpendicular to the ellipsoid
            and to the meridian.  ν is related to <i>R</i> = <see cref="M:GeographicLib.Ellipsoid.CircleRadius(System.Double)"/> by <i>R</i> = ν cos φ.
            </returns>
            <remarks>
            φ must lie in the range [-90°, 90°]; the result is undefined if this condition does not hold.
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.NormalCurvatureRadius(System.Double,System.Double)">
            <summary>
            Calculate the radius of curvature of the ellipsoid in the normal section at specified latitude inclined at specified angle.
            </summary>
            <param name="phi">the geographic latitude (degrees).</param>
            <param name="azi">the angle between the meridian and the normal section (degrees).</param>
            <returns>
            the radius of curvature of the ellipsoid in the normal
            section at latitude φ inclined at an angle <paramref name="azi"/> to the
            meridian(meters).
            </returns>
            <remarks>
            φ must lie in the range [-90°, 90°]; the result is undefined if this condition does not hold.
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.SecondFlatteningToFlattening(System.Double)">
            <summary>
            Converts second flatterning <i>f</i> ' to flatterning <i>f</i>.
            </summary>
            <param name="fp"><i>f</i> ' = (<i>a</i> - <i>b</i>) / <i>b</i>, the second flattening.</param>
            <returns><i>f</i> = (<i>a</i> - <i>b</i>) / <i>a</i>, the flattening.</returns>
            <remarks>
            <i>f</i> ' should lie in (-1, ∞). The returned value <i>f</i> lies in (-∞, 1).
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.FlatteningToSecondFlattening(System.Double)">
            <summary>
            Converts flatterning <i>f</i> to second flatterning <i>f</i> '.
            </summary>
            <param name="f"><i>f</i> = (<i>a</i> - <i>b</i>) / <i>a</i>, the flattening.</param>
            <returns><i>f</i> ' = (<i>a</i> - <i>b</i>) / <i>b</i>, the second flattening.</returns>
            <remarks>
            <i>f</i> should lie in (-∞, 1). The returned value <i>f</i> ' lies in (-1, ∞).
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.ThirdFlatteningToFlattening(System.Double)">
            <summary>
            Converts third flatterning <i>n</i> to flatterning <i>f</i>.
            </summary>
            <param name="n"><i>n</i> = (<i>a</i> - <i>b</i>) / (<i>a</i> + <i>b</i>), the third flattening.</param>
            <returns><i>f</i> = (<i>a</i> - <i>b</i>) / <i>a</i>, the flattening.</returns>
            <remarks>
            <i>n</i> should lie in (-1, 1). The returned value <i>f</i> lies in (-∞, 1).
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.FlatteningToThirdFlattening(System.Double)">
            <summary>
            Converts flatterning <i>f</i> to third flatterning <i>n</i>.
            </summary>
            <param name="f"><i>f</i> = (<i>a</i> - <i>b</i>) / <i>a</i>, the flattening.</param>
            <returns><i>n</i> = (<i>a</i> - <i>b</i>) / (<i>a</i> + <i>b</i>), the third flattening.</returns>
            <remarks>
            <i>f</i> should lie in (-∞, 1). The returned value <i>n</i> lies in (-1, 1).
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.EccentricitySqToFlattening(System.Double)">
            <summary>
            Converts eccentricity squared <i>e</i>^2 to flattening <i>f</i>.
            </summary>
            <param name="e2"><i>e</i>^2 = (<i>a</i>^2 - <i>b</i>^2) / <i>a</i>^2, the eccentricity squared.</param>
            <returns><i>f</i> = (<i>a</i> - <i>b</i>) / <i>a</i>, the flattening.</returns>
            <remarks>
            <i>e</i>^2 should lie in (-∞, 1). The returned value <i>f</i> lies in (-∞, 1).
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.FlatteningToEccentricitySq(System.Double)">
            <summary>
            Converts flattening <i>f</i> to eccentricity squared <i>e</i>^2.
            </summary>
            <param name="f"><i>f</i> = (<i>a</i> - <i>b</i>) / <i>a</i>, the flattening.</param>
            <returns><i>e</i>^2 = (<i>a</i>^2 - <i>b</i>^2) / <i>a</i>^2, the eccentricity squared.</returns>
            <remarks>
            <i>f</i> should lie in (-∞, 1). The returned value <i>e</i>^2 lies in (-∞, 1).
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.SecondEccentricitySqToFlattening(System.Double)">
            <summary>
            Converts second eccentricity squared <i>e'</i>^2 to flattening <i>f</i>.
            </summary>
            <param name="ep2"><i>e'</i>^2 = (<i>a</i>^2 - <i>b</i>^2) / <i>b</i>^2, the second eccentricity squared.</param>
            <returns><i>f</i> = (<i>a</i> - <i>b</i>) / <i>a</i>, the flattening.</returns>
            <remarks>
            <i>e'</i>^2  should lie in (-1, ∞). The returned value <i>f</i> lies in (-∞, 1).
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.FlatteningToSecondEccentricitySq(System.Double)">
            <summary>
            Converts flattening <i>f</i> to second eccentricity squared <i>e'</i>^2.
            </summary>
            <param name="f"><i>f</i> = (<i>a</i> - <i>b</i>) / <i>a</i>, the flattening.</param>
            <returns><i>e'</i>^2 = (<i>a</i>^2 - <i>b</i>^2) / <i>b</i>^2, the second eccentricity squared.</returns>
            <remarks>
            <i>f</i> should lie in (-∞, 1). The returned value <i>e'</i>^2 lies in (-1, ∞).
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.ThirdEccentricitySqToFlattening(System.Double)">
            <summary>
            Converts third eccentricity squared <i>e''</i> ^2 to flatterning <i>f</i>.
            </summary>
            <param name="epp2"><i>e''</i> ^2 = (<i>a</i>^2 - <i>b</i>^2) / (<i>a</i>^2 + <i>b</i>^2), the third eccentricity squared.</param>
            <returns><i>f</i> = (<i>a</i> - <i>b</i>) / <i>a</i>, the flattening.</returns>
            <remarks>
            <i>e''</i> ^2 should lie in (-1,1). The returned value <i>f</i> lies in (-∞, 1).
            </remarks>
        </member>
        <member name="M:GeographicLib.Ellipsoid.FlatteningToThirdEccentricitySq(System.Double)">
            <summary>
            Converts flatterning <i>f</i> to third eccentricity squared <i>e''</i> ^2.
            </summary>
            <param name="f"><i>f</i> = (<i>a</i> - <i>b</i>) / <i>a</i>, the flattening.</param>
            <returns><i>e''</i> ^2 = (<i>a</i>^2 - <i>b</i>^2) / (<i>a</i>^2 + <i>b</i>^2), the third eccentricity squared.</returns>
            <remarks>
            <i>f</i> should lie in (-∞, 1). The returned value <i>e''</i> ^2 lies in (-1,1).
            </remarks>
        </member>
        <member name="P:GeographicLib.Ellipsoid.WGS84">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the WGS-84 (1984) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Maupertuis">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Maupertuis (1738) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Plessis">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Plessis (1817) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Everest">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Everest (1830) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Everest1830Modified">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Everest 1830 Modified (1967) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Everest1830">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Everest 1830 (1967 Definition) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Airy">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Airy (1830) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Bessel">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Bessel (1841) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Clarke1866">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Clarke (1866) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Clarke1878">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Clarke (1878) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Clarke1880">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Clarke (1880) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Helmert">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Helmert (1906) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Hayford">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Hayford (1910) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.International">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the International (1924) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.Krassovsky">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Krassovsky (1940) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.WGS66">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the WGS66 (1966) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.AustralianNational">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the Australian National (1966) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.NewInternational">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the New International (1967) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.GRS67">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the GRS-67 (1967) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.SouthAmerican">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the South American (1969) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.WGS72">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the WGS-72 (1972) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.GRS80">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the GRS-80 (1979) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.IERS1989">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the IERS (1989) reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Ellipsoid.IERS2003">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Ellipsoid"/> with the parameters for the IERS (2003) reference ellipsoid.
            </summary>
        </member>
        <member name="T:GeographicLib.EllipticFunction">
            <summary>
            Provides elliptic integrals and functions.
            </summary>
            <remarks>
            This class provides the elliptic functions and integrals needed for <see cref="T:GeographicLib.Ellipsoid"/>,
            <see cref="T:GeographicLib.GeodesicExact"/>, and <see cref="T:GeographicLib.Projections.TransverseMercatorExact"/>. Two categories of function
            are provided:
            <list type="bullet">
            <item>static functions to compute symmetric elliptic integrals(https://dlmf.nist.gov/19.16.i)</item>
            <item>member functions to compute Legrendre's elliptic integrals(https://dlmf.nist.gov/19.2.ii) and the
            Jacobi elliptic functions (https://dlmf.nist.gov/22.2).</item>
            </list>
            <para>
            In the latter case, an object is constructed giving the modulus <i>k</i> (and
             optionally the parameter α^2).  The modulus is always
            passed as its square<i>k</i>^2 which allows <i>k</i> to be pure
            imaginary (<i>k</i>^2 &lt; 0).  (Confusingly, Abramowitz and
            Stegun call <i>m</i> = <i>k</i>^2 the "parameter" and <i>n</i>  =
            α^2 the "characteristic".)
            </para>
            <para>
            In geodesic applications, it is convenient to separate the incomplete
            integrals into secular and periodic components, e.g.,
            E(φ, k) = (2 E(k) / π) [ φ + Δ E(φ, k)]
            where Δ<i>E</i>(φ, <i>k</i>) is an odd periodic function with period
            π.
            The computation of the elliptic integrals uses the algorithms given in
            - B.C.Carlson,
              <a href = "https://doi.org/10.1007/BF02198293" > Computation of real or
            complex elliptic integrals</a>, Numerical Algorithms 10, 13--26 (1995);
            <a href="https://arxiv.org/abs/math/9409227">preprint</a>.
            with the additional optimizations given in https://dlmf.nist.gov/19.36.i.
            The computation of the Jacobi elliptic functions uses the algorithm given
            in
            - R.Bulirsch,
              <a href = "https://doi.org/10.1007/BF01397975" > Numerical Calculation of
            Elliptic Integrals and Elliptic Functions</a>, Numericshe Mathematik 7,
              78--90 (1965).
            The notation follows <a href = "https://dlmf.nist.gov/19" />  and <a href = " https://dlmf.nist.gov/22" />.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.#ctor(System.Double,System.Double)">
            <summary>
            Constructor specifying the modulus and parameter.
            </summary>
            <param name="k2">the square of the modulus <i>k</i>^2. <i>k</i>^2 must lie in (-∞, 1].</param>
            <param name="alpha2">the parameter α^2. α^2 must lie in (-∞, 1].</param>
            <remarks>
            If only elliptic integrals of the first and second kinds are needed,
            then set α^2 = 0 (the default value); in this case, we
            have Π(φ, 0, <i>k</i>) = <i>F</i>(φ, <i>k</i>), <i>G</i>(φ, 0, <i>k</i>) = <i>E</i>(φ, <i>k</i>),
            and <i>H</i>(φ, 0, <i>k</i>) = <i>F</i>(φ, <i>k</i>) - <i>D</i>(φ, <i>k</i>).
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor specifying the modulus and parameter and their complements.
            </summary>
            <param name="k2">the square of the modulus <i>k</i>^2. <i>k</i>^2 must lie in (-∞, 1].</param>
            <param name="alpha2">the parameter α^2. α^2 must lie in (-∞, 1].</param>
            <param name="kp2">the complementary modulus squared <i>k'</i>^2 = 1 - <i>k</i>^2.  This must lie in [0, ∞).</param>
            <param name="alphap2">the complementary parameter α'^2 = 1 - α^2.  This must lie in [0, ∞).</param>
            <remarks>
            The arguments must satisfy <paramref name="k2"/> + <paramref name="kp2"/> = 1 and <paramref name="alpha2"/> + <paramref name="alphap2"/>
            = 1.  (No checking is done that these conditions are met.)  This
            constructor is provided to enable accuracy to be maintained, e.g., when
            <i>k</i> is very close to unity.
            </remarks>
        </member>
        <member name="P:GeographicLib.EllipticFunction.K2">
            <summary>
            Gets a value representing the square of the modulus <i>k</i>^2.
            </summary>
        </member>
        <member name="P:GeographicLib.EllipticFunction.Kp2">
            <summary>
            Gets a value representing the complementary modulus squared <i>k'</i>^2 = 1 - <i>k</i>^2
            </summary>
        </member>
        <member name="P:GeographicLib.EllipticFunction.Alpha2">
            <summary>
            Gets a value representing the parameter α^2.
            </summary>
        </member>
        <member name="P:GeographicLib.EllipticFunction.Alphap2">
            <summary>
            Gets a value representing the complementary parameter α'^2 = 1 - α^2
            </summary>
        </member>
        <member name="M:GeographicLib.EllipticFunction.K">
            <summary>
            The complete integral of the first kind.
            </summary>
            <returns><i>K</i>(<i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.E">
            <summary>
            The complete integral of the second kind.
            </summary>
            <returns><i>E</i>(<i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.D">
            <summary>
            Jahnke's complete integral.
            </summary>
            <returns><i>D</i>(<i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.KE">
            <summary>
            The difference between the complete integrals of the first and second kinds.
            </summary>
            <returns><i>K</i>(<i>k</i>) - <i>E</i>(<i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Pi">
            <summary>
            The complete integral of the third kind.
            </summary>
            <returns>Π(α^2, <i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.G">
            <summary>
            Legendre's complete geodesic longitude integral.
            </summary>
            <returns><i>G</i>(α^2, <i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.H">
            <summary>
            Cayley's complete geodesic longitude difference integral.
            </summary>
            <returns><i>H</i>(α^2, <i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.F(System.Double)">
            <summary>
            The incomplete integral of the first kind.
            </summary>
            <param name="phi">φ</param>
            <returns><i>F</i>(φ, <i>k</i>).</returns>
            <remarks>
            <i>F</i>(φ, <i>k</i>) is defined in <a href="https://dlmf.nist.gov/19.2.E4"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.E(System.Double)">
            <summary>
            The incomplete integral of the second kind.
            </summary>
            <param name="phi">φ</param>
            <returns><i>E</i>(φ, <i>k</i>).</returns>
            <remarks>
            <i>E</i>(φ, <i>k</i>) is defined in <a href="https://dlmf.nist.gov/19.2.E5"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Ed(System.Double)">
            <summary>
            The incomplete integral of the second kind with the argument given in degrees.
            </summary>
            <param name="ang">in <i>degrees</i>.</param>
            <returns><i>E</i>(π <i>ang</i>/180, <i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Einv(System.Double)">
            <summary>
            The inverse of the incomplete integral of the second kind.
            </summary>
            <param name="x"></param>
            <returns>φ = <i>E</i>^-1(<i>x</i>, <i>k</i>); i.e., the solution of such that <i>E</i>(φ, <i>k</i>) = <i>x</i>.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Pi(System.Double)">
            <summary>
            The incomplete integral of the third kind.
            </summary>
            <param name="phi">φ</param>
            <returns>Π(φ, α^2, <i>k</i>).</returns>
            <remarks>
            Π(φ, α^2, <i>k</i>) is defined in <a href="https://dlmf.nist.gov/19.2.E7"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.D(System.Double)">
            <summary>
            Jahnke's incomplete elliptic integral.
            </summary>
            <param name="phi">φ</param>
            <returns><i>D</i>(φ, <i>k</i>).</returns>
            <remarks>
            <i>D</i>(φ, <i>k</i>) is defined in <a href="https://dlmf.nist.gov/19.2.E4"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.G(System.Double)">
            <summary>
            Legendre's geodesic longitude integral.
            </summary>
            <param name="phi">φ</param>
            <returns><i>G</i>(φ, α^2, <i>k</i>).</returns>
            <remarks>
            Legendre expresses the longitude of a point on the geodesic in terms of
            this combination of elliptic integrals in
            <a href="https://books.google.com/books?id=riIOAAAAQAAJ&amp;pg=PA181">
            Exercices de Calcul Intégral, Vol. 1 (1811), p. 181</a>.
            See geodellip for the expression for the longitude in terms of this
            function.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.H(System.Double)">
            <summary>
            Cayley's geodesic longitude difference integral.
            </summary>
            <param name="phi">φ</param>
            <returns><i>H</i>(φ, α^2, <i>k</i>).</returns>
            <remarks>
            Cayley expresses the longitude difference of a point on the geodesic in
            terms of this combination of elliptic integrals in <a href="https://books.google.com/books?id=Zk0wAAAAIAAJ&amp;pg=PA333">
            Phil.Mag. <b>40</b> (1870), p. 333.</a> 
            See geodellip for the expression for the longitude in terms of this
            function.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.F(System.Double,System.Double,System.Double)">
            <summary>
            The incomplete integral of the first kind in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns><i>F</i>(φ, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.E(System.Double,System.Double,System.Double)">
            <summary>
            The incomplete integral of the second kind in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns><i>E</i>(φ, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Pi(System.Double,System.Double,System.Double)">
            <summary>
            The incomplete integral of the third kind in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>Π(φ, α^2, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.D(System.Double,System.Double,System.Double)">
            <summary>
            Jahnke's incomplete elliptic integral in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns><i>D</i>(φ, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.G(System.Double,System.Double,System.Double)">
            <summary>
            Legendre's geodesic longitude integral in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns><i>G</i>(φ, α^2, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.H(System.Double,System.Double,System.Double)">
            <summary>
            Cayley's geodesic longitude difference integral in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns><i>H</i>(φ, α^2, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.DeltaF(System.Double,System.Double,System.Double)">
            <summary>
            The periodic incomplete integral of the first kind.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π <i>F</i>(φ, <i>k</i>) / (2 <i>K</i>(<i>k</i>)) - φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.DeltaE(System.Double,System.Double,System.Double)">
            <summary>
            The periodic incomplete integral of the second kind.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π <i>E</i>(φ, <i>k</i>) / (2 <i>E</i>(<i>k</i>)) - φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.DeltaEinv(System.Double,System.Double)">
            <summary>
            The periodic inverse of the incomplete integral of the second kind.
            </summary>
            <param name="stau">sinτ</param>
            <param name="ctau">cosτ</param>
            <returns>the periodic function <i>E</i>^-1(τ (2 <i>E</i>(<i>k</i>)/π), <i>k</i>) - τ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.DeltaPi(System.Double,System.Double,System.Double)">
            <summary>
            The periodic incomplete integral of the third kind.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π Π(φ, α^2, <i>k</i>) / (2 Π(α^2, <i>k</i>)) - φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.DeltaD(System.Double,System.Double,System.Double)">
            <summary>
            The periodic Jahnke's incomplete elliptic integral.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π <i>D</i>(φ, <i>k</i>) / (2 <i>D</i>(<i>k</i>)) - φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.DeltaG(System.Double,System.Double,System.Double)">
            <summary>
            Legendre's periodic geodesic longitude integral.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π <i>G</i>(φ, <i>k</i>) / (2 <i>G</i>(<i>k</i>)) - φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.DeltaH(System.Double,System.Double,System.Double)">
            <summary>
            Cayley's periodic geodesic longitude difference integral.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π <i>H</i>(φ, <i>k</i>) / (2 <i>H</i>(<i>k</i>)) -  φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Sncndn(System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            The Jacobi elliptic functions.
            </summary>
            <param name="x">the argument.</param>
            <param name="sn">sn(<i>x</i>, <i>k</i>)</param>
            <param name="cn">cn(<i>x</i>, <i>k</i>)</param>
            <param name="dn">dn(<i>x</i>, <i>k</i>)</param>
            <remarks>
            Implementation of methods given in
            <para>
            R. Bulirsch, Numerical Calculation of Elliptic Integrals and Elliptic Functions, Numericshe Mathematik 7, 78-90 (1965)
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Delta(System.Double,System.Double)">
            <summary>
            The Δ amplitude function.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <returns>Δ = sqrt(1 - <i>k</i>^2 sin^2φ)</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.RF(System.Double,System.Double,System.Double)">
            <summary>
            Symmetric integral of the first kind <i>Rf</i>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns><i>Rf</i>(<i>x</i>, <i>y</i>, <i>z</i>).</returns>
            <remarks>
            <i>Rf</i> is defined in <a href="https://dlmf.nist.gov/19.16.E1"/>.
            <para>
            At most one of arguments, <paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>, can be zero and those
            arguments that are nonzero must be positive. 
            </para>
            <para>
            If one of the arguments is
            zero, it is more efficient to call the two-argument version of this
            function with the non-zero arguments.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.RF(System.Double,System.Double)">
            <summary>
            Complete symmetric integral of the first kind, <i>Rf</i> with one argument zero.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns><i>Rf</i>(<i>x</i>, <i>y</i>, 0).</returns>
            <remarks>
            The arguments <paramref name="x"/> and <paramref name="y"/> must be positive.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.RC(System.Double,System.Double)">
            <summary>
            Degenerate symmetric integral of the first kind <i>Rc</i>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns><i>Rc</i>(x, y) = <i>Rf</i>(<i>x</i>, <i>y</i>, <i>y</i>).</returns>
            <remarks>
            <i>Rc</i> is defined in <a href="https://dlmf.nist.gov/19.16.E17"/>.
            <para>
            Requires <paramref name="x"/> >= 0 and <paramref name="y"/> &gt; 0.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.RG(System.Double,System.Double,System.Double)">
            <summary>
            Symmetric integral of the second kind <i>Rg</i>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns><i>Rg</i>(<i>x</i>, <i>y</i>, <i>z</i>).</returns>
            <remarks>
            <i>Rg</i> is defined in Carlson, eq 1.5. See also <a href="https://dlmf.nist.gov/19.23.E6_5"/>.
            <para>
            At most one of arguments, <paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>, can be zero and those
            arguments that are nonzero must be positive.
            </para>
            If one of the arguments is zero, it is more efficient to call the
            two-argument version of this function with the non-zero arguments.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.RG(System.Double,System.Double)">
            <summary>
            Complete symmetric integral of the second kind, <i>Rg</i> with one argument zero.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns><i>Rg</i>(<i>x</i>, <i>y</i>, 0).</returns>
            <remarks>
            The arguments <paramref name="x"/> and <paramref name="y"/> must be positive.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.RJ(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Symmetric integral of the third kind <i>Rj</i>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="p"></param>
            <returns><i>Rj</i>(<i>x</i>, <i>y</i>, <i>z</i>, <i>p</i>).</returns>
            <remarks>
            <i>Rd</i> is defined in <a href="https://dlmf.nist.gov/19.16.E2"/>.
            <para>
            Requires <paramref name="p"/> &gt; 0, and <paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>
            are nonnegative with at most one of them being 0.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.RD(System.Double,System.Double,System.Double)">
            <summary>
            Degenerate symmetric integral of the third kind <i>Rd</i>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns><i>Rd</i>(<i>x</i>, <i>y</i>, <i>z</i>) = <i>Rj(<i>x</i>, <i>y</i>, <i>z</i>)</i>.</returns>
            <remarks>
            <i>Rd</i> is defined in <a href="https://dlmf.nist.gov/19.16.E5"/>.
            <para>
            Requires <paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/> to be positive
            except that at most one of <paramref name="x"/> and <paramref name="y"/> can be 0.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Reset(System.Double,System.Double)">
            <summary>
            Reset the modulus and parameter.
            </summary>
            <param name="k2">the new value of square of the modulus <i>k</i>^2 which must lie in (-∞, 1].</param>
            <param name="alpha2">the new value of parameter α^2. α^2 must lie in (-∞, 1].</param>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Reset(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Reset the modulus and parameter supplying also their complements.
            </summary>
            <param name="k2">the square of the modulus <i>k</i>^2. <i>k</i>^2 must lie in (-∞, 1].</param>
            <param name="alpha2">the parameter α^2. α^2 must lie in (-∞, 1].</param>
            <param name="kp2">the complementary modulus squared <i>k'</i>^2 = 1 - <i>k</i>^2.  This must lie in [0, ∞).</param>
            <param name="alphap2">the complementary parameter α'^2 = 1 - α^2.  This must lie in [0, ∞).</param>
            <remarks>
            The arguments must satisfy <paramref name="k2"/> + <paramref name="kp2"/> = 1 and <paramref name="alpha2"/> + <paramref name="alphap2"/>
            = 1.  (No checking is done that these conditions are met.)  This
            constructor is provided to enable accuracy to be maintained, e.g., when
            is very small.
            </remarks>
        </member>
        <member name="P:GeographicLib.EllipticFunction.Priv.K2">
            <summary>
            Gets a value representing the square of the modulus <i>k</i>^2.
            </summary>
        </member>
        <member name="P:GeographicLib.EllipticFunction.Priv.Kp2">
            <summary>
            Gets a value representing the complementary modulus squared <i>k'</i>^2 = 1 - <i>k</i>^2
            </summary>
        </member>
        <member name="P:GeographicLib.EllipticFunction.Priv.Alpha2">
            <summary>
            Gets a value representing the parameter α^2.
            </summary>
        </member>
        <member name="P:GeographicLib.EllipticFunction.Priv.Alphap2">
            <summary>
            Gets a value representing the complementary parameter α'^2 = 1 - α^2
            </summary>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.K">
            <summary>
            The complete integral of the first kind.
            </summary>
            <returns><i>K</i>(<i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.E">
            <summary>
            The complete integral of the second kind.
            </summary>
            <returns><i>E</i>(<i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.D">
            <summary>
            Jahnke's complete integral.
            </summary>
            <returns><i>D</i>(<i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.KE">
            <summary>
            The difference between the complete integrals of the first and second kinds.
            </summary>
            <returns><i>K</i>(<i>k</i>) - <i>E</i>(<i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.Pi">
            <summary>
            The complete integral of the third kind.
            </summary>
            <returns>Π(α^2, <i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.G">
            <summary>
            Legendre's complete geodesic longitude integral.
            </summary>
            <returns><i>G</i>(α^2, <i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.H">
            <summary>
            Cayley's complete geodesic longitude difference integral.
            </summary>
            <returns><i>H</i>(α^2, <i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.F(System.Double)">
            <summary>
            The incomplete integral of the first kind.
            </summary>
            <param name="phi">φ</param>
            <returns><i>F</i>(φ, <i>k</i>).</returns>
            <remarks>
            <i>F</i>(φ, <i>k</i>) is defined in <a href="https://dlmf.nist.gov/19.2.E4"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.E(System.Double)">
            <summary>
            The incomplete integral of the second kind.
            </summary>
            <param name="phi">φ</param>
            <returns><i>E</i>(φ, <i>k</i>).</returns>
            <remarks>
            <i>E</i>(φ, <i>k</i>) is defined in <a href="https://dlmf.nist.gov/19.2.E5"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.Ed(System.Double)">
            <summary>
            The incomplete integral of the second kind with the argument given in degrees.
            </summary>
            <param name="ang">in <i>degrees</i>.</param>
            <returns><i>E</i>(π <i>ang</i>/180, <i>k</i>).</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.Einv(System.Double)">
            <summary>
            The inverse of the incomplete integral of the second kind.
            </summary>
            <param name="x"></param>
            <returns>φ = <i>E</i>^-1(<i>x</i>, <i>k</i>); i.e., the solution of such that <i>E</i>(φ, <i>k</i>) = <i>x</i>.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.Pi(System.Double)">
            <summary>
            The incomplete integral of the third kind.
            </summary>
            <param name="phi">φ</param>
            <returns>Π(φ, α^2, <i>k</i>).</returns>
            <remarks>
            Π(φ, α^2, <i>k</i>) is defined in <a href="https://dlmf.nist.gov/19.2.E7"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.D(System.Double)">
            <summary>
            Jahnke's incomplete elliptic integral.
            </summary>
            <param name="phi">φ</param>
            <returns><i>D</i>(φ, <i>k</i>).</returns>
            <remarks>
            <i>D</i>(φ, <i>k</i>) is defined in <a href="https://dlmf.nist.gov/19.2.E4"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.G(System.Double)">
            <summary>
            Legendre's geodesic longitude integral.
            </summary>
            <param name="phi">φ</param>
            <returns><i>G</i>(φ, α^2, <i>k</i>).</returns>
            <remarks>
            Legendre expresses the longitude of a point on the geodesic in terms of
            this combination of elliptic integrals in
            <a href="https://books.google.com/books?id=riIOAAAAQAAJ&amp;pg=PA181">
            Exercices de Calcul Intégral, Vol. 1 (1811), p. 181</a>.
            See geodellip for the expression for the longitude in terms of this
            function.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.H(System.Double)">
            <summary>
            Cayley's geodesic longitude difference integral.
            </summary>
            <param name="phi">φ</param>
            <returns><i>H</i>(φ, α^2, <i>k</i>).</returns>
            <remarks>
            Cayley expresses the longitude difference of a point on the geodesic in
            terms of this combination of elliptic integrals in <a href="https://books.google.com/books?id=Zk0wAAAAIAAJ&amp;pg=PA333">
            Phil.Mag. <b>40</b> (1870), p. 333.</a> 
            See geodellip for the expression for the longitude in terms of this
            function.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.F(System.Double,System.Double,System.Double)">
            <summary>
            The incomplete integral of the first kind in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns><i>F</i>(φ, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.E(System.Double,System.Double,System.Double)">
            <summary>
            The incomplete integral of the second kind in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns><i>E</i>(φ, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.Pi(System.Double,System.Double,System.Double)">
            <summary>
            The incomplete integral of the third kind in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>Π(φ, α^2, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.D(System.Double,System.Double,System.Double)">
            <summary>
            Jahnke's incomplete elliptic integral in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns><i>D</i>(φ, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.G(System.Double,System.Double,System.Double)">
            <summary>
            Legendre's geodesic longitude integral in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns><i>G</i>(φ, α^2, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.H(System.Double,System.Double,System.Double)">
            <summary>
            Cayley's geodesic longitude difference integral in terms of Jacobi elliptic functions.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns><i>H</i>(φ, α^2, <i>k</i>) as though φ ∈ (-π, π].</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.DeltaF(System.Double,System.Double,System.Double)">
            <summary>
            The periodic incomplete integral of the first kind.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π <i>F</i>(φ, <i>k</i>) / (2 <i>K</i>(<i>k</i>)) - φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.DeltaE(System.Double,System.Double,System.Double)">
            <summary>
            The periodic incomplete integral of the second kind.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π <i>E</i>(φ, <i>k</i>) / (2 <i>E</i>(<i>k</i>)) - φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.DeltaEinv(System.Double,System.Double)">
            <summary>
            The periodic inverse of the incomplete integral of the second kind.
            </summary>
            <param name="stau">sinτ</param>
            <param name="ctau">cosτ</param>
            <returns>the periodic function <i>E</i>^-1(τ (2 <i>E</i>(<i>k</i>)/π), <i>k</i>) - τ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.DeltaPi(System.Double,System.Double,System.Double)">
            <summary>
            The periodic incomplete integral of the third kind.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π Π(φ, α^2, <i>k</i>) / (2 Π(α^2, <i>k</i>)) - φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.DeltaD(System.Double,System.Double,System.Double)">
            <summary>
            The periodic Jahnke's incomplete elliptic integral.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π <i>D</i>(φ, <i>k</i>) / (2 <i>D</i>(<i>k</i>)) - φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.DeltaG(System.Double,System.Double,System.Double)">
            <summary>
            Legendre's periodic geodesic longitude integral.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π <i>G</i>(φ, <i>k</i>) / (2 <i>G</i>(<i>k</i>)) - φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.DeltaH(System.Double,System.Double,System.Double)">
            <summary>
            Cayley's periodic geodesic longitude difference integral.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <param name="dn">sqrt(1 - <i>k</i>^2 sin^2φ)</param>
            <returns>the periodic function π <i>H</i>(φ, <i>k</i>) / (2 <i>H</i>(<i>k</i>)) -  φ.</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.Sncndn(System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            The Jacobi elliptic functions.
            </summary>
            <param name="x">the argument.</param>
            <param name="sn">sn(<i>x</i>, <i>k</i>)</param>
            <param name="cn">cn(<i>x</i>, <i>k</i>)</param>
            <param name="dn">dn(<i>x</i>, <i>k</i>)</param>
            <remarks>
            Implementation of methods given in
            <para>
            R. Bulirsch, Numerical Calculation of Elliptic Integrals and Elliptic Functions, Numericshe Mathematik 7, 78-90 (1965)
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.Delta(System.Double,System.Double)">
            <summary>
            The Δ amplitude function.
            </summary>
            <param name="sn">sinφ</param>
            <param name="cn">cosφ</param>
            <returns>Δ = sqrt(1 - <i>k</i>^2 sin^2φ)</returns>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.RF(System.Double,System.Double,System.Double)">
            <summary>
            Symmetric integral of the first kind <i>Rf</i>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns><i>Rf</i>(<i>x</i>, <i>y</i>, <i>z</i>).</returns>
            <remarks>
            <i>Rf</i> is defined in <a href="https://dlmf.nist.gov/19.16.E1"/>.
            <para>
            At most one of arguments, <paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>, can be zero and those
            arguments that are nonzero must be positive. 
            </para>
            <para>
            If one of the arguments is
            zero, it is more efficient to call the two-argument version of this
            function with the non-zero arguments.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.RF(System.Double,System.Double)">
            <summary>
            Complete symmetric integral of the first kind, <i>Rf</i> with one argument zero.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns><i>Rf</i>(<i>x</i>, <i>y</i>, 0).</returns>
            <remarks>
            The arguments <paramref name="x"/> and <paramref name="y"/> must be positive.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.RC(System.Double,System.Double)">
            <summary>
            Degenerate symmetric integral of the first kind <i>Rc</i>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns><i>Rc</i>(x, y) = <i>Rf</i>(<i>x</i>, <i>y</i>, <i>y</i>).</returns>
            <remarks>
            <i>Rc</i> is defined in <a href="https://dlmf.nist.gov/19.16.E17"/>.
            <para>
            Requires <paramref name="x"/> >= 0 and <paramref name="y"/> &gt; 0.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.RG(System.Double,System.Double,System.Double)">
            <summary>
            Symmetric integral of the second kind <i>Rg</i>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns><i>Rg</i>(<i>x</i>, <i>y</i>, <i>z</i>).</returns>
            <remarks>
            <i>Rg</i> is defined in Carlson, eq 1.5. See also <a href="https://dlmf.nist.gov/19.23.E6_5"/>.
            <para>
            At most one of arguments, <paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>, can be zero and those
            arguments that are nonzero must be positive.
            </para>
            If one of the arguments is zero, it is more efficient to call the
            two-argument version of this function with the non-zero arguments.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.RG(System.Double,System.Double)">
            <summary>
            Complete symmetric integral of the second kind, <i>Rg</i> with one argument zero.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns><i>Rg</i>(<i>x</i>, <i>y</i>, 0).</returns>
            <remarks>
            The arguments <paramref name="x"/> and <paramref name="y"/> must be positive.
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.RJ(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Symmetric integral of the third kind <i>Rj</i>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="p"></param>
            <returns><i>Rj</i>(<i>x</i>, <i>y</i>, <i>z</i>, <i>p</i>).</returns>
            <remarks>
            <i>Rd</i> is defined in <a href="https://dlmf.nist.gov/19.16.E2"/>.
            <para>
            Requires <paramref name="p"/> &gt; 0, and <paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>
            are nonnegative with at most one of them being 0.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.RD(System.Double,System.Double,System.Double)">
            <summary>
            Degenerate symmetric integral of the third kind <i>Rd</i>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns><i>Rd</i>(<i>x</i>, <i>y</i>, <i>z</i>) = <i>Rj(<i>x</i>, <i>y</i>, <i>z</i>)</i>.</returns>
            <remarks>
            <i>Rd</i> is defined in <a href="https://dlmf.nist.gov/19.16.E5"/>.
            <para>
            Requires <paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/> to be positive
            except that at most one of <paramref name="x"/> and <paramref name="y"/> can be 0.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.Reset(System.Double,System.Double)">
            <summary>
            Reset the modulus and parameter.
            </summary>
            <param name="k2">the new value of square of the modulus <i>k</i>^2 which must lie in (-∞, 1].</param>
            <param name="alpha2">the new value of parameter α^2. α^2 must lie in (-∞, 1].</param>
        </member>
        <member name="M:GeographicLib.EllipticFunction.Priv.Reset(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Reset the modulus and parameter supplying also their complements.
            </summary>
            <param name="k2">the square of the modulus <i>k</i>^2. <i>k</i>^2 must lie in (-∞, 1].</param>
            <param name="alpha2">the parameter α^2. α^2 must lie in (-∞, 1].</param>
            <param name="kp2">the complementary modulus squared <i>k'</i>^2 = 1 - <i>k</i>^2.  This must lie in [0, ∞).</param>
            <param name="alphap2">the complementary parameter α'^2 = 1 - α^2.  This must lie in [0, ∞).</param>
            <remarks>
            The arguments must satisfy <paramref name="k2"/> + <paramref name="kp2"/> = 1 and <paramref name="alpha2"/> + <paramref name="alphap2"/>
            = 1.  (No checking is done that these conditions are met.)  This
            constructor is provided to enable accuracy to be maintained, e.g., when
            is very small.
            </remarks>
        </member>
        <member name="T:GeographicLib.Geocentric">
            <summary>
            Provides conversion between geodetic and geocentric coordinates.
            </summary>
            <remarks>
            Convert between geodetic coordinates latitude = <i>lat</i>, longitude = <i>lon</i>, height = <i>h</i>
            (measured vertically from the surface of the ellipsoid)  to geocentric coordinates (<i>X</i>, <i>Y</i>, <i>Z</i>). 
            The origin of geocentric coordinates is at the center of the earth. 
            The <i>Z</i> axis goes thru the north pole, <i>lat</i> = 90°. 
            The <i>X</i> axis goes thru <i>lat</i> = 0, <i>lon</i> = 0. 
            Geocentric coordinates are also known as earth centered, earth fixed (ECEF) coordinates.
            <para>
            The conversion from geographic to geocentric coordinates is straightforward. For the reverse transformation we use
            <list type="bullet">
            <item>
            H. Vermeille, 
            <a href="https://doi.org/10.1007/s00190-002-0273-6">Direct transformation from geocentric coordinates to geodetic coordinates</a>,
            J. Geodesy 76, 451–454 (2002).
            </item>
            </list>
            </para>
            <para>
            Several changes have been made to ensure that the method returns accurate results for all finite inputs (even if <i>h</i> is infinite).
            The changes are described in Appendix B of
            <list type="bullet">
            <item>
            C. F. F. Karney,
            <a href="https://arxiv.org/abs/1102.1215v1">Geodesics on an ellipsoid of revolution</a>,
            Feb. 2011; preprint <a href="https://arxiv.org/abs/1102.1215v1">arxiv:1102.1215v1</a>.
            </item>
            </list>
            </para>
            <para>
            Vermeille similarly updated his method in
            <list type="bullet">
            <item>
            H. Vermeille,
            <a href="https://doi.org/10.1007/s00190-010-0419-x">An analytical method to transform geocentric into geodetic coordinates</a>,
            J. Geodesy 85, 105–117 (2011).
            </item>
            </list>
            </para>
            <para>
            See <a href="https://geographiclib.sourceforge.io/html/geocentric.html">Geocentric coordinates</a> for more information.
            </para>
            <para>
            The errors in these routines are close to round-off.
            Specifically, for points within 5000 km of the surface of the ellipsoid (either inside or outside the ellipsoid),
            the error is bounded by 7 nm (7 nanometers) for the WGS84 ellipsoid.
            See <a href="https://geographiclib.sourceforge.io/html/geocentric.html">Geocentric coordinates</a> for further information on the errors.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocentric.#ctor(System.Double,System.Double)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Geocentric"/> instance with specified equatorial radius and flattening of an ellipsoid.
            </summary>
            <param name="a">equatorial radius (meters).</param>
            <param name="f">
            flattening of ellipsoid. Setting <paramref name="f"/> = 0 gives a sphere.
            Negative <paramref name="f"/> gives a prolate ellipsoid.
            </param>
        </member>
        <member name="M:GeographicLib.Geocentric.#ctor(GeographicLib.IEllipsoid)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Geocentric"/> instance with specified <see cref="T:GeographicLib.IEllipsoid"/> instance.
            </summary>
            <param name="ellipsoid">The <see cref="T:GeographicLib.IEllipsoid"/> to use.</param>
        </member>
        <member name="M:GeographicLib.Geocentric.Forward(System.Double,System.Double,System.Double,System.Span{System.Double})">
            <summary>
            Convert from geodetic to geocentric coordinates and return rotation matrix.
            </summary>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="h">height of point above the ellipsoid (meters).</param>
            <param name="M">if the length of the vector is 9, fill with the rotation matrix in row-major order.</param>
            <returns>
            <list type="bullet">
            <item><i>X</i>, <i>x</i> component of geocentric coordinate (meters).</item>
            <item><i>Y</i>, <i>y</i> component of geocentric coordinate (meters).</item>
            <item><i>Z</i>, <i>z</i> component of geocentric coordinate (meters).</item>
            </list>
            </returns>
            <remarks>
            Let <i>v</i> be a unit vector located at (<i>lat</i>, <i>lon</i>, <i>h</i>).
            We can express <i>v</i> as column vectors in one of two ways
            <list type="bullet">
            <item>
            in east, north, up coordinates (where the components are relative to a local coordinate system at (<i>lat</i>, <i>lon</i>, <i>h</i>));
            call this representation <i>v1</i>.
            </item>
            <item>
            in geocentric <i>X</i>, <i>Y</i>, <i>Z</i> coordinates; call this representation <i>v0</i>.
            </item>
            </list>
            <para>
            Then we have <i>v0</i> = <i>M</i> ⋅ <i>v1</i>.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocentric.Reverse(System.Double,System.Double,System.Double,System.Span{System.Double})">
            <summary>
            Convert from geocentric to geodetic to coordinates.
            </summary>
            <param name="X"><i>x</i> component of geocentric coordinate (meters).</param>
            <param name="Y"><i>y</i> component of geocentric coordinate (meters).</param>
            <param name="Z"><i>z</i> component of geocentric coordinate (meters).</param>
            <param name="M">if the length of the vector is 9, fill with the rotation matrix in row-major order.</param>
            <returns>
            <list type="bullet">
            <item><i>lat</i>, latitude of point (degrees).</item>
            <item><i>lon</i>, longitude of point (degrees).</item>
            <item><i>h</i>, height of point above the ellipsoid (meters).</item>
            </list>
            </returns>
            <remarks>
            Let <i>v</i> be a unit vector located at (<i>lat</i>, <i>lon</i>, <i>h</i>).
            We can express <i>v</i> as column vectors in one of two ways
            <list type="bullet">
            <item>
            in east, north, up coordinates (where the components are relative to a local coordinate system at (<i>lat</i>, <i>lon</i>, <i>h</i>));
            call this representation <i>v1</i>.
            </item>
            <item>
            in geocentric <i>X</i>, <i>Y</i>, <i>Z</i> coordinates; call this representation <i>v0</i>.
            </item>
            </list>
            <para>
            Then we have <i>v1</i> = <i>M</i>^T ⋅ <i>v0</i>, where <i>M</i>^T is the transpose of <i>M</i>.
            </para>
            <para>
            In general, there are multiple solutions and the result which minimizes |<i>h</i>|is returned, 
            i.e., (<i>lat</i>, <i>lon</i>) corresponds to the closest point on the ellipsoid.
            If there are still multiple solutions with different latitudes (applies only if <i>Z</i> = 0), 
            then the solution with <i>lat</i> > 0 is returned.
            If there are still multiple solutions with different longitudes (applies only if <i>X</i> = <i>Y</i> = 0)
            then <i>lon</i> = <c>0</c> is returned. The value of <i>h</i> returned satisfies <i>h</i> ≥ − <i>a</i> (1 − <i>e</i>^2) / sqrt(1 − <i>e</i>^2 sin^2<i>lat</i>).
            The value of lon returned is in the range [−180°, 180°].
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocentric.Rotate(System.ReadOnlySpan{System.Double},System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Perform [X,Y,Z]^t = M.[x,y,z]^t (typically local cartesian to geocentric)
            </summary>
            <param name="M"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
        </member>
        <member name="M:GeographicLib.Geocentric.Rotate(System.ReadOnlySpan{System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Perform [X,Y,Z]^t = M.[x,y,z]^t (typically local cartesian to geocentric)
            </summary>
            <param name="M"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Geocentric.Unrotate(System.ReadOnlySpan{System.Double},System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Perform [x,y,z]^t = M^t.[X,Y,Z]^t (typically geocentric to local cartesian)
            </summary>
            <param name="M"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:GeographicLib.Geocentric.Unrotate(System.ReadOnlySpan{System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Perform [x,y,z]^t = M^t.[X,Y,Z]^t (typically geocentric to local cartesian)
            </summary>
            <param name="M"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Geocentric.Rotation(System.Double,System.Double,System.Double,System.Double,System.Span{System.Double})">
            <summary>
            This rotation matrix is given by the following quaternion operations
            qrot(lam, [0,0,1]) * qrot(phi, [0,-1,0]) * [1,1,1,1]/2
            or
            qrot(pi/2 + lam, [0,0,1]) * qrot(-pi/2 + phi , [-1,0,0])
            where
            qrot(t,v) = [cos(t/2), sin(t/2)*v[1], sin(t/2)*v[2], sin(t/2)*v[3]]
            </summary>
            <param name="sphi"></param>
            <param name="cphi"></param>
            <param name="slam"></param>
            <param name="clam"></param>
            <param name="M"></param>
        </member>
        <member name="P:GeographicLib.Geocentric.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius (<i>a</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Geocentric.Flattening">
            <summary>
            Gets a value representing the flattening (<i>f</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Geocentric.WGS84">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Geocentric"/> with the parameters for the WGS84 ellipsoid.
            </summary>
        </member>
        <member name="T:GeographicLib.Geocodes.GARS">
            <summary>
            Conversions for the Global Area Reference System (<see cref="T:GeographicLib.Geocodes.GARS"/>).
            </summary>
            <remarks>
            The Global Area Reference System is described in
            <list type="bullet">
            <item><a href="https://en.wikipedia.org/wiki/Global_Area_Reference_System"></a></item>
            <item><a href="https://earth-info.nga.mil/index.php?dir=coordsys&amp;action=coordsys#tab_gars"></a></item>
            </list>
            <para>
            It provides a compact string representation of a geographic area (expressed as latitude and longitude).
            The classes <see cref="T:GeographicLib.Geocodes.Georef"/> and <see cref="T:GeographicLib.Geocodes.Geohash"/> implement similar compact representations.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.GARS.Forward(System.Double,System.Double,System.Int32)">
            <summary>
            Convert from geographic coordinates to <see cref="T:GeographicLib.Geocodes.GARS"/>.
            </summary>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="prec">the precision of the resulting <see cref="T:GeographicLib.Geocodes.GARS"/>.</param>
            <returns>the <see cref="T:GeographicLib.Geocodes.GARS"/> string.</returns>
            <remarks>
            <i>prec</i> specifies the precision of gars as follows:
            <list type="bullet">
            <item><i>prec</i> = 0 (min), 30' precision, e.g., 006AG;</item>
            <item><i>prec</i> = 1, 15' precision, e.g., 006AG3;</item>
            <item><i>prec</i> = 2 (max), 5' precision, e.g., 006AG39.</item>
            </list>
            <para>
            If <i>lat</i> or <i>lon</i> is <see cref="F:System.Double.NaN"/>, then "INVALID" is returned.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.GARS.Reverse(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Convert from <see cref="T:GeographicLib.Geocodes.GARS"/> to geographic coordinates.
            </summary>
            <param name="gars">a <see cref="T:GeographicLib.Geocodes.GARS"/> string.</param>
            <param name="centerp">if <see langword="true"/> (the default) return the center of the gars, otherwise return the south-west corner.</param>
            <returns>
            <i>lat</i>, latitude of point (degrees), <i>lon</i>, longitude of point (degrees) and <i>prec</i>, 
            precision of the input <see cref="T:GeographicLib.Geocodes.GARS"/> string.
            </returns>
            <remarks>
            The case of the letters in gars is ignored. <i>prec</i> is in the range [0, 2] and gives the precision of gars as follows:
            <list type="bullet">
            <item><i>prec</i> = 0 (min), 30' precision, e.g., 006AG;</item>
            <item><i>prec</i> = 1, 15' precision, e.g., 006AG3;</item>
            <item><i>prec</i> = 2 (max), 5' precision, e.g., 006AG39.</item>
            </list>
            <para>
            If the first 3 characters of <i>gars</i> are "INV", then <i>lat</i> and <i>lon</i> are set to NaN and <i>prec</i> is unchanged.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.GARS.Resolution(System.Int32)">
            <summary>
            Gets the angular resolution of a <see cref="T:GeographicLib.Geocodes.GARS"/>.
            </summary>
            <param name="prec">the precision of the <see cref="T:GeographicLib.Geocodes.GARS"/></param>
            <returns>the latitude-longitude resolution (degrees).</returns>
            <remarks>
            Internally, <i>prec</i> is first put in the range [0, 2].
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.GARS.Precision(System.Double)">
            <summary>
            Gets the <a href="https://geographiclib.sourceforge.io/html/classGeographicLib_1_1GARS.html">GARS</a> precision required to meet a given geographic resolution.
            </summary>
            <param name="res">the minimum of resolution in latitude and longitude (degrees).</param>
            <returns><a href="https://geographiclib.sourceforge.io/html/classGeographicLib_1_1GARS.html">GARS</a> precision.</returns>
            <remarks>
            The returned length is in the range [0, 2].
            </remarks>
        </member>
        <member name="T:GeographicLib.Geocodes.Geohash">
            <summary>
            Conversions for geohashes.
            </summary>
            <remarks>
            Geohashes are described in
            <list type="bullet">
            <item><a href="https://en.wikipedia.org/wiki/Geohash"></a></item>
            <item><a href="http://geohash.org/"></a></item>
            </list>
            <para>
            They provide a compact string representation of a particular geographic location (expressed as latitude and longitude),
            with the property that if trailing characters are dropped from the string the geographic location remains nearby.
            The classes <see cref="T:GeographicLib.Geocodes.Georef"/> and <see cref="T:GeographicLib.Geocodes.GARS"/> implement similar compact representations.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.Geohash.Forward(System.Double,System.Double,System.Int32)">
            <summary>
            Convert from geographic coordinates to a geohash.
            </summary>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="len">the length of the resulting geohash.</param>
            <returns>the geohash.</returns>
            <remarks>
            Internally, <i>len</i> is first put in the range [0, 18]. (<i>len</i> = 18 provides approximately 1μm precision.)
            <para>
            If <i>lat</i> or <i>lon</i> is <see cref="F:System.Double.NaN"/>, the returned geohash is "invalid".
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.Geohash.Reverse(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Convert from a geohash to geographic coordinates.
            </summary>
            <param name="geohash">the geohash.</param>
            <param name="centerp">if <see langword="true"/> (the default) return the center of the geohash location, otherwise return the south-west corner.</param>
            <returns>
            <i>lat</i>, latitude of point (degrees), <i>lon</i>, longitude of point (degrees) and <i>len</i>, the length of the geohash.
            </returns>
            <remarks>
            Only the first 18 characters for <i>geohash</i> are considered. (18 characters provides approximately 1μm precision.) 
            The case of the letters in <i>geohash</i> is ignored.
            <para>
            If the first 3 characters of <i>geohash</i> are "inv", then <i>lat</i> and <i>lon</i> are set to <see cref="F:System.Double.NaN"/> and len is unchanged. ("nan" is treated similarly.)
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.Geohash.LatitudeResolution(System.Int32)">
            <summary>
            Gets the latitude resolution of a geohash.
            </summary>
            <param name="len">the length of the geohash.</param>
            <returns>the latitude resolution (degrees).</returns>
            <remarks>
            Internally, <paramref name="len"/> is first put in the range [0, 18].
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.Geohash.LongitudeResolution(System.Int32)">
            <summary>
            Gets the longitude resolution of a geohash.
            </summary>
            <param name="len">the length of the geohash.</param>
            <returns>the longitude resolution (degrees).</returns>
            <remarks>
            Internally, <paramref name="len"/> is first put in the range [0, 18].
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.Geohash.GeohashLength(System.Int32)">
            <summary>
            Gets the geohash length required to meet a given geographic resolution.
            </summary>
            <param name="res">the minimum of resolution in latitude and longitude (degrees).</param>
            <returns>geohash length in the range [0, 18].</returns>
        </member>
        <member name="M:GeographicLib.Geocodes.Geohash.GeohashLength(System.Int32,System.Int32)">
            <summary>
            Gets the geohash length required to meet a given geographic resolution.
            </summary>
            <param name="latres">the resolution in latitude (degrees).</param>
            <param name="lonres">the resolution in longitude (degrees).</param>
            <returns>geohash length in the range [0, 18].</returns>
        </member>
        <member name="M:GeographicLib.Geocodes.Geohash.DecimalPrecision(System.Int32)">
            <summary>
            Gets the decimal geographic precision required to match a given geohash length.
            This is the number of digits needed after decimal point in a decimal degrees representation.
            </summary>
            <param name="len">the length of the geohash.</param>
            <returns>the decimal precision (may be negative).</returns>
            <remarks>
            Internally, <paramref name="len"/> is first put in the range [0, 18]. The returned decimal precision is in the range [−2, 12].
            </remarks>
        </member>
        <member name="T:GeographicLib.Geocodes.Georef">
            <summary>
            Conversions for the World Geographic Reference System (georef).
            </summary>
            <remarks>
            The World Geographic Reference System is described in
            <list type="bullet">
            <item><a href="https://en.wikipedia.org/wiki/Georef"></a></item>
            <item><a href="https://web.archive.org/web/20161214054445/http://earth-info.nga.mil/GandG/coordsys/grids/georef.pdf"></a></item>
            </list>
            <para>
            It provides a compact string representation of a geographic area (expressed as latitude and longitude).
            The classes <see cref="T:GeographicLib.Geocodes.GARS"/> and <see cref="T:GeographicLib.Geocodes.Geohash"/> implement similar compact representations.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.Georef.Forward(System.Double,System.Double,System.Int32)">
            <summary>
            Convert from geographic coordinates to <see cref="T:GeographicLib.Geocodes.Georef"/>.
            </summary>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="prec">the precision of the resulting georef.</param>
            <returns>the georef string.</returns>
            <remarks>
            <i>prec</i> specifies the precision of <i>georef</i> as follows:
            <list type="bullet">
            <item><i>prec</i> = −1 (min), 15°</item>
            <item><i>prec</i> = 0, 1°</item>
            <item><i>prec</i> = 1, converted to <i>prec</i> = 2</item>
            <item><i>prec</i> = 2, 1'</item>
            <item><i>prec</i> = 3, 0.1'</item>
            <item><i>prec</i> = 4, 0.01'</item>
            <item><i>prec</i> = 5, 0.001'</item>
            <item>…</item>
            <item><i>prec</i> = 11 (max), 10^−9'</item>
            </list>
            <para>
            If <paramref name="lat"/> or <paramref name="lon"/> is <see cref="F:System.Double.NaN"/>, then georef is set to "INVALID".
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.Georef.Reverse(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Convert from <see cref="T:GeographicLib.Geocodes.Georef"/> to geographic coordinates.
            </summary>
            <param name="georef">the <see cref="T:GeographicLib.Geocodes.Georef"/> string.</param>
            <param name="centerp">
            if <see langword="true"/> (the default) return the center <i>georef</i>, otherwise return the south-west corner.
            </param>
            <returns><i>lat</i>, latitude of point (degrees), <i>lon</i>, longitude of point (degrees) and <i>prec</i>, 
            precision of the input <see cref="T:GeographicLib.Geocodes.Georef"/> string.</returns>
            <remarks>
            The case of the letters in <i>georef</i> is ignored. <i>prec</i> is in the range [−1, 11] and gives the precision of <i>georef</i> as follows:
            <list type="bullet">
            <item><i>prec</i> = −1 (min), 15°</item>
            <item><i>prec</i> = 0, 1°</item>
            <item><i>prec</i> = 1, converted to <i>prec</i> = 2</item>
            <item><i>prec</i> = 2, 1'</item>
            <item><i>prec</i> = 3, 0.1'</item>
            <item><i>prec</i> = 4, 0.01'</item>
            <item><i>prec</i> = 5, 0.001'</item>
            <item>…</item>
            <item><i>prec</i> = 11 (max), 10^−9'</item>
            </list>
            <para>
            If the first 3 characters of <i>georef</i> are "INV", then <i>lat</i> and <i>lon</i> are set to <see cref="F:System.Double.NaN"/> and <i>prec</i> is unchanged.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.Georef.Resolution(System.Int32)">
            <summary>
            Gets the angular resolution of a <see cref="T:GeographicLib.Geocodes.Georef"/>.
            </summary>
            <param name="prec">the precision of the <see cref="T:GeographicLib.Geocodes.Georef"/>.</param>
            <returns>the latitude-longitude resolution (degrees).</returns>
            <remarks>
            Internally, <i>prec</i> is first put in the range [−1, 11].
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.Georef.Precision(System.Double)">
            <summary>
            Gets the <see cref="T:GeographicLib.Geocodes.Georef"/> precision required to meet a given geographic resolution.
            </summary>
            <param name="res">the minimum of resolution in latitude and longitude (degrees).</param>
            <returns><see cref="T:GeographicLib.Geocodes.Georef"/> precision</returns>
            <remarks>
            The returned length is in the range [0, 11].
            </remarks>
        </member>
        <member name="T:GeographicLib.Geocodes.MGRS">
            <summary>
            Convert between UTM/UPS and MGRS.
            </summary>
            <remarks>
            <see cref="T:GeographicLib.Geocodes.MGRS"/> is defined in Chapter 3 of
            <list type="bullet">
            <item>
            J. W. Hager, L. L. Fry, S. S. Jacks, D. R. Hill,
            <a href="https://web.archive.org/web/20161214054445/http://earth-info.nga.mil/GandG/publications/tm8358.1/pdf/TM8358_1.pdf">Datums, Ellipsoids, Grids, and Grid Reference Systems</a>,
            Defense Mapping Agency, Technical Manual TM8358.1 (1990).
            </item>
            </list>
            This document has been updated by the two NGA documents
            <list type="bullet">
            <item><a href="https://earth-info.nga.mil/php/download.php?file=coord-grids">
            Universal Grids and Grid Reference Systems</a>, NGA.STND.0037 (2014).</item>
            <item><a href="https://earth-info.nga.mil/php/download.php?file=coord-utmups">
            The Universal Grids and the Transverse Mercator and Polar Stereographic Map Projections</a>, NGA.SIG.0012 (2014).</item>
            </list>
            This implementation has the following properties:
            <list type="bullet">
            <item>The conversions are closed, i.e., output from Forward is legal input for Reverse and vice versa.
            Conversion in both directions preserve the UTM/UPS selection and the UTM zone.</item>
            <item>Forward followed by Reverse and vice versa is approximately the identity.
            (This is affected in predictable ways by errors in determining the latitude band and by loss of precision in the <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinates.)</item>
            <item>The trailing digits produced by Forward are consistent as the precision is varied.
            Specifically, the digits are obtained by operating on the easting with ⌊10^6 <i>x</i>⌋ 
            and extracting the required digits from the resulting number (and similarly for the northing).</item>
            <item>All <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinates truncate to legal 100 km blocks.
            All <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinates with a legal 100 km block prefix are legal (even though the latitude band letter may now belong to a neighboring band).</item>
            <item>The range of UTM/UPS coordinates allowed for conversion to <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinates 
            is the maximum consistent with staying within the letter ranges of the <see cref="T:GeographicLib.Geocodes.MGRS"/> scheme.</item>
            <item>All the transformations are implemented as static methods in the <see cref="T:GeographicLib.Geocodes.MGRS"/> class.</item>
            </list>
            The <a href="http://www.nga.mil">NGA</a> software package <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84#tab_geotrans">geotrans</a>
            also provides conversions to and from <see cref="T:GeographicLib.Geocodes.MGRS"/>. Version 3.0 (and earlier) suffers from some drawbacks:
            <list type="bullet">
            <item>Inconsistent rules are used to determine the whether a particular <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate is legal. A more systematic approach is taken here.</item>
            <item>The underlying projections are not very accurately implemented.</item>
            </list>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.MGRS.LatitudeBand(System.Double)">
            <summary>
            Return latitude band number [-10, 10) for the given latitude (degrees).
            The bands are reckoned in include their southern edges.
            </summary>
            <param name="lat"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Geocodes.MGRS.ApproxLatitudeBand(System.Double)">
            <summary>
            Return approximate latitude band number [-10, 10) for the given northing
            (meters).  With this rule, each 100km tile would have a unique band
            letter corresponding to the latitude at the center of the tile.  This
            function isn't currently used.
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Geocodes.MGRS.Forward(System.Int32,System.Boolean,System.Double,System.Double,System.Int32)">
            <summary>
            Convert UTM or UPS coordinate to an MGRS coordinate.
            </summary>
            <param name="zone">UTM zone (zero means UPS).</param>
            <param name="northp">hemisphere (<see langword="true"/> means north, <see langword="false"/> means south).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="prec">precision relative to 100 km.</param>
            <returns>A <see cref="T:GeographicLib.Geocodes.MGRS"/> string.</returns>
            <remarks>
            <i>prec</i> specifies the precision of the <see cref="T:GeographicLib.Geocodes.MGRS"/> as follows:
            <list type="bullet">
            <item><i>prec</i> = -1 (min), only the grid zone is returned</item>
            <item><i>prec</i> = 0, 100km</item>
            <item><i>prec</i> = 1, 10km</item>
            <item><i>prec</i> = 2, 1km</item>
            <item><i>prec</i> = 3, 100m</item>
            <item><i>prec</i> = 4, 10m</item>
            <item><i>prec</i> = 5, 1m</item>
            <item><i>prec</i> = 6, 0.1m</item>
            <item>...</item>
            <item><i>prec</i> = 11 (max), 1μm</item>
            </list>
            <para>
            UTM eastings are allowed to be in the range [100 km, 900 km],
            northings are allowed to be in in [0 km, 9500 km] for the northern hemisphere and in [1000 km, 10000 km] for the southern hemisphere.
            (However UTM northings can be continued across the equator. So the actual limits on the northings are [−9000 km, 9500 km]
            for the "northern" hemisphere and [1000 km, 19500 km] for the "southern" hemisphere.)
            </para>
            <para>
            UPS eastings/northings are allowed to be in the range [1300 km, 2700 km] in the northern hemisphere
            and in [800 km, 3200 km] in the southern hemisphere.
            </para>
            <para>
            The ranges are 100 km more restrictive than for the conversion between geographic coordinates and UTM and UPS given by <see cref="T:GeographicLib.UTMUPS"/>.
            These restrictions are dictated by the allowed letters in <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinates.
            The choice of 9500 km for the maximum northing for northern hemisphere and of 1000 km as the minimum northing for southern hemisphere
            provide at least 0.5 degree extension into standard UPS zones.
            The upper ends of the ranges for the UPS coordinates is dictated by requiring symmetry about the meridians <c>0E</c> and <c>90E</c>.
            </para>
            <para>
            All allowed UTM and UPS coordinates may now be converted to legal <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinates with the proviso that eastings and northings
            on the upper boundaries are silently reduced by about 4 nm (4 nanometers) to place them within the allowed range.
            (This includes reducing a southern hemisphere northing of 10000 km by 4 nm so that it is placed in latitude band <c>M</c>.)
            The UTM or UPS coordinates are truncated to requested precision to determine the <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate.
            Thus in UTM zone <c>38N</c>, the square area with easting in [444 km, 445 km) and northing in [3688 km, 3689 km) maps to <see cref="T:GeographicLib.Geocodes.MGRS"/>
            coordinate <c>38SMB4488</c> (at <i>prec</i> = 2, 1 km), Khulani Sq., Baghdad.
            </para>
            <para>
            The UTM/UPS selection and the UTM zone is preserved in the conversion to <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate.
            Thus for <i>zone</i> > 0, the <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate begins with the zone number followed by one of [<c>C</c>–<c>M</c>] for the southern hemisphere
            and [<c>N</c>–<c>X</c>] for the northern hemisphere. For <i>zone</i> = 0, the <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinates begins with one of [<c>AB</c>] for the 
            southern hemisphere and [<c>XY</c>] for the northern hemisphere.
            </para>
            <para>
            The conversion to the <see cref="T:GeographicLib.Geocodes.MGRS"/> is exact for prec in [0, 5] except that a neighboring 
            latitude band letter may be given if the point is within 5nm of a band boundary. For <i>prec</i> in [6, 11], the conversion is accurate to roundoff.
            </para>
            <para>
            If <i>prec</i> = −1, then the "grid zone designation", e.g., <c>18T</c>, is returned.
            This consists of the UTM zone number (absent for UPS) and the first letter of the <see cref="T:GeographicLib.Geocodes.MGRS"/> string which labels the latitude band
            for UTM and the hemisphere for UPS.
            </para>
            <para>
            If <i>x</i> or <i>y</i> is <see cref="F:System.Double.NaN"/> or if zone is <see cref="F:GeographicLib.ZoneSpec.Invalid"/>, the returned <see cref="T:GeographicLib.Geocodes.MGRS"/> string is "INVALID".
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.MGRS.Forward(System.Int32,System.Boolean,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Convert UTM or UPS coordinate to an <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate when the latitude is known.
            </summary>
            <param name="zone">UTM zone (zero means UPS).</param>
            <param name="northp">hemisphere (true means north, false means south).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="lat">latitude (degrees).</param>
            <param name="prec">precision relative to 100 km.</param>
            <returns>A <see cref="T:GeographicLib.Geocodes.MGRS"/> string.</returns>
            <remarks>
            The latitude is ignored for <i>zone</i> = 0 (UPS);
            otherwise the latitude is used to determine the latitude band and this is checked for consistency using the same tests as <see cref="M:GeographicLib.Geocodes.MGRS.Reverse(System.ReadOnlySpan{System.Char},System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.MGRS.Reverse(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Convert a <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate to UTM or UPS coordinates.
            </summary>
            <param name="mgrs"><see cref="T:GeographicLib.Geocodes.MGRS"/> string.</param>
            <param name="centerp">if <see langword="true"/> (default), return center of the <see cref="T:GeographicLib.Geocodes.MGRS"/> square, else return SW (lower left) corner.</param>
            <returns>
            <list type="bullet">
            <item><i>zone</i>, UTM zone (zero means UPS).</item>
            <item><i>northp</i>, hemisphere (<see langword="true"/> means north, <see langword="false"/> means south).</item>
            <item><i>x</i>, easting of point (meters).</item>
            <item><i>y</i>, northing of point (meters).</item>
            <item><i>prec</i>, precision relative to 100 km.</item>
            </list>
            </returns>
            <remarks>
            All conversions from <see cref="T:GeographicLib.Geocodes.MGRS"/> to UTM/UPS are permitted provided the <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate is a possible result
            of a conversion in the other direction. (The leading 0 may be dropped from an input <see cref="T:GeographicLib.Geocodes.MGRS"/>  coordinate for UTM zones 1–9.)
            In addition, <see cref="T:GeographicLib.Geocodes.MGRS"/>  coordinates with a neighboring latitude band letter are permitted provided that some portion of the 100 km block
            is within the given latitude band. Thus
            <list type="bullet">
            <item><c>38VLS</c> and <c>38WLS</c> are allowed (latitude <c>64N</c> intersects the square <c>38[VW]LS</c>);
            but <c>38VMS</c> is not permitted (all of <c>38WMS</c> is north of <c>64N</c>)</item>
            <item><c>38MPE</c> and <c>38NPF</c> are permitted (they straddle the equator);
            but <c>38NPE</c> and <c>38MPF</c> are not permitted (the equator does not intersect either block).</item>
            <item>Similarly <c>ZAB</c> and <c>YZB</c> are permitted (they straddle the prime meridian);
            but <c>YAB</c> and <c>ZZB</c> are not (the prime meridian does not intersect either block).</item>
            </list>
            <para>
            The UTM/UPS selection and the UTM zone is preserved in the conversion from <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate.
            The conversion is exact for <i>prec</i> in [0, 5].
            With <i>centerp</i> = <see langword="true"/>, the conversion from <see cref="T:GeographicLib.Geocodes.MGRS"/> to geographic and back is stable.
            This is not assured if <i>centerp</i> = <see langword="false"/>.
            </para>
            <para>
            If a "grid zone designation" (for example, <c>18T</c> or <c>A</c>) is given,
            then some suitable (but essentially arbitrary) point within that grid zone is returned.
            The main utility of the conversion is to allow zone and  <i>northp</i> to be determined.
            In this case, the centerp parameter is ignored and <i>prec</i> is set to <c>−1</c>.
            </para>
            <para>
            If the first 3 characters of <paramref name="mgrs"/> are "INV", 
            then <i>x</i> and <i>y</i> are set to <see cref="F:System.Double.NaN"/>, <i>zone</i> is set to <see cref="F:GeographicLib.ZoneSpec.Invalid"/>,
            and <i>prec</i> is set to <c>−2</c>.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.MGRS.Decode(System.ReadOnlySpan{System.Char})">
            <summary>
            Split a MGRS grid reference into its components.
            </summary>
            <param name="mgrs">MGRS string, e.g., 38SMB4488.</param>
            <returns>
            <list type="table">
            <item><i>gridzone</i> the grid zone, e.g., 38S.</item>
            <item><i>block</i> the 100km block id, e.g., MB.</item>
            <item><i>easting</i> the leading digits of the block easting, e.g., 44.</item>
            <item><i>northing</i> the leading digits of the block easting, e.g., 88.</item>
            </list>
            </returns>
            <remarks>
            Only the most rudimentary checking of MGRS grid ref is done: it is
            expected to consist of 0-2 digits followed by 1 or 3 letters, followed
            (in the case of 3 letters) by an even number (possibly 0) of digits.  In
            reporting errors, the letters I and O (illegal in MSRS) are regarded as
            non-alphabetic.  The returned <i>gridzone</i> will always be non-empty.  The
            other output arguments may be empty strings.
            <para>
            If the first 3 characters of <paramref name="mgrs"/> are "INV", then <i>gridzone</i> is set
            to those 3 characters and the other return arguments are set to empty
            strings.
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.Geocodes.MGRS.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius of the WGS84 ellipsoid (meters).
            </summary>
            <remarks>
            (The WGS84 value is returned because the UTM and UPS projections are based on this ellipsoid.)
            </remarks>
        </member>
        <member name="P:GeographicLib.Geocodes.MGRS.Flattening">
            <summary>
            Gets a value representing the flattening of the WGS84 ellipsoid.
            </summary>
            <remarks>
            (The WGS84 value is returned because the UTM and UPS projections are based on this ellipsoid.)
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.MGRS.Check">
            <summary>
            Perform some checks on the <see cref="T:GeographicLib.UTMUPS"/> coordinates on this ellipsoid.
            Throw an error if any of the assumptions made in the <see cref="T:GeographicLib.Geocodes.MGRS"/> class is not true.
            This check needs to be carried out if the ellipsoid parameters (or the UTM/UPS scales) are ever changed.
            </summary>
        </member>
        <member name="T:GeographicLib.Geocodes.OSGB">
            <summary>
            Ordnance Survey grid system for Great Britain.
            </summary>
            <remarks>
            The class implements the coordinate system used by the Ordnance Survey for maps of Great Britain and conversions to the grid reference system.
            <para>
            <list type="bullet">
            <item><a href="https://www.ordnancesurvey.co.uk/documents/resources/guide-coordinate-systems-great-britain.pdf">
            A guide to coordinate systems in Great Britain</a></item>
            <item><a href="https://www.ordnancesurvey.co.uk/documents/resources/guide-to-nationalgrid.pdf">Using the National Grid</a></item>
            </list>
            </para>
            <para>
            WARNING:
            </para>
            <para>
            The latitudes and longitudes for the Ordnance Survey grid system do not use the WGS84 datum.
            Do not use the values returned by this class in the <see cref="T:GeographicLib.UTMUPS"/>, <see cref="T:GeographicLib.Geocodes.MGRS"/>, or <see cref="T:GeographicLib.Geoid"/> classes
            without first converting the datum (and vice versa).
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.OSGB.Forward(System.Double,System.Double)">
            <summary>
            Forward without returning the convergence and scale.
            </summary>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Geocodes.OSGB.Forward(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Forward projection, from geographic to <see cref="T:GeographicLib.Geocodes.OSGB"/> coordinates.
            </summary>
            <param name="lat"></param>
            <param name="lon"></param>
            <param name="gamma"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Geocodes.OSGB.Reverse(System.Double,System.Double)">
            <summary>
            Reverse without returning the convergence and scale.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Geocodes.OSGB.Reverse(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Reverse projection, from <see cref="T:GeographicLib.Geocodes.OSGB"/> coordinates to geographic.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="gamma"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Geocodes.OSGB.ToGridReference(System.Double,System.Double,System.Int32)">
            <summary>
            Convert <see cref="T:GeographicLib.Geocodes.OSGB"/> grid reference to coordinates.
            </summary>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="prec">precision relative to 100 km.</param>
            <returns>National Grid reference string.</returns>
            <remarks>
            <i>prec</i> specifies the precision of the grid reference string as follows:
            <list type="bullet">
            <item><i>prec</i> = 0 (min), 100km</item>
            <item><i>prec</i> = 1, 10km</item>
            <item><i>prec</i> = 2, 1km</item>
            <item><i>prec</i> = 3, 100m</item>
            <item><i>prec</i> = 4, 10m</item>
            <item><i>prec</i> = 5, 1m</item>
            <item><i>prec</i> = 6, 0.1m</item>
            <item><i>prec</i> = 11 (max), 1μm</item>
            </list>
            <para>
            The easting must be in the range [−1000 km, 1500 km) and the northing must be in the range [−500 km, 2000 km).
            These bounds are consistent with rules for the letter designations for the grid system.
            </para>
            <para>
            If <i>x</i> or <i>y</i> is <see cref="F:System.Double.NaN"/>, the returned grid reference is "INVALID".
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geocodes.OSGB.FromGridReference(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Convert grid reference to a <see cref="T:GeographicLib.Geocodes.OSGB"/> coordinate.
            </summary>
            <param name="gridref">National Grid reference.</param>
            <param name="centerp">if <see langword="true"/> (default), return center of the grid square, else return SW (lower left) corner.</param>
            <returns>
            <i>x</i>, easting of point (meters), <i>y</i>, northing of point (meters) and <i>prec</i>, precision relative to 100 km.
            </returns>
        </member>
        <member name="P:GeographicLib.Geocodes.OSGB.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius of the Airy 1830 ellipsoid (meters).
            </summary>
            <remarks>
            This is <c>20923713</c> ft converted to meters using the rule <c>1</c> ft = <c>10^(9.48401603−10)</c> m.
            The Airy 1830 value is returned because the <see cref="T:GeographicLib.Geocodes.OSGB"/> projection is based on this ellipsoid.
            The conversion factor from feet to meters is the one used for the 1936 retriangulation of Britain;
            see Section A.1 (footnote 10 on p. 44) of <i>A guide to coordinate systems in Great Britain</i>, v3.6 (2020).
            </remarks>
        </member>
        <member name="P:GeographicLib.Geocodes.OSGB.Flattenting">
            <summary>
            Gets a value representing the inverse flattening of the Airy 1830 ellipsoid.
            </summary>
            <remarks>
            For the Airy 1830 ellipsoid, <i>a</i> = <c>20923713</c> ft and <i>b</i> = <c>20853810</c> ft;
            thus the flattening = <c>(20923713 − 20853810)/20923713</c> = <c>7767/2324857</c> = <c>1/299.32496459...</c>
            (The Airy 1830 value is returned because the <see cref="T:GeographicLib.Geocodes.OSGB"/> projection is based on this ellipsoid.)
            </remarks>
        </member>
        <member name="P:GeographicLib.Geocodes.OSGB.CentralScale">
            <summary>
            Gets a value representing the central scale for the <see cref="T:GeographicLib.Geocodes.OSGB"/> projection (<c>0.9996012717...</c>).
            </summary>
            <remarks>
            C. J. Mugnier, Grids &amp; Datums, PE&amp;RS, Oct. 2003, states that this is defined as <c>10^(9.9998268−10)</c>.
            </remarks>
        </member>
        <member name="P:GeographicLib.Geocodes.OSGB.OriginLatitude">
            <summary>
            Gets value representing latitude of the origin for the <see cref="T:GeographicLib.Geocodes.OSGB"/> projection (<c>49</c> degrees).
            </summary>
        </member>
        <member name="P:GeographicLib.Geocodes.OSGB.OriginLongitude">
            <summary>
            Gets value representing longitude of the origin for the <see cref="T:GeographicLib.Geocodes.OSGB"/> projection (<c>-2</c> degrees).
            </summary>
        </member>
        <member name="P:GeographicLib.Geocodes.OSGB.FalseNorthing">
            <summary>
            Gets value representing false northing of the <see cref="T:GeographicLib.Geocodes.OSGB"/> projection (<c>-100000</c> meters).
            </summary>
        </member>
        <member name="P:GeographicLib.Geocodes.OSGB.FalseEasting">
            <summary>
            Gets value representing false easting of the <see cref="T:GeographicLib.Geocodes.OSGB"/> projection (<c>400000</c> meters).
            </summary>
        </member>
        <member name="T:GeographicLib.GeoCoords">
            <summary>
            Provide conversion between geographic coordinates.
            </summary>
            <remarks>
            This class stores a geographic position which may be set via the constructors or <see cref="M:GeographicLib.GeoCoords.Reset(System.Double,System.Double,System.Int32)"/> via
            <list type="bullet">
            <item>latitude and longitude</item>
            <item>UTM or UPS coordinates</item>
            <item>a string representation of these or an <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate string</item>
            </list>
            The state consists of the latitude and longitude and the supplied UTM or UPS coordinates (possibly derived from the <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinates).
            If latitude and longitude were given then the UTM/UPS coordinates follows the standard conventions.
            <para>
            The mutable state consists of the UTM or UPS coordinates for a alternate zone.
            A property <see cref="P:GeographicLib.GeoCoords.AltZone"/> is provided to set the alternate UPS/UTM zone.
            </para>
            <para>
            Methods are provided to return the geographic coordinates, the input UTM or UPS coordinates (and associated meridian convergence and scale),
            or alternate UTM or UPS coordinates (and their associated meridian convergence and scale).
            </para>
            <para>
            Once the input string has been parsed, you can print the result out in any of the formats, decimal degrees, degrees minutes seconds,
            <see cref="T:GeographicLib.Geocodes.MGRS"/>, UTM/UPS.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.GeoCoords.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.GeoCoords"/> instance from a string.
            </summary>
            <param name="s">1-element, 2-element, or 3-element string representation of the position.</param>
            <param name="centerp">governs the interpretation of <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinates (see below).</param>
            <param name="longfirst">governs the interpretation of geographic coordinates (see below).</param>
            <remarks>
            Parse as a string and interpret it as a geographic position.
            The input string is broken into space (or comma) separated pieces and Basic decision on which format is based on number of components
            <list type="number">
            <item>"Lat Long" or "Long Lat"</item>
            <item><see cref="T:GeographicLib.Geocodes.MGRS"/></item>
            <item>"Zone Easting Northing" or "Easting Northing Zone"</item>
            </list>
            The following inputs are approximately the same (Ar Ramadi Bridge, Iraq)
            <list type="bullet">
            <item>
            Latitude and Longitude
            <code>
            33.44 43.27, N33d26.4' E43d16.2', 43d16'12"E 33d26'24"N, 43:16:12E 33:26:24
            </code>
            </item>
            <item>
            <see cref="T:GeographicLib.Geocodes.MGRS"/>
            <code>
            38SLC30, 38SLC391014, 38SLC3918701405, 37SHT9708
            </code>
            </item>
            <item>
            UTM
            <code>
            38n 339188 3701405, 897039 3708229 37n
            </code>
            </item>
            </list>
            <b>Latitude and Longitude parsing</b>:
            Latitude precedes longitude, unless a N, S, E, W hemisphere designator is used on one or both coordinates.
            If <paramref name="longfirst"/> = <see langword="true"/> (default is <see langword="false"/>),
            then longitude precedes latitude in the absence of a hemisphere designator.
            Thus (with <paramref name="longfirst"/> = <see langword="false"/>)
            <code>
            40 -75, N40 W75, -75 N40, 75W 40N, E-75 -40S
            </code>
            are all the same position. The coordinates may be given in decimal degrees, degrees and decimal minutes,
            degrees, minutes, seconds, etc. Use d, ', and " to mark off the degrees, minutes and seconds.
            Various alternative symbols for degrees, minutes, and seconds are allowed.
            Alternatively, use : to separate these components. A single addition or subtraction is allowed.
            (See <see cref="M:GeographicLib.DMS.Decode(System.String)"/> for details.) Thus
            <code>
            40d30'30", 40d30'30, 40°30'30, 40d30.5', 40d30.5, 40:30:30, 40:30.5, 40.508333333, 40:30+0:0:30, 40:31-0:0.5
            </code>
            all specify the same angle.The leading sign applies to the following components so -1d30 is -(1+30/60) = −1.5.
            However, note that -1:30-0:0:15 is parsed as (-1:30) + (-0:0:15) = −(1+30/60) − (15/3600).
            Latitudes must be in the range[−90°, 90°]. Internally longitudes are reduced to the range[−180°, 180°].
            <para>
            <b>UTM/UPS parsing</b>: For UTM zones (−80° ≤ Lat &lt; 84°),
            the zone designator is made up of a zone number (for 1 to 60) and a hemisphere letter (n or s),
            e.g., 38n (38north can also be used).
            The latitude band designer ([C–M] in the southern hemisphere and [N–X] in the northern) should NOT be used.
            (This is part of the <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate.)
            The zone designator for the poles (where UPS is employed) is a hemisphere letter by itself,
            i.e., n or s (north or south can also be used).
            </para>
            <para>
            <b>MGRS parsing</b> interprets the grid references as square area at the specified precision
            (1m, 10m, 100m, etc.). If <paramref name="centerp"/> = <see langword="true"/> (the default),
            the center of this square is then taken to be the precise position; thus:
            <list type="bullet">
            <item><c>38SMB = 38n 450000 3650000</c></item>
            <item><c>38SMB4484 = 38n 444500 3684500</c></item>
            <item><c>38SMB44148470 = 38n 444145 3684705</c></item>
            </list>
            Otherwise, the "south-west" corner of the square is used, i.e.,
            <list type="bullet">
            <item><c>38SMB = 38n 400000 3600000</c></item>
            <item><c>38SMB4484 = 38n 444000 3684000</c></item>
            <item><c>38SMB44148470 = 38n 444140 3684700</c></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.GeoCoords.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.GeoCoords"/> instance from geographic coordinates.
            </summary>
            <param name="latitude">latitude in degrees.</param>
            <param name="longitude">longitude in degrees.</param>
            <param name="zone">
            if specified, force the UTM/UPS representation to use a specified zone using the rules given in <see cref="T:GeographicLib.ZoneSpec"/>.
            </param>
        </member>
        <member name="M:GeographicLib.GeoCoords.#ctor(System.Int32,System.Boolean,System.Double,System.Double)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.GeoCoords"/> instance from UTM/UPS coordinates.
            </summary>
            <param name="zone">UTM zone (zero means UPS).</param>
            <param name="northp">hemisphere (<see langword="true"/> means north, <see langword="false"/> means south).</param>
            <param name="easting">easting in meters.</param>
            <param name="northing">northing in meters.</param>
        </member>
        <member name="P:GeographicLib.GeoCoords.Latitude">
            <summary>
            Gets a value representing latitude of the coordinate in degrees.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.Longitude">
            <summary>
            Gets a value representing longitude of the coordinate in degrees.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.Easting">
            <summary>
            Gets a value representing easting of the coordinate in meters.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.Northing">
            <summary>
            Gets a value representing northing of the coordinate in meters.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.Convergence">
            <summary>
            Gets a value representing meridian convergence (degrees) for the UTM/UPS projection.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.Scale">
            <summary>
            Gets a value representing scale for the UTM/UPS projection.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.IsNorthHemisphere">
            <summary>
            Gets a value representing whether current coordinate is in north hemiphere.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.Hemisphere">
            <summary>
            Gets the hemisphere letter <c>n</c> or <c>s</c>.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.Zone">
            <summary>
            Gets a value representing the zone corresponding to the input (return 0 for UPS).
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.AltZone">
            <summary>
            Gets a value representing current alternate zone (return 0 for UPS).
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.AltEasting">
            <summary>
            Gets a value representing easting (meters) for alternate zone.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.AltNorthing">
            <summary>
            Gets a value representing northing (meters) for alternate zone.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.AltConvergence">
            <summary>
            Gets a value representing meridian convergence (degrees) for alternate zone.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.AltScale">
            <summary>
            Gets a value representing scale for alternate zone.
            </summary>
        </member>
        <member name="P:GeographicLib.GeoCoords.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeoCoords.Flattening">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeoCoords.Reset(System.Double,System.Double,System.Int32)">
            <summary>
            Reset the location in terms of geographic coordinates. See <see cref="M:GeographicLib.GeoCoords.#ctor(System.Double,System.Double,System.Int32)"/>.
            </summary>
            <param name="latitude">latitude in degrees.</param>
            <param name="longitude">longitude in degrees.</param>
            <param name="zone">
            if specified, force the UTM/UPS representation to use a specified zone using the rules given in <see cref="T:GeographicLib.ZoneSpec"/>.
            </param>
        </member>
        <member name="M:GeographicLib.GeoCoords.Reset(System.Int32,System.Boolean,System.Double,System.Double)">
            <summary>
            Reset the location in terms of UPS/UPS coordinates. See <see cref="M:GeographicLib.GeoCoords.#ctor(System.Int32,System.Boolean,System.Double,System.Double)"/>.
            </summary>
            <param name="zone">UTM zone (zero means UPS).</param>
            <param name="northp">hemisphere (<see langword="true"/> means north, <see langword="false"/> means south).</param>
            <param name="easting">easting in meters.</param>
            <param name="northing">northing in meters.</param>
        </member>
        <member name="M:GeographicLib.GeoCoords.Reset(System.String,System.Boolean,System.Boolean)">
            <summary>
            Reset the location from a string. See <see cref="M:GeographicLib.GeoCoords.#ctor(System.String,System.Boolean,System.Boolean)"/>.
            </summary>
            <param name="s">1-element, 2-element, or 3-element string representation of the position.</param>
            <param name="centerp">governs the interpretation of <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinates.</param>
            <param name="longfirst">governs the interpretation of geographic coordinates.</param>
        </member>
        <member name="M:GeographicLib.GeoCoords.SetAltZone(System.Int32)">
            <summary>
            Specify alternate zone number.
            </summary>
            <param name="zone">zone number for the alternate representation.</param>
            <remarks>
            See <see cref="T:GeographicLib.ZoneSpec"/> for more information on the interpretation of zone.
            Note that <paramref name="zone"/> == <see cref="F:GeographicLib.ZoneSpec.Standard"/> (the default) use the standard UPS or UTM zone,
            <see cref="F:GeographicLib.ZoneSpec.Match"/> does nothing retaining the existing alternate representation.
            Before this is called the alternate zone is the input zone.
            </remarks>
        </member>
        <member name="M:GeographicLib.GeoCoords.ToGeoString(System.Int32,System.Boolean)">
            <summary>
            String representation with latitude and longitude as signed decimal degrees.
            </summary>
            <param name="prec">precision (relative to about 1m).</param>
            <param name="longfirst">if <see langword="true"/> give longitude first (default = <see langword="false"/>)</param>
            <returns>decimal latitude/longitude string representation.</returns>
            <remarks>
            Precision specifies accuracy of representation as follows:
            <list type="bullet">
            <item><paramref name="prec"/> = −5 (min), 1°</item>
            <item><paramref name="prec"/> = 0, 10^−5° (about 1m)</item>
            <item><paramref name="prec"/> = 3, 10^−8°</item>
            <item><paramref name="prec"/> = 9 (max), 10^−14°</item>
            </list>
            </remarks>
        </member>
        <member name="M:GeographicLib.GeoCoords.ToDMSString(System.Int32,System.Boolean,System.Char)">
            <summary>
            String representation with latitude and longitude as degrees, minutes, seconds, and hemisphere.
            </summary>
            <param name="prec">precision (relative to about 1m)</param>
            <param name="longfirst">if <see langword="true"/> give longitude first (default = <see langword="false"/>)</param>
            <param name="dmssep">if not <c>0</c>, use as the <see cref="T:GeographicLib.DMS"/> separator character (instead of d, ', " delimiters).</param>
            <returns><see cref="T:GeographicLib.DMS"/> latitude/longitude string representation.</returns>
            <remarks>
            Precision specifies accuracy of representation as follows:
            <list type="bullet">
            <item><paramref name="prec"/> = −5 (min), 1°</item>
            <item><paramref name="prec"/> = −4, 0.1°</item>
            <item><paramref name="prec"/> = −3, 1'</item>
            <item><paramref name="prec"/> = −2, 0.1'</item>
            <item><paramref name="prec"/> = −1, 1"</item>
            <item><paramref name="prec"/> = 0, 0.1" (about 3m)</item>
            <item><paramref name="prec"/> = 1, 0.01"</item>
            <item><paramref name="prec"/> = 10 (max), 10−11"</item>
            </list>
            </remarks>
        </member>
        <member name="M:GeographicLib.GeoCoords.ToMGRSString(System.Int32)">
            <summary>
            Gets <see cref="T:GeographicLib.Geocodes.MGRS"/> string of the coordinate.
            </summary>
            <param name="prec">precision (relative to about 1m).</param>
            <returns>A <see cref="T:GeographicLib.Geocodes.MGRS"/> string.</returns>
            <remarks>
            This gives the coordinates of the enclosing grid square with size given by the precision.
            Thus <c>38n 444180 3684790</c> converted to a <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate at precision −2 (100m) is
            <c>38SMB441847</c> and not <c>38SMB442848</c>. <paramref name="prec"/> specifies the precision of
            the <see cref="T:GeographicLib.Geocodes.MGRS"/> string as follows:
            <list type="bullet">
            <item><paramref name="prec"/> = −6 (min), only the grid zone is returned, e.g., <c>38S</c></item>
            <item><paramref name="prec"/> = −5, 100km, e.g., <c>38SMB</c></item>
            <item><paramref name="prec"/> = −4, 10km</item>
            <item><paramref name="prec"/> = −3, 1km</item>
            <item><paramref name="prec"/> = −2, 100m</item>
            <item><paramref name="prec"/> = −1, 10m</item>
            <item><paramref name="prec"/> = 0, 1m</item>
            <item><paramref name="prec"/> = 1, 0.1m</item>
            <item><paramref name="prec"/> = 6 (max), 1μm</item>
            </list>
            </remarks>
        </member>
        <member name="M:GeographicLib.GeoCoords.ToUTMUPSString(System.Int32,System.Boolean)">
            <summary>
            Gets UTM/UPS string of the coordinate.
            </summary>
            <param name="prec">precision (relative to about 1m).</param>
            <param name="abbrev">if <see langword="true"/> (the default) use abbreviated (<c>n</c>/<c>s</c>) notation for hemisphere;
            otherwise spell out the hemisphere (<c>north</c>/<c>south</c>).</param>
            <returns>UTM/UPS string representation: zone designator, easting, and northing.</returns>
            <remarks>
            Precision specifies accuracy of representation as follows:
            <list type="bullet">
            <item><paramref name="prec"/> = −5, 100km</item>
            <item><paramref name="prec"/> = −3, 1km</item>
            <item><paramref name="prec"/> = 0, 1m</item>
            <item><paramref name="prec"/> = 3, 1mm</item>
            <item><paramref name="prec"/> = 6, 1μm</item>
            <item><paramref name="prec"/> = 9 (max), 1nm</item>
            </list>
            </remarks>
        </member>
        <member name="M:GeographicLib.GeoCoords.ToUTMUPSString(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Gets UTM/UPS string with hemisphere override.
            </summary>
            <param name="northp">hemisphere override</param>
            <param name="prec">precision (relative to about 1m)</param>
            <param name="abbrev">if <see langword="true"/> (the default) use abbreviated (<c>n</c>/<c>s</c>) notation for hemisphere;
            otherwise spell out the hemisphere (<c>north</c>/<c>south</c>).</param>
            <returns>UTM/UPS string representation: zone designator, easting, and northing.</returns>
        </member>
        <member name="M:GeographicLib.GeoCoords.ToAltMGRSString(System.Int32)">
            <summary>
            Gets <see cref="T:GeographicLib.Geocodes.MGRS"/> string for the alternate zone. See <see cref="M:GeographicLib.GeoCoords.ToMGRSString(System.Int32)"/>.
            </summary>
            <param name="prec">precision (relative to about 1m).</param>
            <returns>A <see cref="T:GeographicLib.Geocodes.MGRS"/> string.</returns>
        </member>
        <member name="M:GeographicLib.GeoCoords.ToAltUTMUPSString(System.Int32,System.Boolean)">
            <summary>
            Gets UTM/UPS string for the alternate zone. See <see cref="M:GeographicLib.GeoCoords.ToUTMUPSString(System.Int32,System.Boolean)"/>.
            </summary>
            <param name="prec">precision (relative to about 1m).</param>
            <param name="abbrev">if <see langword="true"/> (the default) use abbreviated (<c>n</c>/<c>s</c>) notation for hemisphere;
            otherwise spell out the hemisphere (<c>north</c>/<c>south</c>).</param>
            <returns>UTM/UPS string representation: zone designator, easting, and northing.</returns>
        </member>
        <member name="M:GeographicLib.GeoCoords.ToAltUTMUPSString(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            UTM/UPS string for the alternate zone, with hemisphere override.
            </summary>
            <param name="northp">hemisphere override</param>
            <param name="prec">precision (relative to about 1m)</param>
            <param name="abbrev">if <see langword="true"/> (the default) use abbreviated (<c>n</c>/<c>s</c>) notation for hemisphere;
            otherwise spell out the hemisphere (<c>north</c>/<c>south</c>).</param>
            <returns>UTM/UPS string representation: zone designator, easting, and northing.</returns>
        </member>
        <member name="T:GeographicLib.Geodesic">
            <summary>
            Implements geodesic calculations.
            </summary>
            <remarks>
            The shortest path between two points on an ellipsoid at (<i>lat1</i>, <i>lon1</i>)
            and (<i>lat2</i>, <i>lon2</i>) is called the geodesic.Its length is <i>s12</i> and
            the geodesic from point 1 to point 2 has azimuths <i>azi1</i> and <i>azi2</i> at
            the two end points.  (The azimuth is the heading measured clockwise from
            north.  <i>azi2</i> is the "forward" azimuth, i.e., the heading that takes you
            beyond point 2 not back to point 1.)
            <para>
            Given <i>lat1</i>, <i>lon1</i>, <i>azi1</i>, and <i>s12</i>, we can determine <i>lat2</i>,
            <i>lon2</i>, and <i>azi2</i>.This is the <b>direct</b> geodesic problem and its
            solution is given by the function <see cref="M:GeographicLib.IGeodesic.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>.  (If <i>s12</i> is
            sufficiently large that the geodesic wraps more than halfway around the
            earth, there will be another geodesic between the points with a smaller <i>s12</i>.)
            </para>
            <para>
            Given <i>lat1</i>, <i>lon1</i>, <i>lat2</i>, and <i>lon2</i>, we can determine <i>azi1</i>,
            <i>azi2</i>, and <i>s12</i>.This is the <b>inverse</b> geodesic problem, whose solution
            is given by <see cref="M:GeographicLib.IGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@)"/>. Usually, the solution to the inverse
            problem is unique.In cases where there are multiple solutions (all with
            the same <i>s12</i>, of course), all the solutions can be easily generated
            once a particular solution is provided.
            </para>
            <para>
            The standard way of specifying the direct problem is the specify the
            distance <i>s12</i> to the second point.However it is sometimes useful
            instead to specify the arc length <i>a12</i> (in degrees) on the auxiliary
            sphere.This is a mathematical construct used in solving the geodesic
            problems.  The solution of the direct problem in this form is provided by
            <see cref="M:GeographicLib.IGeodesic.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)"/>. An arc length in excess of 180° indicates that
            the geodesic is not a shortest path.In addition, the arc length between
            an equatorial crossing and the next extremum of latitude for a geodesic is
            90°.
            </para>
            <para>This class can also calculate several other quantities related to geodesics. These are:
            <list type="bullet">
            <item>
            <i>reduced length</i>. If we fix the first point and increase <i>azi1</i> by <i>dazi1</i> (radians), 
            the second point is displaced <i>m12</i> <i>dazi1</i> in the direction <i>azi2</i> + 90°. 
            The quantity <i>m12</i> is called the "reduced length" and is symmetric under interchange of the two points.
            On a curved surface the reduced length obeys a symmetry relation, <i>m12</i> + <i>m21</i> = 0. 
            On a flat surface, we have <i>m12</i> = <i>s12</i>. The ratio <i>s12</i>/<i>m12</i> gives the azimuthal scale 
            for an azimuthal equidistant projection.
            </item>
            <item>
            <i>geodesic scale</i>. Consider a reference geodesic and a second geodesic parallel to this one at point 1 
            and separated by a small distance <i>dt</i>. The separation of the two geodesics at point 2 is <i>M12</i> <i>dt</i>
            where <i>M12</i> is called the "geodesic scale". <i>M21</i> is defined similarly (with the geodesics being parallel at point 2).
            On a flat surface, we have <i>M12</i> = <i>M21</i> = 1. The quantity 1/<i>M12</i> gives the scale of the Cassini-Soldner projection.
            </item>
            <item>
            <i>area</i>. The area between the geodesic from point 1 to point 2 and the equation is represented by <i>S12</i>;
            it is the area, measured counter-clockwise, of the geodesic quadrilateral with corners (<i>lat1</i>, <i>lon1</i>), 
            (0,<i>lon1</i>), (0,<i>lon2</i>), and (<i>lat2</i>, <i>lon2</i>). It can be used to compute the area of any geodesic polygon.
            </item>
            </list>
            </para>
            <para>
            Overloaded versions of <see cref="M:GeographicLib.IGeodesic.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>,
            <see cref="M:GeographicLib.IGeodesic.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)"/>,
            and <see cref="M:GeographicLib.IGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@)"/> allow these quantities to be returned.
            In addition there are general functions <see cref="M:GeographicLib.Geodesic.GenDirect(System.Double,System.Double,System.Double,System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>, 
            and <see cref="M:GeographicLib.Geodesic.GenInverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/> which allow an arbitrary set of results
            to be computed. The quantities <i>m12</i>, <i>M12</i>, <i>M21</i> which all specify the behavior of nearby geodesics obey addition rules.
            If points 1, 2, and 3 all lie on a single geodesic, then the following rules hold:
            <list type="bullet">
            <item><i>s13</i> = <i>s12</i> + <i>s23</i></item>
            <item><i>a13</i> = <i>a12</i> + <i>a23</i></item>
            <item><i>S13</i> = <i>S12</i> + <i>S23</i></item>
            <item><i>m13</i> = <i>m12</i> <i>M23</i> + <i>m23</i> <i>M21</i></item>
            <item><i>M13</i> = <i>M12</i> <i>M23</i> − (1 − <i>M12</i> <i>M2</i>1) <i>m23</i> / <i>m12</i></item>
            <item><i>M31</i> = <i>M32</i> <i>M21</i> − (1 − <i>M23</i> <i>M32</i>) <i>m12</i> / <i>m23</i></item>
            </list>
            </para>
            <para>
            Additional functionality is provided by the <see cref="T:GeographicLib.GeodesicLine"/> class, which allows a sequence of points along a geodesic to be computed.
            </para>
            <para>
            The shortest distance returned by the solution of the inverse problem is (obviously) uniquely defined. However, in a few special cases there are
            multiple azimuths which yield the same shortest distance. Here is a catalog of those cases:
            <list type="bullet">
            <item>
            <i>lat1</i> = <i>−lat2</i> (with neither point at a pole). If <i>azi1</i> = <i>azi2</i>, the geodesic is unique. 
            Otherwise there are two geodesics and the second one is obtained by setting 
            [<i>azi1</i>, <i>azi2</i>] → [<i>azi2</i>, <i>azi1</i>], [<i>M12</i>, <i>M21</i>] → [<i>M21</i>, <i>M12</i>], <i>S12</i> → −<i>S12</i>. 
            (This occurs when the longitude difference is near ±180° for oblate ellipsoids.)
            </item>
            <item>
            <i>lon2</i> = <i>lon1</i> ± 180° (with neither point at a pole). If <i>azi1</i> = 0° or ±180°, the geodesic is unique.
            Otherwise there are two geodesics and the second one is obtained by setting 
            [<i>azi1</i>, <i>azi2</i>] → [−<i>azi1</i>, −<i>azi2</i>], <i>S12</i> → −<i>S12</i>. 
            (This occurs when <i>lat2</i> is near −<i>lat1</i>  for prolate ellipsoids.)
            </item>
            <item>
            Points 1 and 2 at opposite poles. 
            There are infinitely many geodesics which can be generated by setting 
            [<i>azi1</i>, <i>azi2</i>] → [<i>azi1</i>, <i>azi2</i>] + [<i>d</i>, -<i>d</i>], for arbitrary <i>d</i>. 
            (For spheres, this prescription applies when points 1 and 2 are antipodal.)</item>
            <item>
            <i>s12</i> = 0 (coincident points). There are infinitely many geodesics which can be generated by setting
            [<i>azi1</i>, <i>azi2</i>] → [<i>azi1</i>, <i>azi2</i>] + [<i>d</i>, <i>d</i>], for arbitrary <i>d</i>.</item>
            </list>
            </para>
            <para>
            The calculations are accurate to better than 15 nm (15 nanometers) for the WGS84 ellipsoid.
            See Sec. 9 of <a href="https://arxiv.org/abs/1102.1215v1">arXiv:1102.1215v1</a> for details.
            With <i>exact</i> = <see langword="false"/> (the default) in the constructor,
            the algorithms used by this class are based on series expansions using the flattening f as a small parameter.
            These are only accurate for |<i>f</i>| &lt; 0.02; however reasonably accurate results will be obtained for |<i>f</i>| &lt; 0.2.
            Here is a table of the approximate maximum error (expressed as a distance) for an ellipsoid with the same equatorial 
            radius as the WGS84 ellipsoid and different values of the flattening.
            <list type="table">
            <listheader>
            |<i>f</i>| error
            </listheader>
            <item>0.01 25 nm</item>
            <item>0.02 30 nm</item>
            <item>0.05 10 um</item>
            <item>0.1 1.5 mm</item>
            <item>0.2 300 mm</item>
            </list>
            </para>
            <para>For very eccentric ellipsoids, set <i>exact</i> to <see langword="true"/> in the constructor;
            this will delegate the calculations to the <see cref="P:GeographicLib.Geodesic.GeodesicExact"/> class.</para>
            <para>The algorithms are described in
            <list type="bullet">
            <item>
            C. F. F. Karney, <a href="https://doi.org/10.1007/s00190-012-0578-z">Algorithms for geodesics</a>,
            J. Geodesy 87, 43–55 (2013); DOI: <a href="https://doi.org/10.1007/s00190-012-0578-z">10.1007/s00190-012-0578-z</a>; 
            addenda: <a href="https://geographiclib.sourceforge.io/geod-addenda.html">geod-addenda.html</a>.
            </item>
            </list>
            </para>
            <para>
            For more information on geodesics see <a href="https://geographiclib.sourceforge.io/html/geodesic.html">Geodesics on an ellipsoid of revolution</a>.
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.Geodesic.WGS84">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Geodesic"/> with the parameters for the WGS84 ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Geodesic.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.Geodesic.Flattening">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.Geodesic.EllipsoidArea">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.Geodesic.#ctor(System.Double,System.Double)">
            <summary>
            Constructor for an ellipsoid with equatorial radius and its flattening.
            </summary>
            <param name="a">equatorial radius (meters).</param>
            <param name="f">flattening of ellipsoid.  Setting <i>f</i> = 0 gives a sphere.</param>
        </member>
        <member name="M:GeographicLib.Geodesic.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor for an ellipsoid with equatorial radius and its flattening.
            </summary>
            <param name="a">equatorial radius (meters).</param>
            <param name="f">flattening of ellipsoid.  Setting <i>f</i> = 0 gives a sphere.</param>
            <param name="exact">
            If <see langword="true"/> use exact formulation in terms of elliptic
            integrals instead of series expansions (default <see langword="false"/>).
            </param>
            <exception cref="T:GeographicLib.GeographicException"></exception>
            <remarks>
            With <paramref name="exact"/> = <see langword="true"/>, this class delegates the calculations to the
            <see cref="P:GeographicLib.Geodesic.GeodesicExact"/> and <see cref="T:GeographicLib.GeodesicLineExact"/> classes which solve the geodesic
            problems in terms of elliptic integrals.
            </remarks>
        </member>
        <member name="M:GeographicLib.Geodesic.#ctor(GeographicLib.IEllipsoid)">
            <summary>
            Constructor for an ellipsoid with equatorial radius and its flattening copied from another <see cref="T:GeographicLib.IEllipsoid"/> object.
            </summary>
            <param name="ellipsoid">Source <see cref="T:GeographicLib.IEllipsoid"/> object.</param>
        </member>
        <member name="M:GeographicLib.Geodesic.#ctor(GeographicLib.IEllipsoid,System.Boolean)">
            <summary>
            Constructor for an ellipsoid with equatorial radius and its flattening copied from another <see cref="T:GeographicLib.IEllipsoid"/> object.
            </summary>
            <param name="ellipsoid">Source <see cref="T:GeographicLib.IEllipsoid"/> object.</param>
            <param name="exact">
            If <see langword="true"/> use exact formulation in terms of elliptic
            integrals instead of series expansions (default <see langword="false"/>).
            </param>
            <remarks>
            With <paramref name="exact"/> = <see langword="true"/>, this class delegates the calculations to the
            <see cref="P:GeographicLib.Geodesic.GeodesicExact"/> and <see cref="T:GeographicLib.GeodesicLineExact"/> classes which solve the geodesic
            problems in terms of elliptic integrals.
            </remarks>
        </member>
        <member name="M:GeographicLib.Geodesic.A1m1f(System.Double)">
            <summary>
            The scale factor A1-1 = mean value of (d/dsigma)I1 - 1
            </summary>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Geodesic.C1f(System.Double,System.Memory{System.Double})">
            <summary>
            The coefficients C1[l] in the Fourier expansion of B1
            </summary>
            <param name="eps"></param>
            <param name="c"></param>
        </member>
        <member name="M:GeographicLib.Geodesic.C1f(System.Double,System.Span{System.Double})">
            <summary>
            The coefficients C1[l] in the Fourier expansion of B1
            </summary>
            <param name="eps"></param>
            <param name="c"></param>
        </member>
        <member name="M:GeographicLib.Geodesic.A2m1f(System.Double)">
            <summary>
            The scale factor A2-1 = mean value of (d/dsigma)I2 - 1
            </summary>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Geodesic.C2f(System.Double,System.Memory{System.Double})">
            <summary>
            The coefficients C2[l] in the Fourier expansion of B2
            </summary>
            <param name="eps"></param>
            <param name="c"></param>
        </member>
        <member name="M:GeographicLib.Geodesic.A3coeff">
            <summary>
            The scale factor A3 = mean value of (d/dsigma)I3
            </summary>
        </member>
        <member name="M:GeographicLib.Geodesic.C3coeff">
            <summary>
            The coefficients C3[l] in the Fourier expansion of B3
            </summary>
        </member>
        <member name="M:GeographicLib.Geodesic.GenDirect(System.Double,System.Double,System.Double,System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.Geodesic.GenInverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.Geodesic.Line(System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.Geodesic.InverseLine(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.Geodesic.GenDirectLine(System.Double,System.Double,System.Double,System.Boolean,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.Geodesic.IsExact">
            <summary>
            Whether the exact formulation is used. This is the
            value used in the constructor.
            </summary>
        </member>
        <member name="T:GeographicLib.GeodesicBase">
            <summary>
            Base class of various geodesic implementations.
            </summary>
        </member>
        <member name="P:GeographicLib.GeodesicBase.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicBase.Flattening">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicBase.EllipsoidArea">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.GenDirect(System.Double,System.Double,System.Double,System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.GenDirectLine(System.Double,System.Double,System.Double,System.Boolean,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.GenInverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.InverseLine(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Line(System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.DirectLine(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.ArcDirectLine(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Direct(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.ArcDirect(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicBase.Inverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="T:GeographicLib.GeodesicExact">
            <summary>
            Exact geodesic calculations.
            </summary>
            <remarks>
            <para>
            The equations for geodesics on an ellipsoid can be expressed in terms of
            incomplete elliptic integrals.The Geodesic class expands these integrals
            in a series in the flattening <i>f</i> and this provides an accurate solution
            for <i>f</i> ∈ [-0.01, 0.01].  The GeodesicExact class computes the
            ellitpic integrals directly and so provides a solution which is valid for
            all <i>f</i>.However, in practice, its use should be limited to about
            <i>b</i>/<i>a</i> ∈ [0.01, 100] or <i>f</i> ∈ [-99, 0.99].
            </para>
            For the WGS84 ellipsoid, these classes are 2-3 times slower than the
            series solution and 2-3 times less accurate(because it's less easy
            to control round-off errors with the elliptic integral formulation); i.e.,
            the error is about 40 nm(40 nanometers) instead of 15 nm.However the
            error in the series solution scales as <i>f</i>^7 while the
            error in the elliptic integral solution depends weakly on <i>f</i>.If the
            quarter meridian distance is 10000 km and the ratio <i>b</i>/<i>a</i> = 1
            - <i>f</i> is varied then the approximate maximum error(expressed as a
            distance) is
            <code>
                  1 - f error(nm)
                  1/128     387
                  1/64      345
                  1/32      269
                  1/16      210
                  1/8       115
                  1/4        69
                  1/2        36
                    1        15
                    2        25
                    4        96
                    8       318
                   16       985
                   32      2352
                   64      6008
                  128     19024
            </code>
            The area in this classes is computing by finding an accurate approximation
            to the area integrand using a discrete sine transform fitting <i>N</i> equally
            spaced points in σ. <i>N</i> chosen to ensure full accuracy for
            <i>b</i>/<i>a</i> ∈ [0.01, 100] or <i>f</i> ∈ [-99, 0.99].
            <para>
            The algorithms are described in
            - C. F. F. Karney,
            <a href = "https://arxiv.org/abs/2208.00492" >
            Geodesics on an arbitrary ellipsoid of revolution</a>, Aug. 2022;
            preprint<a href="https://arxiv.org/abs/2208.00492">
            arxiv:2208.00492</a>.
            </para>
            <para>
            See <a href="https://geographiclib.sourceforge.io/C++/doc/geodesic.html#geodellip">
            Geodesics in terms of elliptic integrals</a>
            for the formulation.See the documentation on the
            <see cref="T:GeographicLib.Geodesic"/> class for additional information on the geodesic problems.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.GeodesicExact.#ctor(GeographicLib.IEllipsoid)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.GeodesicExact"/> instance with specified ellipoid.
            </summary>
            <param name="ellipsoid">Source <see cref="T:GeographicLib.IEllipsoid"/> object.</param>
        </member>
        <member name="M:GeographicLib.GeodesicExact.#ctor(System.Double,System.Double)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.GeodesicExact"/> instance with specified equatorial radius and flattening of the ellipsoid.
            </summary>
            <param name="a">equatorial radius (meters).</param>
            <param name="f">flattening of ellipsoid.  Setting <i>f</i> = 0 gives a sphere.</param>
        </member>
        <member name="P:GeographicLib.GeodesicExact.WGS84">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.GeodesicExact"/> with the parameters for the WGS84 ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.GeodesicExact.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicExact.Flattening">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicExact.EllipsoidArea">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicExact.GenInverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicExact.GenDirect(System.Double,System.Double,System.Double,System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicExact.GenDirectLine(System.Double,System.Double,System.Double,System.Boolean,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicExact.Line(System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicExact.InverseLine(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicExact.I4Integrand.asinhsqrt(System.Double)">
            <summary>
            return asinh(sqrt(x))/sqrt(x)
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.GeodesicExact.I4Integrand.t(System.Double)">
            <summary>
            This differs by from t as defined following Eq 61 in Karney (2013) by
            the final subtraction of 1.  This changes nothing since Eq 61 uses the
            difference of two evaluations of t and improves the accuracy(?).
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.GeodesicExact.I4Integrand.td(System.Double)">
            <summary>
            d t(x) / dx
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:GeographicLib.GeodesicFlags">
            <summary>
            Bit masks for what calculations to do.  These masks do double duty.
            They signify to the <see cref="T:GeographicLib.GeodesicLine"/> constructor and to
            <see cref="M:GeographicLib.Geodesic.Line(System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)"/> what capabilities should be included in the <see cref="T:GeographicLib.GeodesicLine"/>
            object.  They also specify which results to return in the general
            routines <see cref="M:GeographicLib.Geodesic.GenDirect(System.Double,System.Double,System.Double,System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/> and <see cref="M:GeographicLib.Geodesic.GenInverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/> routines.
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.None">
            <summary>
            No capabilities, no output.
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.Latitude">
            <summary>
            Calculate latitude <i>lat2</i>.  (It's not necessary to include this as a
            capability to <see cref="T:GeographicLib.GeodesicLine"/> or <see cref="T:GeographicLib.GeodesicLineExact"/> because this is included by default.)
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.Longitude">
            <summary>
            Calculate latitude <i>lon2</i>.
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.Azimuth">
            <summary>
            Calculate azimuths <i>azi1</i> and <i>azi2</i>.
            (It's not necessary to include this as a capability to <see cref="T:GeographicLib.GeodesicLine"/> or <see cref="T:GeographicLib.GeodesicLineExact"/>
            because this is included by default.)
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.Distance">
            <summary>
            Calculate distance <i>s12</i>.
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.Standard">
            <summary>
            A combination of the common capabilities:
            <see cref="F:GeographicLib.GeodesicFlags.Latitude"/>, <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>,
            <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> and <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.DistanceIn">
            <summary>
            Allow distance <i>s12</i> to be used as input in the direct geodesic problem.
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.ReducedLength">
            <summary>
            Calculate reduced length <i>m12</i>.
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.GeodesicScale">
            <summary>
            Calculate geodesic scales <i>M12</i> and <i>M21</i>.
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.Area">
            <summary>
            Calculate area <i>S12</i>.
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.LongUnroll">
            <summary>
            Unroll <i>lon2</i> in the direct calculation.
            </summary>
        </member>
        <member name="F:GeographicLib.GeodesicFlags.All">
            <summary>
            All capabilities, calculate everything.  (<see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> is not included in this mask.)
            </summary>
        </member>
        <member name="M:GeographicLib.GeodesicFlagsExtesions.HasAny(GeographicLib.GeodesicFlags,GeographicLib.GeodesicFlags)">
            <summary>
            Verifies whether <paramref name="src"/> and <paramref name="flags"/> has any common flag. 
            </summary>
            <param name="src"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.GeodesicFlagsExtesions.HasAny(GeographicLib.GeodesicFlags,GeographicLib.GeodesicCapability)">
            <summary>
            Verifies whether <paramref name="src"/> and <paramref name="caps"/> has any common flag. 
            </summary>
            <param name="src"></param>
            <param name="caps"></param>
            <returns></returns>
        </member>
        <member name="T:GeographicLib.GeodesicLine">
            <summary>
            Represents a geodesic line.
            </summary>
            <remarks>
            <para>
            <see cref="T:GeographicLib.GeodesicLine"/> facilitates the determination of a series of points on a single geodesic.
            The starting point (<i>lat1</i>, <i>lon1</i>) and the azimuth azi1 are specified in the constructor;
            alternatively, the <see cref="M:GeographicLib.Geodesic.Line(System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)"/> method can be used to create a <see cref="T:GeographicLib.GeodesicLine"/>.
            <see cref="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/> returns the location of point 2 a distance s12 along the geodesic.
            In addition, <see cref="M:GeographicLib.IGeodesicLine.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/> gives the position of point 2 an arc length <i>a12</i> along the geodesic.
            </para>
            <para>
            You can register the position of a reference point 3 a distance (arc length), <i>s13</i> (<i>a13</i>)
            along the geodesic with the <see cref="P:GeographicLib.GeodesicLine.Distance"/> (<see cref="P:GeographicLib.GeodesicLine.Arc"/>) functions.
            Points a fractional distance along the line can be found by providing, for example, 0.5 * <see cref="P:GeographicLib.GeodesicLine.Distance"/>
            as an argument to GeodesicLine.Position. The <see cref="M:GeographicLib.Geodesic.InverseLine(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)"/> or <see cref="M:GeographicLib.GeodesicBase.DirectLine(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)"/> methods return
            <see cref="T:GeographicLib.GeodesicLine"/> objects with point 3 set to the point 2 of the corresponding geodesic problem.
            <see cref="T:GeographicLib.GeodesicLine"/> objects created with the public constructor or with <see cref="M:GeographicLib.Geodesic.Line(System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)"/>
            have <i>s13</i> and <i>a13</i> set to <see cref="F:System.Double.NaN"/>.
            </para>
            <para>
            The default copy constructor and assignment operators work with this class. 
            Similarly, a vector can be used to hold <see cref="T:GeographicLib.GeodesicLine"/> objects.
            </para>
            <para>
            The calculations are accurate to better than 15 nm (15 nanometers).
            See Sec. 9 of <a href="https://arxiv.org/abs/1102.1215v1">arXiv:1102.1215v1</a> for details.
            With <i>exact</i> = <see langword="false"/> (the default) in the constructor for the
            <see cref="T:GeographicLib.Geodesic"/> object, the algorithms used by this class are based on series
            expansions using the flattening <i>f</i> as a small parameter.These are only
            accurate for |<i>f</i>| &lt; 0.02; however reasonably accurate results
            will be obtained for |<i>f</i>| &lt; 0.2.  For very eccentric ellipsoids,
            set <i>exact</i> = <see langword="true"/> in the constructor for the <see cref="T:GeographicLib.Geodesic"/> object; this will
            delegate the calculations to <see cref="T:GeographicLib.GeodesicLineExact"/>.
            </para>
            <para>
            The algorithms are described in
            <list type="bullet">
            <item>
            C. F. F. Karney, <a href="https://doi.org/10.1007/s00190-012-0578-z">Algorithms for geodesics</a>,
            J. Geodesy 87, 43–55 (2013); DOI: <a href="https://doi.org/10.1007/s00190-012-0578-z">10.1007/s00190-012-0578-z</a>; 
            addenda: <a href="https://geographiclib.sourceforge.io/geod-addenda.html">geod-addenda.html</a>.
            </item>
            </list>
            </para>
            <para>
            For more information on geodesics see <a href="https://geographiclib.sourceforge.io/html/geodesic.html">Geodesics on an ellipsoid of revolution</a>.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.GeodesicLine.#ctor(GeographicLib.Geodesic,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Constructor for a geodesic line staring at latitude <i>lat1</i>, longitude <i>lon1</i>, 
            and azimuth <i>azi1</i> (all in degrees).
            </summary>
            <param name="g">
            A <see cref="T:GeographicLib.Geodesic"/> object used to compute the necessary information about the <see cref="T:GeographicLib.GeodesicLine"/>.
            </param>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="caps">bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying the capabilities
            the <see cref="T:GeographicLib.GeodesicLine"/> object should possess, i.e., which quantities can be returned in calls to
            <see cref="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>.</param>
            <remarks>
            <i>lat1</i> should be in the range [−90°, 90°].
            <para>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for <i>caps</i> are
            <list type="bullet">
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <i>lat2</i>; this is added automatically;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the latitude <i>lon2</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the latitude <i>azi2</i>;this is added automatically;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <i>s12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/> for the reduced length <i>m12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/> for the geodesic scales <i>M12</i> and <i>M21</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <i>S12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.DistanceIn"/> 
            permits the length of the geodesic to be given in terms of <i>s12</i>;
            without this capability the length can only be specified in terms of arc length;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above.</item>
            </list>
            The default value of <i>caps</i> is <see cref="F:GeographicLib.GeodesicFlags.All"/>.
            </para>
            <para>
            If the point is at a pole, the azimuth is defined by keeping lon1 fixed,
            writing <i>lat1</i> = ±(90° − ε), and taking the limit ε → 0+.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.GeodesicLine.SetDistance(System.Boolean,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLine.GetDistance(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLine.GenPosition(System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.Latitude">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.Longitude">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.Azimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.SineAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.CosineAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.EquatorialAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.SineEquatorialAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.CosineEquatorialAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.EquatorialArc">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.Flattening">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.Capabilities">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.Distance">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLine.Arc">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLine.Priv.Init(GeographicLib.Geodesic,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Constructor for a geodesic line staring at latitude <i>lat1</i>, longitude <i>lon1</i>, 
            and azimuth <i>azi1</i> (all in degrees).
            </summary>
            <param name="g">
            A <see cref="T:GeographicLib.Geodesic"/> object used to compute the necessary information about the <see cref="T:GeographicLib.GeodesicLine"/>.
            </param>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="caps">bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying the capabilities
            the <see cref="T:GeographicLib.GeodesicLine"/> object should possess, i.e., which quantities can be returned in calls to
            <see cref="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>.</param>
            <remarks>
            <i>lat1</i> should be in the range [−90°, 90°].
            <para>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for <i>caps</i> are
            <list type="bullet">
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <i>lat2</i>; this is added automatically;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the latitude <i>lon2</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the latitude <i>azi2</i>;this is added automatically;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <i>s12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/> for the reduced length <i>m12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/> for the geodesic scales <i>M12</i> and <i>M21</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <i>S12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.DistanceIn"/> 
            permits the length of the geodesic to be given in terms of <i>s12</i>;
            without this capability the length can only be specified in terms of arc length;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above.</item>
            </list>
            The default value of <i>caps</i> is <see cref="F:GeographicLib.GeodesicFlags.All"/>.
            </para>
            <para>
            If the point is at a pole, the azimuth is defined by keeping lon1 fixed,
            writing <i>lat1</i> = ±(90° − ε), and taking the limit ε → 0+.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.GeodesicLine.Priv.GenPosition(System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:GeographicLib.GeodesicLineBase">
            <summary>
            Base class of various geodesic line implementations.
            </summary>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.Arc">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.Azimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.Capabilities">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.CosineAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.CosineEquatorialAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.Distance">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.EquatorialArc">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.EquatorialAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.Latitude">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.Longitude">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.SineAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.SineEquatorialAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineBase.Flattening">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.GenPosition(System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.GetDistance(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.SetDistance(System.Boolean,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.HasCapability(GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.ArcPosition(System.Double,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.Position(System.Double,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.Position(System.Double,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>      /// <returns><i>a12</i>, arc length from point 1 to point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.Position(System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineBase.ArcPosition(System.Double,GeographicLib.GeodesicFlags)">
            <inheritdoc/>
        </member>
        <member name="T:GeographicLib.GeodesicLineExact">
            <summary>
            Represent an exact geodesic line.
            </summary>
            <remarks>
            <see cref="T:GeographicLib.GeodesicLineExact"/> facilitates the determination of a series of points on a
            single geodesic.This is a companion to the <see cref="T:GeographicLib.GeodesicExact"/> class.  For
            additional information on this class see the documentation on the
            <see cref="T:GeographicLib.GeodesicLine"/> class.
            </remarks>
        </member>
        <member name="M:GeographicLib.GeodesicLineExact.#ctor(GeographicLib.GeodesicExact,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Constructor for a exact geodesic line staring at latitude <i>lat1</i>, longitude <i>lon1</i>, 
            and azimuth <i>azi1</i> (all in degrees).
            </summary>
            <param name="g">
            A <see cref="T:GeographicLib.GeodesicExact"/> object used to compute the necessary information about the <see cref="T:GeographicLib.GeodesicLineExact"/>.
            </param>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="caps">bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying the capabilities
            the <see cref="T:GeographicLib.GeodesicLineExact"/> object should possess, i.e., which quantities can be returned in calls to
            <see cref="M:GeographicLib.GeodesicLineBase.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>.</param>
            <remarks>
            <i>lat1</i> should be in the range [−90°, 90°].
            <para>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for <i>caps</i> are
            <list type="bullet">
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <i>lat2</i>; this is added automatically;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the latitude <i>lon2</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the latitude <i>azi2</i>;this is added automatically;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <i>s12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/> for the reduced length <i>m12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/> for the geodesic scales <i>M12</i> and <i>M21</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <i>S12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.DistanceIn"/> 
            permits the length of the geodesic to be given in terms of <i>s12</i>;
            without this capability the length can only be specified in terms of arc length;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above.</item>
            </list>
            The default value of <i>caps</i> is <see cref="F:GeographicLib.GeodesicFlags.All"/>.
            </para>
            <para>
            If the point is at a pole, the azimuth is defined by keeping lon1 fixed,
            writing <i>lat1</i> = ±(90° − ε), and taking the limit ε → 0+.
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.Distance">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.Arc">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.Azimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.Capabilities">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.CosineAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.CosineEquatorialAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.EquatorialArc">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.EquatorialAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.Latitude">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.Longitude">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.SineAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.SineEquatorialAzimuth">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GeodesicLineExact.Flattening">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineExact.GenPosition(System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineExact.GetDistance(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineExact.SetDistance(System.Boolean,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.GeodesicLineExact.Priv.Init(GeographicLib.GeodesicExact,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Constructor for a exact geodesic line staring at latitude <i>lat1</i>, longitude <i>lon1</i>, 
            and azimuth <i>azi1</i> (all in degrees).
            </summary>
            <param name="g">
            A <see cref="T:GeographicLib.GeodesicExact"/> object used to compute the necessary information about the <see cref="T:GeographicLib.GeodesicLineExact"/>.
            </param>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="caps">bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying the capabilities
            the <see cref="T:GeographicLib.GeodesicLineExact"/> object should possess, i.e., which quantities can be returned in calls to
            <see cref="M:GeographicLib.GeodesicLineBase.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>.</param>
            <remarks>
            <i>lat1</i> should be in the range [−90°, 90°].
            <para>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for <i>caps</i> are
            <list type="bullet">
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <i>lat2</i>; this is added automatically;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the latitude <i>lon2</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the latitude <i>azi2</i>;this is added automatically;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <i>s12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/> for the reduced length <i>m12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/> for the geodesic scales <i>M12</i> and <i>M21</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <i>S12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.DistanceIn"/> 
            permits the length of the geodesic to be given in terms of <i>s12</i>;
            without this capability the length can only be specified in terms of arc length;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above.</item>
            </list>
            The default value of <i>caps</i> is <see cref="F:GeographicLib.GeodesicFlags.All"/>.
            </para>
            <para>
            If the point is at a pole, the azimuth is defined by keeping lon1 fixed,
            writing <i>lat1</i> = ±(90° − ε), and taking the limit ε → 0+.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.GeodesicLineExact.Priv.GenPosition(System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:GeographicLib.GeodesicResult">
            <summary>
            Encapsulates the results of the geodesic problem solutions.
            </summary>
        </member>
        <member name="P:GeographicLib.GeodesicResult.Distance">
            <summary>
            Gets a value representing <i>s12</i>, the distance between point 1 and point 2, in meters.
            </summary>
        </member>
        <member name="P:GeographicLib.GeodesicResult.ReducedLength">
            <summary>
            Gets a value representing <i>m12</i>, reduced length of the geodesic, in meters.
            </summary>
        </member>
        <member name="P:GeographicLib.GeodesicResult.GeodesicScale12">
            <summary>
            Gets a value representing <i>M12</i>, the dimensionless geodesic scale of point 2 relative to point 1.
            </summary>
        </member>
        <member name="P:GeographicLib.GeodesicResult.GeodesicScale21">
            <summary>
            Gets a value representing <i>M21</i>, the dimensionless geodesic scale of point 1 relative to point 2.
            </summary>
        </member>
        <member name="P:GeographicLib.GeodesicResult.Area">
            <summary>
            Gets a value representing <i>S12</i>, the area under the geodesic in meters^2.
            </summary>
        </member>
        <member name="P:GeographicLib.GeodesicResult.ArcLength">
            <summary>
            Gets a value representing <i>a12</i>, the arc length of between point 1 and point 2, in degrees.
            </summary>
        </member>
        <member name="P:GeographicLib.GeodesicResult.Azimuth2">
            <summary>
            Gets a value representing <i>azi2</i>, the forward azimuth at point 2, in degrees.
            </summary>
        </member>
        <member name="T:GeographicLib.DirectGeodesicResult">
            <summary>
            Encapsulates the results of the direct geodesic problem solutions.
            </summary>
        </member>
        <member name="P:GeographicLib.DirectGeodesicResult.Latitude">
            <summary>
            Gets a value representing <i>lat2</i>, latitude of point 2, in degrees.
            </summary>
        </member>
        <member name="P:GeographicLib.DirectGeodesicResult.Longitude">
            <summary>
            Gets a value representing <i>lon2</i>, longitude of point 2, in degrees.
            </summary>
        </member>
        <member name="T:GeographicLib.InverseGeodesicResult">
            <summary>
            Encapsulates the results of the inverse geodesic problem solutions.
            </summary>
        </member>
        <member name="P:GeographicLib.InverseGeodesicResult.Azimuth1">
            <summary>
            Gets a value representing <i>azi1</i>, the forward azimuth at point 1, in degrees.
            </summary>
        </member>
        <member name="T:GeographicLib.GeographicException">
            <summary>
            Represents exception thrown by GeographicLib.
            </summary>
        </member>
        <member name="M:GeographicLib.GeographicException.#ctor(System.String)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.GeographicException"/> with specified error message.
            </summary>
            <param name="msg">Error message.</param>
        </member>
        <member name="T:GeographicLib.Geoid">
            <summary>
            Looking up the height of the geoid above the ellipsoid.
            </summary>
            <remarks>
            This class evaluates the height of one of the standard geoids, EGM84, EGM96, or EGM2008 by bilinear or cubic interpolation
            into a rectangular grid of data.These geoid models are documented in
            <list type="bullet">
            <item>
            EGM84: <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84#tab_egm84"></a>
            </item>
            <item>
            EGM96: <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84#tab_egm96"></a>
            </item>
            <item>
            EGM2008: <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84#tab_egm2008"></a>
            </item>
            </list>
            The geoids are defined in terms of spherical harmonics.
            However in order to provide a quick and flexible method of evaluating the geoid heights,
            this class evaluates the height by interpolation into a grid of precomputed values.
            <para>
            The height of the geoid above the ellipsoid, <i>N</i>, is sometimes called the geoid undulation.
            It can be used to convert a height above the ellipsoid, <i>h</i>, to the corresponding height above the geoid
            (the orthometric height, roughly the height above mean sea level), <i>H</i>, using the relations
            </para>
            <para>
            <i>h</i> = <i>N</i> + <i>H</i>;   <i>H</i> = −<i>N</i> + <i>h</i>.
            </para>
            <para>
            See <a href="https://geographiclib.sourceforge.io/html/geoid.html">Geoid height</a> for details of how to install the data sets, the data format, estimates of the interpolation errors, and how to use caching.
            </para>
            <para>
            This class is typically <i>not</i> thread safe in that a single instantiation cannot be safely used by multiple threads because of the way
            the object reads the data set and because it maintains a single-cell cache. If multiple threads need to calculate geoid heights they should
            all construct thread-local instantiations. Alternatively, set the optional threadsafe parameter to true in the constructor. This causes the
            constructor to read all the data into memory and to turn off the single-cell caching which results in a <see cref="T:GeographicLib.Geoid"/> object which is thread safe.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Geoid.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Construct a geoid from file.
            </summary>
            <param name="name">the name of the geoid.</param>
            <param name="path">directory for data file.</param>
            <param name="cubic">interpolation method; <see langword="false"/> means bilinear, <see langword="true"/> (the default) means cubic.</param>
            <param name="threadsafe">if <see langword="true"/>, construct a thread safe object. The default is <see langword="false"/></param>
            <remarks>
            The data file is formed by appending ".pgm" to the name.
            If <paramref name="path"/> is specified (and is non-empty), then the file is loaded from directory, path.
            Otherwise the path is given by <see cref="P:GeographicLib.Geoid.DefaultGeoidPath"/>.
            If the <paramref name="threadsafe"/> parameter is <see langword="true"/>, the data set is read into memory, the data file is closed,
            and single-cell caching is turned off; this results in a <see cref="T:GeographicLib.Geoid"/> object which is thread safe.
            </remarks>
        </member>
        <member name="M:GeographicLib.Geoid.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Construct a geoid from <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="inputStream">A <b>seekable</b> <see cref="T:System.IO.Stream"/> object containing geoid data.</param>
            <param name="cubic">interpolation method; <see langword="false"/> means bilinear, <see langword="true"/> (the default) means cubic.</param>
            <param name="threadsafe">if <see langword="true"/>, construct a thread safe object. The default is <see langword="false"/></param>
            <param name="leaveOpen"><see langword="true"/> to leave the stream open after the <see cref="T:GeographicLib.Geoid"/> object is disposed; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:GeographicLib.Geoid.#ctor(System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Construct a geoid from <see cref="T:System.Byte"/> array.
            </summary>
            <param name="buffer">A <see cref="T:System.Byte"/> array containing geoid data.</param>
            <param name="cubic">interpolation method; <see langword="false"/> means bilinear, <see langword="true"/> (the default) means cubic.</param>
            <param name="threadsafe">if <see langword="true"/>, construct a thread safe object. The default is <see langword="false"/></param>
        </member>
        <member name="M:GeographicLib.Geoid.CacheArea(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set up a cache.
            </summary>
            <param name="south">latitude (degrees) of the south edge of the cached area.</param>
            <param name="west">longitude (degrees) of the west edge of the cached area.</param>
            <param name="north">latitude (degrees) of the north edge of the cached area.</param>
            <param name="east">longitude (degrees) of the east edge of the cached area.</param>
            <remarks>
            Cache the data for the specified "rectangular" area bounded by the parallels <paramref name="south"/> and <paramref name="north"/>
            and the meridians <paramref name="west"/> and <paramref name="east"/>.
            <paramref name="east"/> is always interpreted as being east of <paramref name="west"/>,
            if necessary by adding 360° to its value. <paramref name="south"/> and <paramref name="north"/> should be in the range [−90°, 90°].
            </remarks>
        </member>
        <member name="M:GeographicLib.Geoid.CacheAll">
            <summary>
            Cache all the data.
            </summary>
            <remarks>
            On most computers, this is fast for data sets with grid resolution of 5' or coarser.
            For a 1' grid, the required RAM is 450MB; a 2.5' grid needs 72MB; and a 5' grid needs 18MB.
            </remarks>
        </member>
        <member name="M:GeographicLib.Geoid.CacheClear">
            <summary>
            Clear the cache. This never throws an error. (This does nothing with a thread safe <see cref="T:GeographicLib.Geoid"/>.)
            </summary>
        </member>
        <member name="M:GeographicLib.Geoid.Evaluate(System.Double,System.Double)">
            <summary>
            Compute the geoid height at a point.
            </summary>
            <param name="lat">latitude of the point (degrees).</param>
            <param name="lon">longitude of the point (degrees).</param>
            <returns>the height of the geoid above the ellipsoid (meters).</returns>
            <remarks>The latitude should be in [−90°, 90°].</remarks>
        </member>
        <member name="M:GeographicLib.Geoid.Evaluate(GeographicLib.GeoCoords)">
            <summary>
            Compute the geoid height at a point.
            </summary>
            <param name="coords">coordinate of the point.</param>
            <returns>the height of the geoid above the ellipsoid (meters).</returns>
        </member>
        <member name="M:GeographicLib.Geoid.ConvertHeight(System.Double,System.Double,System.Double,GeographicLib.ConvertFlag)">
            <summary>
            Convert a height above the geoid to a height above the ellipsoid and vice versa.
            </summary>
            <param name="lat">latitude of the point (degrees).</param>
            <param name="lon">longitude of the point (degrees).</param>
            <param name="h">height of the point (degrees).</param>
            <param name="d">a <see cref="T:GeographicLib.ConvertFlag"/> specifying the direction of the conversion;
            <see cref="F:GeographicLib.ConvertFlag.GeoidToEllipsoid"/> means convert a height above the geoid to a height above the ellipsoid;
            <see cref="F:GeographicLib.ConvertFlag.EllipsoidToGeoid"/> means convert a height above the ellipsoid to a height above the geoid.</param>
            <returns></returns>
        </member>
        <member name="P:GeographicLib.Geoid.Description">
            <summary>
            Gets a value representing decription of the geoid, if available, in the data file; if absent, return "NONE".
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.DateTime">
            <summary>
            Gets a value representing date of the geoid, if available, in the data file; if absent, return <see langword="null"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.GeoidName">
            <summary>
            Gets a value representing the name used to load the geoid data (from the first argument of the constructor).
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.GeoidFile">
            <summary>
            Gets a value representing the full file name used to load the geoid data.
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.GeoidDirectory">
            <summary>
            Gets a value representing the directory used to load the geoid data.
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.Interpolation">
            <summary>
            Gets a value representing the interpolation method of the geoid data ("cubic" or "bilinear").
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.MaxError">
            <summary>
            Gets a value representing estimate of the maximum interpolation and quantization error (meters).
            </summary>
            <remarks>
            This relies on the value being stored in the data file. If the value is absent, return −1.
            </remarks>
        </member>
        <member name="P:GeographicLib.Geoid.RMSError">
            <summary>
            Gets a value representing estimate of the RMS interpolation and quantization error (meters).
            </summary>
            <remarks>
            This relies on the value being stored in the data file. If the value is absent, return −1.
            </remarks>
        </member>
        <member name="P:GeographicLib.Geoid.Offset">
            <summary>
            Gets a value representing offset (meters) of the geoid data.
            </summary>
            <remarks>
            This in used in converting from the pixel values in the data file to geoid heights.
            </remarks>
        </member>
        <member name="P:GeographicLib.Geoid.Scale">
            <summary>
            Gets a value representing scale (meters) of the geoid data.
            </summary>
            <remarks>
            This in used in converting from the pixel values in the data file to geoid heights.
            </remarks>
        </member>
        <member name="P:GeographicLib.Geoid.IsThreadSafe">
            <summary>
            Gets a value representing whether current <see cref="T:GeographicLib.Geoid"/> instance is thread safe,
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.IsCacheEnabled">
            <summary>
            Gets a value representing whether data cache is enabled.
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.CacheWest">
            <summary>
            Gets a value representing west edge of the cached area; the cache includes this edge.
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.CacheEast">
            <summary>
            Gets a value representing east edge of the cached area; the cache excludes this edge.
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.CacheNorth">
            <summary>
            Gets a value representing north edge of the cached area; the cache includes this edge.
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.CacheSouth">
            <summary>
            Gets a value representing south edge of the cached area; the cache excludes this edge unless it's the south pole.
            </summary>
        </member>
        <member name="P:GeographicLib.Geoid.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.Geoid.Flattening">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.Geoid.DefaultGeoidPath">
            <summary>
            Gets a value representing the default path for geoid data files.
            </summary>
            <remarks>
            This is the value of the environment variable GEOGRAPHICLIB_GEOID_PATH, if set;
            otherwise, it is $GEOGRAPHICLIB_DATA/geoids if the environment variable GEOGRAPHICLIB_DATA is set;
            otherwise, it is a compile-time default (/usr/local/share/GeographicLib/geoids on non-Windows systems and C:/ProgramData/GeographicLib/geoids on Windows systems).
            </remarks>
        </member>
        <member name="P:GeographicLib.Geoid.DefaultGeoidName">
            <summary>
            Gets a value representing the default name for the geoid.
            </summary>
            <remarks>
            This is the value of the environment variable GEOGRAPHICLIB_GEOID_NAME, if set; otherwise, it is "egm96-5".
            The <see cref="T:GeographicLib.Geoid"/> class does not use this function;
            it is just provided as a convenience for a calling program when constructing a <see cref="T:GeographicLib.Geoid"/> object.
            </remarks>
        </member>
        <member name="M:GeographicLib.Geoid.Dispose">
            <summary>
            Release all underlying resource used by current <see cref="T:GeographicLib.Geoid"/> instance.
            </summary>
        </member>
        <member name="T:GeographicLib.GravityCircle">
            <summary>
            Gravity on a circle of latitude.
            </summary>
            <remarks>
            Evaluate the earth's gravity field on a circle of constant height and latitude.
            This uses a <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> to pre-evaluate the inner sum of the spherical harmonic sum,
            allowing the values of the field at several different longitudes to be evaluated rapidly.
            <para>
            Use <see cref="M:GeographicLib.GravityModel.Circle(System.Double,System.Double,GeographicLib.GravityFlags)"/> to create a <see cref="T:GeographicLib.GravityCircle"/> object.
            (The constructor for this class is private.)
            </para>
            <para>
            See <a href="https://geographiclib.sourceforge.io/html/gravity.html#gravityparallel">
            Geoid heights on a multi-processor system</a> for an example of using
            <see cref="T:GeographicLib.GravityCircle"/> (together with OpenMP) to speed up the computation of geoid heights.
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.GravityCircle.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GravityCircle.Flattening">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GravityCircle.Latitude">
            <summary>
            Gets a value representing the latitude of the circle (degrees).
            </summary>
        </member>
        <member name="P:GeographicLib.GravityCircle.Height">
            <summary>
            Gets a value representing the height of the circle (meters).
            </summary>
        </member>
        <member name="P:GeographicLib.GravityCircle.Capabilities">
            <summary>
            Gets a value representing the computational capabilities that this object was constructed with.
            </summary>
        </member>
        <member name="M:GeographicLib.GravityCircle.HasCapabilities(GeographicLib.GravityFlags)">
            <summary>
            Check whether current <see cref="T:GeographicLib.GravityCircle"/> has specified capabilities.
            </summary>
            <param name="testcaps">a set of bitor'ed <see cref="T:GeographicLib.GravityFlags"/> values.</param>
            <returns><see langword="true"/> if the <see cref="T:GeographicLib.GravityCircle"/> object has all these capabilities.</returns>
        </member>
        <member name="M:GeographicLib.GravityCircle.Gravity(System.Double)">
            <summary>
            Evaluate the gravity.
            </summary>
            <param name="lon">the geographic longitude (degrees).</param>
            <returns>
            <list type="bullet">
            <item><i>W</i>, the sum of the gravitational and centrifugal potentials (m^2 s^−2).</item>
            <item><i>gx</i>, the easterly component of the acceleration (m s^−2).</item>
            <item><i>gy</i>, the northerly component of the acceleration (m s^−2).</item>
            <item><i>gz</i>, the upward component of the acceleration (m s^−2); this is usually negative.</item>
            </list>
            </returns>
            <remarks>The function includes the effects of the earth's rotation.</remarks>
        </member>
        <member name="M:GeographicLib.GravityCircle.Disturbance(System.Double)">
            <summary>
            Evaluate the gravity disturbance vector.
            </summary>
            <param name="lon">the geographic longitude (degrees).</param>
            <returns>
            <list type="bullet">
            <item><i>T</i>, the corresponding disturbing potential (m2 s−2).</item>
            <item><i>deltax</i>, the easterly component of the disturbance vector (m s^−2).</item>
            <item><i>deltay</i>, the northerly component of the disturbance vector (m s^−2).</item>
            <item><i>deltaz</i>, the upward component of the disturbance vector (m s^−2).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.GravityCircle.GeoidHeight(System.Double)">
            <summary>
            Evaluate the geoid height.
            </summary>
            <param name="lon">the geographic longitude (degrees).</param>
            <returns><i>N</i>, the height of the geoid above the reference ellipsoid (meters).</returns>
            <remarks>
            Some approximations are made in computing the geoid height so that the results of the NGA codes are reproduced accurately.
            Details are given in
            <a href="https://geographiclib.sourceforge.io/html/gravity.html#gravitygeoid">Details of the geoid height and anomaly calculations</a>.
            </remarks>
        </member>
        <member name="M:GeographicLib.GravityCircle.SphericalAnomaly(System.Double)">
            <summary>
            Evaluate the components of the gravity anomaly vector using the spherical approximation.
            </summary>
            <param name="lon">the geographic longitude (degrees).</param>   w
            <returns>
            <list type="bullet">
            <item><i>Dg01</i>, the gravity anomaly (m s^−2).</item>
            <item><i>xi</i>, the northerly component of the deflection of the vertical (degrees).</item>
            <item><i>eta</i>, the easterly component of the deflection of the vertical (degrees).</item>
            </list>
            </returns>
            <remarks>
            The spherical approximation (see Heiskanen and Moritz, Sec 2-14) is used so that the results of the NGA codes are
            reproduced accurately. approximations used here.
            Details are given in
            <a href="https://geographiclib.sourceforge.io/html/gravity.html#gravitygeoid">Details of the geoid height and anomaly calculations</a>.
            </remarks>
        </member>
        <member name="M:GeographicLib.GravityCircle.W(System.Double)">
            <summary>
            Evaluate the components of the acceleration due to gravity and the centrifugal acceleration in geocentric coordinates.
            </summary>
            <param name="lon">the geographic longitude (degrees).</param>
            <returns>
            <list type="bullet">
            <item><i>W</i> = <i>V</i> + Φ, the sum of the gravitational and centrifugal potentials (m^2 s^−2).</item>
            <item><i>gX</i>, the <i>X</i> component of the acceleration (m s^−2).</item>
            <item><i>gY</i>, the <i>Y</i> component of the acceleration (m s^−2).</item>
            <item><i>gZ</i>, the <i>Z</i> component of the acceleration (m s^−2).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.GravityCircle.V(System.Double)">
            <summary>
            Evaluate the components of the acceleration due to gravity in geocentric coordinates.
            </summary>
            <param name="lon">the geographic longitude (degrees).</param>
            <returns>
            <list type="bullet">
            <item><i>V</i> = <i>W</i> - Φ, the gravitational potential (m^2 s^−2).</item>
            <item><i>GX</i>, the <i>X</i> component of the acceleration (m s^−2).</item>
            <item><i>GY</i>, the <i>Y</i> component of the acceleration (m s^−2).</item>
            <item><i>GZ</i>, the <i>Z</i> component of the acceleration (m s^−2).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.GravityCircle.Td(System.Double)">
            <summary>
            Evaluate the components of the gravity disturbance in geocentric coordinates.
            </summary>
            <param name="lon">the geographic longitude (degrees).</param>
            <returns>
            <list type="bullet">
            <item><i>T</i> = <i>W</i> - <i>U</i>, the disturbing potential (also called the anomalous potential) (m^2 s^−2).</item>
            <item><i>deltaX</i>, the <i>X</i> component of the gravity disturbance (m s^−2).</item>
            <item><i>deltaY</i>, the <i>Y</i> component of the gravity disturbance (m s^−2).</item>
            <item><i>deltaZ</i>, the <i>Z</i> component of the gravity disturbance (m s^−2).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.GravityCircle.T(System.Double)">
            <summary>
            Evaluate disturbing potential in geocentric coordinates.
            </summary>
            <param name="lon">the geographic longitude (degrees).</param>
            <returns>
            <i>T</i> = <i>W</i> - <i>U</i> the disturbing potential (also called the anomalous potential) (m^2 s^−2).
            </returns>
        </member>
        <member name="T:GeographicLib.GravityFlags">
            <summary>
            Bit masks for the capabilities to be given to the <see cref="T:GeographicLib.GravityCircle"/> object produced by <see cref="M:GeographicLib.GravityModel.Circle(System.Double,System.Double,GeographicLib.GravityFlags)"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.GravityFlags.None">
            <summary>
            No capabilities.
            </summary>
        </member>
        <member name="F:GeographicLib.GravityFlags.Gravity">
            <summary>
            Allow calls to <see cref="M:GeographicLib.GravityCircle.Gravity(System.Double)"/>,
            <see cref="M:GeographicLib.GravityCircle.W(System.Double)"/>, and
            <see cref="M:GeographicLib.GravityCircle.V(System.Double)"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.GravityFlags.Disturbance">
            <summary>
            Allow calls to <see cref="M:GeographicLib.GravityCircle.Disturbance(System.Double)"/> and
            <see cref="M:GeographicLib.GravityCircle.Td(System.Double)"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.GravityFlags.DisturbingPotential">
            <summary>
            Allow calls to <see cref="M:GeographicLib.GravityCircle.T(System.Double)"/>
            (i.e., computing the disturbing potential and not the gravity disturbance vector).
            </summary>
        </member>
        <member name="F:GeographicLib.GravityFlags.SphericalAnomaly">
            <summary>
            Allow calls to <see cref="M:GeographicLib.GravityCircle.SphericalAnomaly(System.Double)"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.GravityFlags.GeoidHeight">
            <summary>
            Allow calls to <see cref="M:GeographicLib.GravityCircle.GeoidHeight(System.Double)"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.GravityFlags.All">
            <summary>
            All capabilities.
            </summary>
        </member>
        <member name="T:GeographicLib.GravityModel">
            <summary>
            Model of the earth's gravity field.
            </summary>
            <remarks>
            Evaluate the earth's gravity field according to a model.
            The supported models treat only the gravitational field exterior to the mass of the earth.
            When computing the field at points near (but above) the surface of the earth a small correction can be applied to account
            for the mass of the atmosphere above the point in question; see The effect of the mass of the atmosphere.
            Determining the height of the geoid above the ellipsoid entails correcting for the mass of the earth above the geoid.
            The egm96 and egm2008 include separate correction terms to account for this mass.
            <para>
            Definitions and terminology (from Heiskanen and Moritz, Sec 2-13):
            </para>
            <list type="bullet">
            <item><i>V</i> = gravitational potential;</item>
            <item>Φ = rotational potential;</item>
            <item><i>W</i> = <i>V</i> + Φ = <i>T</i> + <i>U</i> = total potential;</item>
            <item><i>V</i>0 = normal gravitation potential;</item>
            <item><i>U</i> = <i>V</i>0 + Φ = total normal potential;</item>
            <item><i>T</i> = <i>W</i> − <i>U</i> = <i>V</i> − <i>V</i>0 = anomalous or disturbing potential;</item>
            <item><b>g</b> = ∇W = <b>γ</b> + <b>δ</b>;</item>
            <item><b>f</b> = ∇Φ;</item>
            <item><b>Γ</b> = ∇V0;</item>
            <item><b>γ</b> = ∇U;</item>
            <item><b>δ</b> = ∇<i>T</i> = gravity disturbance vector = <b>g</b><i>P</i> − <b>γ</b><i>P</i>;</item>
            <item>δ<i>g</i> = gravity disturbance = <i>gP</i> − γ<i>P</i>;</item>
            <item>Δ<b>g</b> = gravity anomaly vector = <b>g</b><i>P</i> − <b>γ</b><i>P</i>; here the line <i>PQ</i> is perpendicular to ellipsoid and the potential at <i>P</i> equals the normal potential at <i>Q</i>;</item>
            <item>Δ<i>g</i> = gravity anomaly = <i>gP</i> − γ<i>Q</i>;</item>
            <item>(ξ, η) deflection of the vertical, the difference in directions of <b>g</b><i>P</i> and <b>γ</b><i>Q</i>, ξ = NS, η = EW.</item>
            <item><i>X</i>, <i>Y</i>, <i>Z</i>, geocentric coordinates;</item>
            <item><i>x</i>, <i>y</i>, <i>z</i>, local cartesian coordinates used to denote the east, north and up directions.</item>
            </list>
            See <a href="https://geographiclib.sourceforge.io/html/gravity.html">Gravity models</a> for details of how to install the gravity models and the data format.
            <para>References:</para>
            <list type="bullet">
            <item>
            W. A. Heiskanen and H. Moritz, Physical Geodesy (Freeman, San Francisco, 1967).
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:GeographicLib.GravityModel.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Construct a gravity model.
            </summary>
            <param name="name">the name of the model.</param>
            <param name="path">directory for data file.</param>
            <param name="Nmax">if non-negative, truncate the degree of the model this value.</param>
            <param name="Mmax">if non-negative, truncate the order of the model this value.</param>
            <remarks>
            A filename is formed by appending ".egm" (World Gravity Model) to the <paramref name="name"/>.
            If <paramref name="path"/> is specified (and is non-empty), then the file is loaded from directory, <paramref name="path"/>.
            Otherwise the <paramref name="path"/> is given by <see cref="P:GeographicLib.GravityModel.DefaultGravityPath"/>.
            <para>
            This file contains the metadata which specifies the properties of the model.
            The coefficients for the spherical harmonic sums are obtained from a file obtained by appending ".cof"
            to metadata file (so the filename ends in ".egm.cof").
            </para>
            <para>
            If <paramref name="Nmax"/> ≥ 0 and <paramref name="Mmax"/> &lt; 0, then <paramref name="Mmax"/> is set to <paramref name="Nmax"/>.
            After the model is loaded, the maximum degree and order of the model can be found by the <see cref="P:GeographicLib.GravityModel.Degree"/> and <see cref="P:GeographicLib.GravityModel.Order"/> methods.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.GravityModel.#ctor(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Construct a gravity model form the given <paramref name="metadataStream"/> and <paramref name="coefficientsStream"/>.
            </summary>
            <param name="metadataStream">A <see cref="T:System.IO.Stream"/> which contains the metadata of the gravity model.</param>
            <param name="coefficientsStream">A <see cref="T:System.IO.Stream"/> which contains the coefficients of the gravity model.</param>
            <param name="Nmax">if non-negative, truncate the degree of the model this value.</param>
            <param name="Mmax">if non-negative, truncate the order of the model this value.</param>
            <param name="leaveOpen">
            <see langword="true"/> to leave the streams open after the constructor returns; otherwise, <see langword="false"/>.
            </param>
            <remarks>
            <para>
            If <paramref name="Nmax"/> ≥ 0 and <paramref name="Mmax"/> &lt; 0, then <paramref name="Mmax"/> is set to <paramref name="Nmax"/>.
            After the model is loaded, the maximum degree and order of the model can be found by the <see cref="P:GeographicLib.GravityModel.Degree"/> and <see cref="P:GeographicLib.GravityModel.Order"/> methods.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:GeographicLib.GravityModel.#ctor(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Construct a gravity model form the given <paramref name="metadataBytes"/> and <paramref name="coefficientsBytes"/>.
            </summary>
            <param name="metadataBytes">A <see cref="T:System.Byte"/> array which contains the metadata of the gravity model.</param>
            <param name="coefficientsBytes">A <see cref="T:System.Byte"/> array which contains the coefficients of the gravity model.</param>
            <param name="Nmax">if non-negative, truncate the degree of the model this value.</param>
            <param name="Mmax">if non-negative, truncate the order of the model this value.</param>
            <remarks>
            <para>
            If <paramref name="Nmax"/> ≥ 0 and <paramref name="Mmax"/> &lt; 0, then <paramref name="Mmax"/> is set to <paramref name="Nmax"/>.
            After the model is loaded, the maximum degree and order of the model can be found by the <see cref="P:GeographicLib.GravityModel.Degree"/> and <see cref="P:GeographicLib.GravityModel.Order"/> methods.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.GravityModel.Gravity(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the gravity at an arbitrary point above (or below) the ellipsoid.
            </summary>
            <param name="lat">the geographic latitude (degrees).</param>
            <param name="lon">the geographic longitude (degrees).</param>
            <param name="h">the height above the ellipsoid (meters).</param>
            <returns>
            <list type="bullet">
            <item><i>W</i>, the sum of the gravitational and centrifugal potentials (m^2 s^−2).</item>
            <item><i>gx</i>, the easterly component of the acceleration (m s^−2).</item>
            <item><i>gy</i>, the northerly component of the acceleration (m s^−2).</item>
            <item><i>gz</i>, the upward component of the acceleration (m s^−2); this is usually negative.</item>
            </list>
            </returns>
            <remarks>
            The function includes the effects of the earth's rotation.
            </remarks>
        </member>
        <member name="M:GeographicLib.GravityModel.Disturbance(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the gravity disturbance vector at an arbitrary point above (or below) the ellipsoid.
            </summary>
            <param name="lat">the geographic latitude (degrees).</param>
            <param name="lon">the geographic longitude (degrees).</param>
            <param name="h">the height above the ellipsoid (meters).</param>
            <returns>
            <list type="bullet">
            <item><i>T</i>, the corresponding disturbing potential (m2 s−2).</item>
            <item><i>deltax</i>, the easterly component of the disturbance vector (m s^−2).</item>
            <item><i>deltay</i>, the northerly component of the disturbance vector (m s^−2).</item>
            <item><i>deltaz</i>, the upward component of the disturbance vector (m s^−2).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.GravityModel.GeoidHeight(System.Double,System.Double)">
            <summary>
            Evaluate the geoid height.
            </summary>
            <param name="lat">the geographic latitude (degrees).</param>
            <param name="lon">the geographic longitude (degrees).</param>
            <returns><i>N</i>, the height of the geoid above the <see cref="P:GeographicLib.GravityModel.ReferenceEllipsoid"/> (meters).</returns>
            <remarks>
            This calls <see cref="M:GeographicLib.NormalGravity.U(System.Double,System.Double,System.Double)"/> for
            <see cref="P:GeographicLib.GravityModel.ReferenceEllipsoid"/>. Some approximations are made in computing the geoid height so that the results of
            the NGA codes are reproduced accurately. Details are given in
            <a href="https://geographiclib.sourceforge.io/html/gravity.html#gravitygeoid">Details of the geoid height and anomaly calculations</a>.
            </remarks>
        </member>
        <member name="M:GeographicLib.GravityModel.SphericalAnomaly(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the components of the gravity anomaly vector using the spherical approximation.
            </summary>
            <param name="lat">the geographic latitude (degrees).</param>
            <param name="lon">the geographic longitude (degrees).</param>
            <param name="h">the height above the ellipsoid (meters).</param>
            <returns>
            <list type="bullet">
            <item><i>Dg01</i>, the gravity anomaly (m s^−2).</item>
            <item><i>xi</i>, the northerly component of the deflection of the vertical (degrees).</item>
            <item><i>eta</i>, the easterly component of the deflection of the vertical (degrees).</item>
            </list>
            </returns>
            <remarks>
            The spherical approximation (see Heiskanen and Moritz, Sec 2-14) is used so that the results of
            the NGA codes are reproduced accurately. approximations used here.
            Details are given in
            <a href="https://geographiclib.sourceforge.io/html/gravity.html#gravitygeoid">Details of the geoid height and anomaly calculations</a>.
            </remarks>
        </member>
        <member name="M:GeographicLib.GravityModel.W(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the components of the acceleration due to gravity and the centrifugal acceleration in geocentric coordinates.
            </summary>
            <param name="X">the <i>X</i> component of geocentric coordinate of point (meters).</param>
            <param name="Y">the <i>Y</i> component of geocentric coordinate of point (meters).</param>
            <param name="Z">the <i>Z</i> component of geocentric coordinate of point (meters).</param>
            <returns>
            <list type="bullet">
            <item><i>W</i> = <i>V</i> + Φ, the sum of the gravitational and centrifugal potentials (m^2 s^−2).</item>
            <item><i>gX</i>, the <i>X</i> component of the acceleration (m s^−2).</item>
            <item><i>gY</i>, the <i>Y</i> component of the acceleration (m s^−2).</item>
            <item><i>gZ</i>, the <i>Z</i> component of the acceleration (m s^−2).</item>
            </list>
            </returns>
            <remarks>
            This calls <see cref="M:GeographicLib.NormalGravity.U(System.Double,System.Double,System.Double)"/>
            for <see cref="P:GeographicLib.GravityModel.ReferenceEllipsoid"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.GravityModel.V(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the components of the acceleration due to gravity in geocentric coordinates.
            </summary>
            <param name="X">the <i>X</i> component of geocentric coordinate of point (meters).</param>
            <param name="Y">the <i>Y</i> component of geocentric coordinate of point (meters).</param>
            <param name="Z">the <i>Z</i> component of geocentric coordinate of point (meters).</param>
            <returns>
            <list type="bullet">
            <item><i>V</i> = <i>W</i> - Φ, the gravitational potential (m^2 s^−2).</item>
            <item><i>GX</i>, the <i>X</i> component of the acceleration (m s^−2).</item>
            <item><i>GY</i>, the <i>Y</i> component of the acceleration (m s^−2).</item>
            <item><i>GZ</i>, the <i>Z</i> component of the acceleration (m s^−2).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.GravityModel.Td(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the components of the gravity disturbance in geocentric coordinates.
            </summary>
            <param name="X">the <i>X</i> component of geocentric coordinate of point (meters).</param>
            <param name="Y">the <i>Y</i> component of geocentric coordinate of point (meters).</param>
            <param name="Z">the <i>Z</i> component of geocentric coordinate of point (meters).</param>
            <returns>
            <list type="bullet">
            <item><i>T</i> = <i>W</i> - <i>U</i>, the disturbing potential (also called the anomalous potential) (m^2 s^−2).</item>
            <item><i>deltaX</i>, the <i>X</i> component of the gravity disturbance (m s^−2).</item>
            <item><i>deltaY</i>, the <i>Y</i> component of the gravity disturbance (m s^−2).</item>
            <item><i>deltaZ</i>, the <i>Z</i> component of the gravity disturbance (m s^−2).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.GravityModel.T(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate disturbing potential in geocentric coordinates.
            </summary>
            <param name="X">the <i>X</i> component of geocentric coordinate of point (meters).</param>
            <param name="Y">the <i>Y</i> component of geocentric coordinate of point (meters).</param>
            <param name="Z">the <i>Z</i> component of geocentric coordinate of point (meters).</param>
            <returns>
            <i>T</i> = <i>W</i> - <i>U</i>, the disturbing potential (also called the anomalous potential) (m^2 s^−2).
            </returns>
        </member>
        <member name="M:GeographicLib.GravityModel.U(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the components of the acceleration due to normal gravity and the centrifugal acceleration in geocentric coordinates.
            </summary>
            <param name="X">the <i>X</i> component of geocentric coordinate of point (meters).</param>
            <param name="Y">the <i>Y</i> component of geocentric coordinate of point (meters).</param>
            <param name="Z">the <i>Z</i> component of geocentric coordinate of point (meters).</param>
            <returns>
            <list type="bullet">
            <item><i>U</i> = <i>V</i>0 + Φ, the sum of the normal gravitational and centrifugal potentials (m^2 s^−2).</item>
            <item><i>gammaX</i>, the <i>X</i> component of the normal acceleration (m s^−2).</item>
            <item><i>gammaY</i>, the <i>Y</i> component of the normal acceleration (m s^−2).</item>
            <item><i>gammaZ</i>, the <i>Z</i> component of the normal acceleration (m s^−2).</item>
            </list>
            </returns>
            <remarks>
            This calls <see cref="M:GeographicLib.NormalGravity.U(System.Double,System.Double,System.Double)"/>
            for <see cref="P:GeographicLib.GravityModel.ReferenceEllipsoid"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.GravityModel.Phi(System.Double,System.Double)">
            <summary>
            Evaluate the centrifugal acceleration in geocentric coordinates.
            </summary>
            <param name="X">the <i>X</i> component of geocentric coordinate of point (meters).</param>
            <param name="Y">the <i>Y</i> component of geocentric coordinate of point (meters).</param>
            <returns>
            <list type="bullet">
            <item>Φ, the centrifugal potential (m^2 s^−2).</item>
            <item><i>fX</i>, the <i>X</i> component of the centrifugal acceleration (m s^−2).</item>
            <item><i>fY</i>, the <i>Y</i> component of the centrifugal acceleration (m s^−2).</item>
            </list>
            </returns>
            <remarks>
            This calls <see cref="M:GeographicLib.NormalGravity.Phi(System.Double,System.Double)"/> for <see cref="P:GeographicLib.GravityModel.ReferenceEllipsoid"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.GravityModel.Circle(System.Double,System.Double,GeographicLib.GravityFlags)">
            <summary>
            Create a <see cref="T:GeographicLib.GravityCircle"/> object to allow the gravity field at many points with constant
            <paramref name="lat"/> and <paramref name="h"/> and varying <i>lon</i> to be computed efficiently.
            </summary>
            <param name="lat">latitude of the point (degrees).</param>
            <param name="h">the height of the point above the ellipsoid (meters).</param>
            <param name="caps">bitor'ed combination of <see cref="T:GeographicLib.GravityFlags"/> values specifying the capabilities of the resulting
            <see cref="T:GeographicLib.GravityCircle"/> object.</param>
            <returns>a <see cref="T:GeographicLib.GravityCircle"/> object whose member functions computes the gravitational field at a particular values
            of <i>lon</i>.</returns>
            <remarks>
            The <see cref="T:GeographicLib.GravityFlags"/> values are
            <list type="bullet">
            <item><paramref name="caps"/> |= <see cref="F:GeographicLib.GravityFlags.Gravity"/></item>
            <item><paramref name="caps"/> |= <see cref="F:GeographicLib.GravityFlags.Disturbance"/></item>
            <item><paramref name="caps"/> |= <see cref="F:GeographicLib.GravityFlags.DisturbingPotential"/></item>
            <item><paramref name="caps"/> |= <see cref="F:GeographicLib.GravityFlags.SphericalAnomaly"/></item>
            <item><paramref name="caps"/> |= <see cref="F:GeographicLib.GravityFlags.GeoidHeight"/></item>
            </list>
            The default value of <paramref name="caps"/> is <see cref="F:GeographicLib.GravityFlags.All"/> which turns on all the capabilities.
            If an unsupported function is invoked, it will return <see cref="F:System.Double.NaN"/>.
            Note that <see cref="F:GeographicLib.GravityFlags.GeoidHeight"/> will only be honored if <paramref name="h"/> = 0.
            <para>
            If the field at several points on a circle of latitude need to be calculated then creating a <see cref="T:GeographicLib.GravityCircle"/>
            object and using its member functions will be substantially faster, especially for high-degree models.
            See <a href="https://geographiclib.sourceforge.io/html/gravity.html#gravityparallel">Geoid heights on a multi-processor
            system</a> for an example of using <see cref="T:GeographicLib.GravityCircle"/> (together with OpenMP) to speed up the computation of geoid heights.
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.GravityModel.ReferenceEllipsoid">
            <summary>
            Gets a value representing the <see cref="T:GeographicLib.NormalGravity"/> object for the reference ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.GravityModel.Description">
            <summary>
            Gets a value representing the description of the gravity model, if available, in the data file; if absent, return "NONE".
            </summary>
        </member>
        <member name="P:GeographicLib.GravityModel.DateTime">
            <summary>
            Gets a value representing date of the model; if absent, return <see langword="null"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.GravityModel.GravityFile">
            <summary>
            Gets a value representing full file name used to load the gravity model.
            </summary>
            <remarks>
            This property returns <see langword="null"/> if the <see cref="T:GeographicLib.GravityModel"/> object
            is constructed from <see cref="T:System.IO.Stream"/> or <see cref="T:System.Byte"/> array.
            </remarks>
        </member>
        <member name="P:GeographicLib.GravityModel.GravityModelName">
            <summary>
            Gets a value representing "name" used to load the gravity model
            (from the first argument of the constructor, but this may be overridden by the model file).
            </summary>
            <remarks>
            This property returns <see langword="null"/> if the <see cref="T:GeographicLib.GravityModel"/> object
            is constructed from <see cref="T:System.IO.Stream"/> or <see cref="T:System.Byte"/> array, and the model file doesn't
            define <c>Name</c> attribute.
            </remarks>
        </member>
        <member name="P:GeographicLib.GravityModel.GravityModelDirectory">
            <summary>
            Gets a value representing directory used to load the gravity model.
            </summary>
             <remarks>
            This property returns <see langword="null"/> if the <see cref="T:GeographicLib.GravityModel"/> object
            is constructed from <see cref="T:System.IO.Stream"/> or <see cref="T:System.Byte"/> array.
            </remarks>
        </member>
        <member name="P:GeographicLib.GravityModel.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GravityModel.Flattening">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.GravityModel.MassConstant">
            <summary>
            Gets a value representing <i>GM</i>, the mass constant of the model (m^3 s^−2);
            this is the product of <i>G</i> the gravitational constant and <i>M</i> the mass of the earth
            (usually including the mass of the earth's atmosphere).
            </summary>
        </member>
        <member name="P:GeographicLib.GravityModel.ReferenceMassConstant">
            <summary>
            Gets a value representing <i>GM</i>, the mass constant of the <see cref="P:GeographicLib.GravityModel.ReferenceEllipsoid"/> (m^3 s^−2).
            </summary>
        </member>
        <member name="P:GeographicLib.GravityModel.AngularVelocity">
            <summary>
            Gets a value representing ω, the angular velocity of the model and the <see cref="P:GeographicLib.GravityModel.ReferenceEllipsoid"/> (rad s^−1).
            </summary>
        </member>
        <member name="P:GeographicLib.GravityModel.Degree">
            <summary>
            Gets a value representing <i>Nmax</i>, the maximum degree of the components of the model.
            </summary>
        </member>
        <member name="P:GeographicLib.GravityModel.Order">
            <summary>
            Gets a value representing <i>Mmax</i>, the maximum order of the components of the model.
            </summary>
        </member>
        <member name="P:GeographicLib.GravityModel.DefaultGravityPath">
            <summary>
            Gets a value representing the default path for gravity model data files.
            </summary>
            <remarks>
            This is the value of the environment variable GEOGRAPHICLIB_GRAVITY_PATH, if set;
            otherwise, it is $GEOGRAPHICLIB_DATA/gravity if the environment variable GEOGRAPHICLIB_DATA is set;
            otherwise, it is a compile-time default (/usr/local/share/GeographicLib/gravity on non-Windows systems
            and C:/ProgramData/GeographicLib/gravity on Windows systems).
            </remarks>
        </member>
        <member name="P:GeographicLib.GravityModel.DefaultGravityName">
            <summary>
            Gets a value representing the default name for the gravity model.
            </summary>
            <remarks>
            This is the value of the environment variable GEOGRAPHICLIB_GRAVITY_NAME, if set;
            otherwise, it is "egm96". The <see cref="T:GeographicLib.GravityModel"/> class does not use this function;
            it is just provided as a convenience for a calling program when constructing a <see cref="T:GeographicLib.GravityModel"/> object.
            </remarks>
        </member>
        <member name="T:GeographicLib.HemisphereIndicator">
            <summary>
            Indicator for presence of hemisphere indicator (N/S/E/W) on latitudes and longitudes.
            </summary>
        </member>
        <member name="F:GeographicLib.HemisphereIndicator.None">
            <summary>
            No indicator present.
            </summary>
        </member>
        <member name="F:GeographicLib.HemisphereIndicator.Latitude">
            <summary>
            Latitude indicator (N/S) present.
            </summary>
        </member>
        <member name="F:GeographicLib.HemisphereIndicator.Longitude">
            <summary>
            Longitude indicator (E/W) present.
            </summary>
        </member>
        <member name="F:GeographicLib.HemisphereIndicator.Azimuth">
            <summary>
            Used in <see cref="M:GeographicLib.DMS.Encode(System.Double,System.Int32,GeographicLib.HemisphereIndicator,System.Char)"/> to indicate output of an azimuth in [000, 360) with no letter indicator.
            </summary>
        </member>
        <member name="F:GeographicLib.HemisphereIndicator.Number">
            <summary>
            Used in <see cref="M:GeographicLib.DMS.Encode(System.Double,System.Int32,GeographicLib.HemisphereIndicator,System.Char)"/> to indicate output of a plain number.
            </summary>
        </member>
        <member name="T:GeographicLib.IEllipsoid">
            <summary>
            Exposes equatorial radius (<i>a</i>) and flatterning (<i>f</i>) of an ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.IEllipsoid.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius (<i>a</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.IEllipsoid.Flattening">
            <summary>
            Gets a value representing the flattening (<i>f</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="T:GeographicLib.IGeodesic">
            <summary>
            Exposes geodesic calculations.
            </summary>
        </member>
        <member name="M:GeographicLib.IGeodesic.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of arc length.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="a12">arc length of between point 1 and point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="m12">reduced length of geodesic (meters).</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless).</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless).</param>
            <param name="S12">area under the geodesic (meters^2).</param>
            <remarks>
            <para>
            <i>lat1</i> should be in the range [−90°, 90°]. 
            The values of <i>lon2</i> and <i>azi2</i> returned are in the range [−180°, 180°].
            </para>
            <para>
            If either point is at a pole, the azimuth is defined by keeping the longitude fixed,
            writing lat = ±(90° − ε), and taking the limit ε → 0+.
            An arc length greater that 180° signifies a geodesic which is not a shortest path.
            (For a prolate ellipsoid, an additional condition is necessary for a shortest path:
            the longitudinal extent must not exceed of 180°.)
            </para>
            <para>
            The following functions are overloaded versions of 
            <see cref="M:GeographicLib.IGeodesic.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>
            which omit some of the output parameters.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesic.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of arc length.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="a12">arc length of between point 1 and point 2 (degrees).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
        </member>
        <member name="M:GeographicLib.IGeodesic.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of arc length.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="a12">arc length of between point 1 and point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
        </member>
        <member name="M:GeographicLib.IGeodesic.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of arc length.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="a12">arc length of between point 1 and point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="m12">reduced length of geodesic (meters).</param>
        </member>
        <member name="M:GeographicLib.IGeodesic.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of arc length.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="a12">arc length of between point 1 and point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless).</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless).</param>
        </member>
        <member name="M:GeographicLib.IGeodesic.ArcDirect(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of arc length.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="a12">arc length of between point 1 and point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="m12">reduced length of geodesic (meters).</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless).</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless).</param>
        </member>
        <member name="M:GeographicLib.IGeodesic.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of distance.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesic.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of distance.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesic.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of distance.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="m12">reduced length of geodesic (meters).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesic.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of distance.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless).</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesic.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of distance.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="m12">reduced length of geodesic (meters).</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless).</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesic.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of distance.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="m12">reduced length of geodesic (meters).</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless).</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless).</param>
            <param name="S12">area under the geodesic (meters^2).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
            <remarks>
            <i>lat1</i> should be in the range [−90°, 90°]. The values of <i>lon2</i> and <i>azi2</i> returned are in the range [−180°, 180°].
            <para>
            If either point is at a pole, the azimuth is defined by keeping the longitude fixed, writing <i>lat</i> = ±(90° − ε), 
            and taking the limit ε → 0+. An arc length greater that 180° signifies a geodesic which is not a shortest path.
            (For a prolate ellipsoid, an additional condition is necessary for a shortest path: the longitudinal extent must not exceed of 180°.)
            </para>
            <para>
            The following functions are overloaded versions of 
            <see cref="M:GeographicLib.IGeodesic.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>
            which omit some of the output parameters. Note, however, that the arc length is always computed and returned as the function value.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the inverse geodesic problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters).</param>
            <param name="m12">reduced length of geodesic (meters).</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless).</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless).</param>
            <param name="S12">area under the geodesic (meters^2).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
            <remarks>
            <para>
            <i>lat1</i> and <i>lat2</i> should be in the range [−90°, 90°]. 
            The values of <i>azi1</i> and <i>azi2</i> returned are in the range [−180°, 180°].
            </para>
            <para>
            If either point is at a pole, the azimuth is defined by keeping the longitude fixed,
            writing lat = ±(90° − ε), and taking the limit ε → 0+.
            </para>
            <para>
            The solution to the inverse problem is found using Newton's method. 
            If this fails to converge (this is very unlikely in geodetic applications but does occur for very eccentric ellipsoids), 
            then the bisection method is used to refine the solution.
            </para>
            <para>
            The following functions are overloaded versions of <see cref="M:GeographicLib.IGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@)"/>
            which omit some of the output parameters.
            Note, however, that the arc length is always computed and returned as the function value.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Solve the inverse geodesic problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Solve the inverse geodesic problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the inverse geodesic problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the inverse geodesic problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters).</param>
            <param name="m12">reduced length of geodesic (meters).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the inverse geodesic problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters).</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless).</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the inverse geodesic problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters).</param>
            <param name="m12">reduced length of geodesic (meters).</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless).</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesic.GenDirectLine(System.Double,System.Double,System.Double,System.Boolean,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Define a <see cref="T:GeographicLib.IGeodesicLine"/> in terms of the direct geodesic problem
            specified in terms of either distance or arc length.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="arcmode">boolean flag determining the meaning of the <i>s12_a12</i>.</param>
            <param name="s12_a12">
            if <paramref name="arcmode"/> is false, this is the distance between point 1 and point 2 (meters);
            otherwise it is the arc length between point 1 and point 2 (degrees); it can be negative.
            </param>
            <param name="caps">
            bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying the capabilities
            the <see cref="T:GeographicLib.IGeodesicLine"/> object should possess, i.e., which quantities can be returned
            in calls to <see cref="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>.
            </param>
            <returns>a <see cref="T:GeographicLib.IGeodesicLine"/> object.</returns>
            <remarks>
            This function sets point 3 of the <see cref="T:GeographicLib.IGeodesicLine"/> to correspond to point 2 of the direct geodesic problem.
            <para><paramref name="lat1"/> should be in the range [−90°, 90°].</para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesic.Line(System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Set up to compute several points on a single geodesic.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="caps">
            bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying the capabilities
            the <see cref="T:GeographicLib.IGeodesicLine"/> object should possess, i.e., which quantities can be returned
            in calls to <see cref="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>.
            </param>
            <returns>a <see cref="T:GeographicLib.IGeodesicLine"/> object.</returns>
            <remarks>
            <para><paramref name="lat1"/> should be in the range [−90°, 90°].</para>
            <para>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values are
            <list type="bullet">
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <i>lat2</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the latitude <i>lon2</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the latitude <i>azi2</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <i>s12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/> for the reduced length <i>m12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/> for the geodesic scales <i>M12</i> and <i>M21</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <i>S12</i>;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item><i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <i>lon2</i> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            </para>
            <para>The default value of caps is <see cref="F:GeographicLib.GeodesicFlags.All"/>.</para>
            <para>
            If the point is at a pole, the azimuth is defined by keeping lon1 fixed, 
            writing <i>lat1</i> = ±(90 − ε), and taking the limit ε → 0+.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesic.InverseLine(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Define a <see cref="T:GeographicLib.IGeodesicLine"/> in terms of the inverse geodesic problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="caps">
            bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying the capabilities
            the <see cref="T:GeographicLib.IGeodesicLine"/> object should possess, i.e., which quantities can be returned
            in calls to <see cref="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>.
            </param>
            <returns>a <see cref="T:GeographicLib.IGeodesicLine"/> object.</returns>
            <remarks>
            <para>
            This function sets point 3 of the <see cref="T:GeographicLib.IGeodesicLine"/> to correspond to point 2 of the inverse geodesic problem.
            </para>
            <para>
            <i>lat1</i> and <i>lat2</i> should be in the range [−90°, 90°].
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesic.DirectLine(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Define a <see cref="T:GeographicLib.IGeodesicLine"/> in terms of the direct geodesic problem specified in terms of distance.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="caps">
            bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying the capabilities
            the <see cref="T:GeographicLib.IGeodesicLine"/> object should possess, i.e., which quantities can be returned
            in calls to <see cref="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>.
            </param>
            <returns>a <see cref="T:GeographicLib.IGeodesicLine"/> object.</returns>
            <remarks>
            <para>
            This function sets point 3 of the <see cref="T:GeographicLib.IGeodesicLine"/> to correspond to point 2 of the direct geodesic problem.
            </para>
            <para><i>lat1</i> should be in the range [−90°, 90°].</para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesic.ArcDirectLine(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Define a <see cref="T:GeographicLib.IGeodesicLine"/> in terms of the direct geodesic problem specified in terms of arc length.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="a12">arc length between point 1 and point 2 (degrees); it can be negative.</param>
            <param name="caps">
            bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying the capabilities
            the <see cref="T:GeographicLib.IGeodesicLine"/> object should possess, i.e., which quantities can be returned
            in calls to <see cref="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>.
            </param>
            <returns>a <see cref="T:GeographicLib.IGeodesicLine"/> object.</returns>
            <remarks>
            <para>
            This function sets point 3 of the <see cref="T:GeographicLib.IGeodesicLine"/> to correspond to point 2 of the direct geodesic problem.
            </para>
            <para>
            <i>lat1</i> should be in the range [−90°, 90°].
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesic.ArcDirect(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of arc length.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="a12">arc length of between point 1 and point 2 (degrees).</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying
            which of the properties in returned <see cref="T:GeographicLib.DirectGeodesicResult"/> instance should be set.
            </param>
            <returns>
            A <see cref="T:GeographicLib.DirectGeodesicResult"/> instance containing the result of the calcutation.
            </returns>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for outmask are
            <list type="bullet">
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <i>lat2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the latitude <i>lon2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the latitude <i>azi2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <i>s12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/> for the reduced length <i>m12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/> for the geodesic scales <i>M12</i> and <i>M21</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <i>S12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <i>lon2</i> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            <para>
            With the <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> bit set, the quantity <i>lon2</i> − <i>lon1</i> indicates how many times 
            and in what sense the geodesic encircles the ellipsoid.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesic.Direct(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Solve the direct geodesic problem where the length of the geodesic is specified in terms of distance.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying
            which of the properties in returned <see cref="T:GeographicLib.DirectGeodesicResult"/> instance should be set.
            </param>
            <returns>
            A <see cref="T:GeographicLib.DirectGeodesicResult"/> instance containing the result of the calcutation.
            </returns>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for outmask are
            <list type="bullet">
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <i>lat2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the latitude <i>lon2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the latitude <i>azi2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <i>s12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/> for the reduced length <i>m12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/> for the geodesic scales <i>M12</i> and <i>M21</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <i>S12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <i>lon2</i> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            <para>
            With the <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> bit set, the quantity <i>lon2</i> − <i>lon1</i> indicates how many times 
            and in what sense the geodesic encircles the ellipsoid.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Solve the inverse geodesic problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying
            which of the properties in returned <see cref="T:GeographicLib.InverseGeodesicResult"/> instance should be set.
            </param>
            <returns>A <see cref="T:GeographicLib.InverseGeodesicResult"/> instance containing the result of the calcutation.</returns>
        </member>
        <member name="T:GeographicLib.IGeodesicLike">
            <summary>
            Defines properties and methods of a geodesic-like object.
            </summary>
        </member>
        <member name="P:GeographicLib.IGeodesicLike.EllipsoidArea">
            <summary>
            Gets a value representing the total area of ellipsoid in meters^2.
            The area of a polygon encircling a pole can be found by adding <see cref="P:GeographicLib.IGeodesicLike.EllipsoidArea"/>/2 to the sum of <i>S12</i> for each side of the polygon.
            </summary>
        </member>
        <member name="M:GeographicLib.IGeodesicLike.GenDirect(System.Double,System.Double,System.Double,System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            The general direct geodesic problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="arcmode">boolean flag determining the meaning of the <paramref name="s12_a12"/>.</param>
            <param name="s12_a12">
            if <paramref name="arcmode"/> is <see langword="false"/>, this is the distance between
            point 1 and point 2 (meters); otherwise it is the arc length between
            point 1 and point 2 (degrees); it can be negative.</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying
            which of the following parameters should be set.
            </param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters).</param>
            <param name="m12">reduced length of geodesic (meters).</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless).</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless).</param>
            <param name="S12">area under the geodesic (meters^2).</param>
            <returns><i>a12</i> arc length of between point 1 and point 2 (degrees).</returns>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for outmask are
            <list type="bullet">
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <i>lat2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the latitude <i>lon2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the latitude <i>azi2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <i>s12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/> for the reduced length <i>m12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/> for the geodesic scales <i>M12</i> and <i>M21</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <i>S12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <i>lon2</i> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            <para>
            The function value <i>a12</i> is always computed and returned and this equals <i>s12_a12</i> is arcmode is <see langword="true"/>.
            If outmask includes <see cref="F:GeographicLib.GeodesicFlags.Distance"/> and arcmode is <see langword="false"/>, 
            then <i>s12</i> = <i>s12_a12</i>. It is not necessary to include <see cref="F:GeographicLib.GeodesicFlags.DistanceIn"/> in outmask;
            this is automatically included is arcmode is <see langword="false"/>.
            </para>
            <para>
            With the <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> bit set, the quantity <i>lon2</i> − <i>lon1</i> indicates how many times 
            and in what sense the geodesic encircles the ellipsoid.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesicLike.GenInverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            The general inverse geodesic calculation. 
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi1">azimuth at point 1 (degrees).</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying
            which of the following parameters should be set.
            </param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="azi2">(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters).</param>
            <param name="m12">reduced length of geodesic (meters).</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless).</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless).</param>
            <param name="S12">area under the geodesic (meters^2).</param>
            <returns><i>a12</i>, arc length of between point 1 and point 2 (degrees).</returns>
        </member>
        <member name="T:GeographicLib.IGeodesicLine">
            <summary>
            Represents a geodesic line.
            </summary>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.Arc">
            <summary>
            Gets or sets a value representing the arc length to point 3 (degrees).
            </summary>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.Azimuth">
            <summary>
            Gets a value representing the azimuth (degrees) of the geodesic line at point 1.
            </summary>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.Capabilities">
            <summary>
            Gets a avalue representing the computational capabilities that this object was constructed with.
            <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> and <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> are always included.
            </summary>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.CosineAzimuth">
            <summary>
            Gets a value representing cosine of <see cref="P:GeographicLib.IGeodesicLine.Azimuth"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.CosineEquatorialAzimuth">
            <summary>
            Gets a value representing cosine of <see cref="P:GeographicLib.IGeodesicLine.EquatorialAzimuth"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.Distance">
            <summary>
            Gets or sets a value representing the distance to point 3 (meters).
            </summary>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.EquatorialArc">
            <summary>
            Gets a value representing the arc length (degrees) between the northward equatorial crossing and point 1.
            </summary>
            <remarks>
            The result lies in [−180°, 180°].
            </remarks>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.EquatorialAzimuth">
            <summary>
            Gets a value representing the azimuth (degrees) of the geodesic line as it crosses
            the equator in a northward direction.
            </summary>
            <remarks>
            The result lies in [−90°, 90°].
            </remarks>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.Latitude">
            <summary>
            Gets a value representing the latitude of point 1 (degrees).
            </summary>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.Longitude">
            <summary>
            Gets a value representing the longitude of point 1 (degrees).
            </summary>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.SineAzimuth">
            <summary>
            Gets a value representing sine of <see cref="P:GeographicLib.IGeodesicLine.Azimuth"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.IGeodesicLine.SineEquatorialAzimuth">
            <summary>
            Gets a value representing sine of <see cref="P:GeographicLib.IGeodesicLine.EquatorialAzimuth"/>.
            </summary>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.GenPosition(System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            The general position function.
            <see cref="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>
            and <see cref="M:GeographicLib.IGeodesicLine.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/> are defined in terms of this function.
            </summary>
            <param name="arcmode">
            boolean flag determining the meaning of the second parameter; 
            if <paramref name="arcmode"/> is <see langword="false"/>, 
            then the <see cref="T:GeographicLib.IGeodesicLine"/> object must have been constructed with 
            <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.DistanceIn"/>.
            </param>
            <param name="s12_a12">
            if <i>arcmode</i> is false, this is the distance between point 1 and point 2 (meters);
            otherwise it is the arc length between point 1 and point 2 (degrees); it can be negative.
            </param>
            <param name="outmask">a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying which of the following
            parameters should be set.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
            <param name="m12">	reduced length of geodesic (meters);
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/>.</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <param name="S12">area under the geodesic (meters2);
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/>.</param>
            <returns><i>a12</i>, arc length from point 1 to point 2 (degrees).</returns>
            <remarks>
            <para>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for outmask are
            <list type="bullet">
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <i>lat2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the latitude <i>lon2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the latitude <i>azi2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <i>s12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/> for the reduced length <i>m12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/> for the geodesic scales <i>M12</i> and <i>M21</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <i>S12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <i>lon2</i> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            </para>
            <para>
            Requesting a value which the <see cref="T:GeographicLib.IGeodesicLine"/> object is not capable of computing is not an error; 
            the corresponding argument will not be altered. Note, however, that the arc length is always
            computed and returned as the function value.
            </para>
            <para>
            With the <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> bit set, the quantity <i>lon2</i> − <i>lon1</i> indicates
            how many times and in what sense the geodesic encircles the ellipsoid.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.GetDistance(System.Boolean)">
            <summary>
            Gets the distance or arc length to point 3.
            </summary>
            <param name="arcmode">boolean flag determining the meaning of returned value.</param>
            <returns><i>s13</i> if <paramref name="arcmode"/> is <see langword="false"/>; <i>a13</i> if <paramref name="arcmode"/> is <see langword="true"/>.</returns>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.SetDistance(System.Boolean,System.Double)">
            <summary>
            Specify position of point 3 in terms of either distance or arc length.
            </summary>
            <param name="arcmode">
            boolean flag determining the meaning of the second parameter; 
            if <paramref name="arcmode"/> is <see langword="false"/>, then the <see cref="T:GeographicLib.IGeodesicLine"/> object
            must have been constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.DistanceIn"/>.
            </param>
            <param name="s13_a13">
            if <paramref name="arcmode"/> is <see langword="false"/>, this is the distance from point 1 to point 3 (meters);
            otherwise it is the arc length from point 1 to point 3 (degrees); it can be negative.</param>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.HasCapability(GeographicLib.GeodesicFlags)">
            <summary>
            Test what capabilities are available.
            </summary>
            <param name="testcaps">a set of bitor'ed <see cref="T:GeographicLib.GeodesicFlags"/> values.</param>
            <returns><see langword="true"/> if the <see cref="T:GeographicLib.IGeodesicLine"/> object has all these capabilities.</returns>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is an arc length <i>a12</i> (degrees) from point 1.
            </summary>
            <param name="a12">arc length from point 1 to point 2 (degrees); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
            <param name="m12">	reduced length of geodesic (meters);
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/>.</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <param name="S12">area under the geodesic (meters2);
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/>.</param>
            <remarks>
            <para>
            The values of <i>lon2</i> and <i>azi2</i> returned are in the range [−180°, 180°].
            </para>
            <para>
            Requesting a value which the <see cref="T:GeographicLib.IGeodesicLine"/> object is not capable of computing is not an error;
            the corresponding argument will not be altered.
            </para>
            <para>
            The following functions are overloaded versions of <see cref="M:GeographicLib.IGeodesicLine.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>
            which omit some of the output parameters.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.ArcPosition(System.Double,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is an arc length <i>a12</i> (degrees) from point 1.
            </summary>
            <param name="a12">arc length from point 1 to point 2 (degrees); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is an arc length <i>a12</i> (degrees) from point 1.
            </summary>
            <param name="a12">arc length from point 1 to point 2 (degrees); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is an arc length <i>a12</i> (degrees) from point 1.
            </summary>
            <param name="a12">arc length from point 1 to point 2 (degrees); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is an arc length <i>a12</i> (degrees) from point 1.
            </summary>
            <param name="a12">arc length from point 1 to point 2 (degrees); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
            <param name="m12">	reduced length of geodesic (meters);
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/>.</param>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is an arc length <i>a12</i> (degrees) from point 1.
            </summary>
            <param name="a12">arc length from point 1 to point 2 (degrees); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.ArcPosition(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is an arc length <i>a12</i> (degrees) from point 1.
            </summary>
            <param name="a12">arc length from point 1 to point 2 (degrees); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
            <param name="m12">	reduced length of geodesic (meters);
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/>.</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is a distance <i>s12</i> (meters) from point 1.
            </summary>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
            <param name="m12">	reduced length of geodesic (meters);
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/>.</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <param name="S12">area under the geodesic (meters2);
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/>.</param>
            <returns><i>a12</i>, arc length from point 1 to point 2 (degrees).</returns>
            <remarks>
            The values of <i>lon2</i> and <i>azi2</i> returned are in the range [−180°, 180°].
            <para>
            The <see cref="T:GeographicLib.IGeodesicLine"/> object must have been constructed with
            <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.DistanceIn"/>; otherwise <see cref="F:System.Double.NaN"/> is returned 
            and no parameters are set. Requesting a value which the <see cref="T:GeographicLib.IGeodesicLine"/> object is not capable
            of computing is not an error; the corresponding argument will not be altered.
            </para>
            <para>
            The following functions are overloaded versions of <see cref="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"/>
            which omit some of the output parameters.
            Note, however, that the arc length is always computed and returned as the function value.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is a distance <i>s12</i> (meters) from point 1.
            </summary>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
            <returns><i>a12</i>, arc length from point 1 to point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is a distance <i>s12</i> (meters) from point 1.
            </summary>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param> 
            <returns><i>a12</i>, arc length from point 1 to point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is a distance <i>s12</i> (meters) from point 1.
            </summary>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
            <param name="m12">	reduced length of geodesic (meters);
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/>.</param>        /// <returns><i>a12</i>, arc length from point 1 to point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is a distance <i>s12</i> (meters) from point 1.
            </summary>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <returns><i>a12</i>, arc length from point 1 to point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.Position(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is a distance <i>s12</i> (meters) from point 1.
            </summary>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">	longitude of point 2 (degrees); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/>.</param>
            <param name="azi2">	(forward) azimuth at point 2 (degrees).</param>
            <param name="s12">	distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
            <param name="m12">	reduced length of geodesic (meters);
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/>.</param>
            <param name="M12">geodesic scale of point 2 relative to point 1 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <param name="M21">geodesic scale of point 1 relative to point 2 (dimensionless); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/>.</param>
            <returns><i>a12</i>, arc length from point 1 to point 2 (degrees).</returns>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.Position(System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Compute the position of point 2 which is a distance <i>s12</i> (meters) from point 1.
            </summary>
            <param name="s12">distance from point 1 to point 2 (meters); 
            requires that the <see cref="T:GeographicLib.IGeodesicLine"/> object was constructed with <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/>.</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying
            which of the properties in returned <see cref="T:GeographicLib.DirectGeodesicResult"/> instance should be set.
            </param>
            <returns>
            A <see cref="T:GeographicLib.DirectGeodesicResult"/> instance containing the result of the calcutation.
            </returns>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for outmask are
            <list type="bullet">
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <i>lat2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the latitude <i>lon2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the latitude <i>azi2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <i>s12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/> for the reduced length <i>m12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/> for the geodesic scales <i>M12</i> and <i>M21</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <i>S12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <i>lon2</i> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            The values of <i>lon2</i> and <i>azi2</i> returned are in the range [−180°, 180°].
            <para>
            The <see cref="T:GeographicLib.IGeodesicLine"/> object must have been constructed with
            <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.DistanceIn"/>; otherwise <see cref="F:System.Double.NaN"/> is returned 
            and no parameters are set. Requesting a value which the <see cref="T:GeographicLib.IGeodesicLine"/> object is not capable
            of computing is not an error; the corresponding argument will not be altered.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.IGeodesicLine.ArcPosition(System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Compute the position of point 2 which is an arc length <i>a12</i> (degrees) from point 1.
            </summary>
            <param name="a12">arc length from point 1 to point 2 (degrees); it can be negative.</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying
            which of the properties in returned <see cref="T:GeographicLib.DirectGeodesicResult"/> instance should be set.
            </param>
            <returns>A <see cref="T:GeographicLib.DirectGeodesicResult"/> instance containing the result of the calcutation.</returns>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for outmask are
            <list type="bullet">
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <i>lat2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the latitude <i>lon2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the latitude <i>azi2</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <i>s12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.ReducedLength"/> for the reduced length <i>m12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.GeodesicScale"/> for the geodesic scales <i>M12</i> and <i>M21</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <i>S12</i>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <i>lon2</i> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            The values of <i>lon2</i> and <i>azi2</i> returned are in the range [−180°, 180°].
            <para>
            The <see cref="T:GeographicLib.IGeodesicLine"/> object must have been constructed with
            <i>caps</i> |= <see cref="F:GeographicLib.GeodesicFlags.DistanceIn"/>; otherwise <see cref="F:System.Double.NaN"/> is returned 
            and no parameters are set. Requesting a value which the <see cref="T:GeographicLib.IGeodesicLine"/> object is not capable
            of computing is not an error; the corresponding argument will not be altered.
            </para>
            </remarks>
        </member>
        <member name="T:GeographicLib.Intersect">
            <summary>
            Geodesic intersections
            </summary>
            <remarks>
            Find the intersections of two geodesics <i>X</i> and <i>Y</i>. Four calling sequences are supported.
            <list type="bullet">
            <item>
            The geodesics are defined by a position (latitude and longitude) and an azimuth.
            In this case the <b>closest</b> intersection is found.
            </item>
            <item>
            The geodesics are defined by two endpoints.
            The intersection of the two segments is found.
            It they don't intersect, the the closest intersection is returned.
            </item>
            <item>
            The geodesics are defined as an intersection point, a single position and two azimuths.
            In this case, the next closest intersection is found.
            </item>
            <item>The geodesics are defined as in the first case and all intersection within a specified distance are returned.</item>
            </list>
            In all cases the position of the intersection is given by
            the signed displacements <i>x</i> and <i>y</i> along the geodesics from the starting point
            (the first point in the case of a geodesic segment).
            The closest itersection is defined as the one that minimizes the L1 distance, Intersect.Dist([<i>x</i>, <i>y</i>) = |<i>x</i>| + |<i>y</i>|.
            <para>
            The routines also optionally return a coincidence indicator <i>c</i>.
            This is typically 0. However if the geodesics lie on top of one another at the point of intersection,
            then <i>c</i> is set to +1, if they are parallel, and −1, if they are antiparallel.
            </para>
            This solution for intersections is described in
            <list type="bullet">
            <item>
            C. F. F. Karney,
            <a href="https://arxiv.org/abs/2308.00495">Geodesic intersections</a>,
            Technical Report, SRI International(2023).
            <a href="https://arxiv.org/abs/2308.00495">arxiv:2308.00495</a>
            </item>
            </list>
            It is based on the work of
            <list type="bullet">
            <item>
            S. Baseldga and J. C. Martinez-Llario,
            <a href="https://doi.org/10.1007/s11200-017-1020-z">Intersection and point-to-line solutions for geodesics on the ellipsoid</a>,
            Stud. Geophys. Geod. 62, 353–363 (2018);
            DOI: <a href="https://doi.org/10.1007/s11200-017-1020-z">10.1007/s11200-017-1020-z</a>.
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:GeographicLib.Intersect.LineCaps">
            <summary>
            The minimum capabilities for <see cref="T:GeographicLib.GeodesicLine"/> objects which are passed to this class.
            </summary>
        </member>
        <member name="M:GeographicLib.Intersect.#ctor(GeographicLib.Geodesic)">
            <summary>
            Initializes a new instance of the <see cref="T:GeographicLib.AuxLatitude"/> class
            with the given <see cref="P:GeographicLib.Intersect.Geodesic"/> object. 
            </summary>
            <param name="geod">A <see cref="P:GeographicLib.Intersect.Geodesic"/> object. This sets the parameters a and f for the ellipsoid.</param>
            <remarks>
            This class has been validated for -1/4 ≤ <i>f</i> ≤ 1/5.
            It may give satisfactory results slightly outside this range;
            however sufficient far outside the range, some internal checks will fail and an exception thrown.
            <para>
            If |<i>f</i>| > 1/50, then the <see cref="P:GeographicLib.Intersect.Geodesic"/> object should be constructed with <i>exact</i> = <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Closest(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,GeographicLib.Point,System.Int32@)">
            <summary>
            Find the closest intersection point, with each geodesic specified by position and azimuth.
            </summary>
            <param name="latX">Latitude of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="lonX">Longitude of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="aziX">Azimuth of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="latY">Latitude of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="lonY">Longitude of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="aziY">Azimuth of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="p0">Offset for the starting points (meters).</param>
            <param name="c">Coincidence indicator.</param>
            <returns>
            <i>p</i>, the intersection point closest to <i>p0</i>.
            </returns>
            <remarks>
            The returned intersection minimizes Intersect.Dist(<i>p</i>, <i>p0</i>).
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Closest(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32@)">
            <summary>
            Find the closest intersection point, with each geodesic specified by position and azimuth.
            </summary>
            <param name="latX">Latitude of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="lonX">Longitude of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="aziX">Azimuth of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="latY">Latitude of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="lonY">Longitude of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="aziY">Azimuth of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="c">Coincidence indicator.</param>
            <returns>
            <i>p</i>, the intersection point closest to <i>p0</i>.
            </returns>
            <remarks>
            The returned intersection minimizes Intersect.Dist(<i>p</i>, <i>p0</i>).
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Closest(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,GeographicLib.Point)">
            <summary>
            Find the closest intersection point, with each geodesic specified by position and azimuth.
            </summary>
            <param name="latX">Latitude of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="lonX">Longitude of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="aziX">Azimuth of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="latY">Latitude of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="lonY">Longitude of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="aziY">Azimuth of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="p0">Offset for the starting points (meters), defaults to <see cref="F:GeographicLib.Point.Zero"/>.</param>
            <returns>
            <i>p</i>, the intersection point closest to <i>p0</i>.
            </returns>
            <remarks>
            The returned intersection minimizes Intersect.Dist(<i>p</i>, <i>p0</i>).
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Closest(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,GeographicLib.Point,System.Int32@)">
            <summary>
            Find the closest intersection point, with each geodesic specified by position and azimuth.
            </summary>
            <param name="lineX">Geodesic <i>X</i>.</param>
            <param name="lineY">Geodesic <i>Y</i></param>
            <param name="p0">Offset for the starting points (meters).</param>
            <param name="c">Coincidence indicator.</param>
            <returns>
            <i>p</i>, the intersection point closest to <i>p0</i>.
            </returns>
            <remarks>
            <paramref name="lineX"/> and <paramref name="lineY"/> should be created with
            minimum capabilities <see cref="F:GeographicLib.Intersect.LineCaps"/>.
            The methods for creating a <see cref="T:GeographicLib.IGeodesicLine"/> include all these capabilities by default.
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Closest(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,GeographicLib.Point)">
            <summary>
            Find the closest intersection point, with each geodesic specified by position and azimuth.
            </summary>
            <param name="lineX">Geodesic <i>X</i>.</param>
            <param name="lineY">Geodesic <i>Y</i></param>
            <param name="p0">Offset for the starting points (meters), defaults to <see cref="F:GeographicLib.Point.Zero"/>.</param>
            <returns>
            <i>p</i>, the intersection point closest to <i>p0</i>.
            </returns>
            <remarks>
            <paramref name="lineX"/> and <paramref name="lineY"/> should be created with
            minimum capabilities <see cref="F:GeographicLib.Intersect.LineCaps"/>.
            The methods for creating a <see cref="T:GeographicLib.IGeodesicLine"/> include all these capabilities by default.
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Closest(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,System.Int32@)">
            <summary>
            Find the closest intersection point, with each geodesic specified by position and azimuth.
            </summary>
            <param name="lineX">Geodesic <i>X</i>.</param>
            <param name="lineY">Geodesic <i>Y</i></param>
            <param name="c">Coincidence indicator.</param>
            <returns>
            <i>p</i>, the intersection point closest to <i>p0</i>.
            </returns>
            <remarks>
            <paramref name="lineX"/> and <paramref name="lineY"/> should be created with
            minimum capabilities <see cref="F:GeographicLib.Intersect.LineCaps"/>.
            The methods for creating a <see cref="T:GeographicLib.IGeodesicLine"/> include all these capabilities by default.
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Segment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32@,System.Int32@)">
            <summary>
            Find the intersection of two geodesic segments defined by their endpoints.
            </summary>
            <param name="latX1">Latitude of first point for segment <i>X</i> (degrees).</param>
            <param name="lonX1">Longitude of first point for segment <i>X</i> (degrees).</param>
            <param name="latX2">Latitude of second point for segment <i>X</i> (degrees).</param>
            <param name="lonX2">Longitude of second point for segment <i>X</i> (degrees).</param>
            <param name="latY1">Latitude of first point for segment <i>Y</i> (degrees).</param>
            <param name="lonY1">Longitude of first point for segment <i>Y</i> (degrees).</param>
            <param name="latY2">Latitude of second point for segment <i>Y</i> (degrees).</param>
            <param name="lonY2">Longitude of second point for segment <i>Y</i> (degrees).</param>
            <param name="segmode">An indicator equal to zero if the segments intersect.</param>
            <param name="c">Coincidence indicator.</param>
            <returns>
            <i>p</i>, the intersection point if the segments intersect, otherwise the intersection point closest to the midpoints of the two segments.
            </returns>
            <remarks>
            The results are only well defined if there's a <i>unique</i> shortest geodesic between the endpoints of the two segments.
            <para>
            <paramref name="segmode"/> codes up information about the closest intersection in the case where the segments intersect.
            Let <i>x12</i> be the length of the segment <i>X</i> and <i>x</i> = <i>p</i>.X, the position of the intersection on segment <i>X</i>. Define
            <list type="bullet">
            <item><i>kx</i> = −1, if <i>x</i> &lt; 0,</item>
            <item><i>kx</i> = 0, if 0 ≤ <i>x</i> ≤ <i>x12</i>,</item>
            <item><i>kx</i> = 1, if <i>x12</i> &lt; <i>x</i>.</item>
            </list>
            and similarly for segment <i>Y</i>. Then <paramref name="segmode"/> = 3 <i>kx</i> + <i>ky</i>.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Segment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32@)">
            <summary>
            Find the intersection of two geodesic segments defined by their endpoints.
            </summary>
            <param name="latX1">Latitude of first point for segment <i>X</i> (degrees).</param>
            <param name="lonX1">Longitude of first point for segment <i>X</i> (degrees).</param>
            <param name="latX2">Latitude of second point for segment <i>X</i> (degrees).</param>
            <param name="lonX2">Longitude of second point for segment <i>X</i> (degrees).</param>
            <param name="latY1">Latitude of first point for segment <i>Y</i> (degrees).</param>
            <param name="lonY1">Longitude of first point for segment <i>Y</i> (degrees).</param>
            <param name="latY2">Latitude of second point for segment <i>Y</i> (degrees).</param>
            <param name="lonY2">Longitude of second point for segment <i>Y</i> (degrees).</param>
            <param name="segmode">An indicator equal to zero if the segments intersect.</param>
            <returns>
            <i>p</i>, the intersection point if the segments intersect, otherwise the intersection point closest to the midpoints of the two segments.
            </returns>
            <remarks>
            The results are only well defined if there's a <i>unique</i> shortest geodesic between the endpoints of the two segments.
            <para>
            <paramref name="segmode"/> codes up information about the closest intersection in the case where the segments intersect.
            Let <i>x12</i> be the length of the segment <i>X</i> and <i>x</i> = <i>p</i>.X, the position of the intersection on segment <i>X</i>. Define
            <list type="bullet">
            <item><i>kx</i> = −1, if <i>x</i> &lt; 0,</item>
            <item><i>kx</i> = 0, if 0 ≤ <i>x</i> ≤ <i>x12</i>,</item>
            <item><i>kx</i> = 1, if <i>x12</i> &lt; <i>x</i>.</item>
            </list>
            and similarly for segment <i>Y</i>. Then <paramref name="segmode"/> = 3 <i>kx</i> + <i>ky</i>.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Segment(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,System.Int32@,System.Int32@)">
            <summary>
            Find the intersection of two geodesic segments each defined by a <see cref="T:GeographicLib.IGeodesicLine"/>.
            </summary>
            <param name="lineX">Segment <i>X</i>.</param>
            <param name="lineY">Segment <i>Y</i></param>
            <param name="segmode">An indicator equal to zero if the segments intersect.</param>
            <param name="c">Coincidence indicator.</param>
            <returns>
            <i>p</i>, the intersection point if the segments intersect, otherwise the intersection point closest to the midpoints of the two segments.
            </returns>
            <remarks>
            <paramref name="lineX"/> and <paramref name="lineY"/> must represent shortest geodesics,
            e.g., they can be created by <see cref="M:GeographicLib.Geodesic.InverseLine(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)"/>. 
            The results are only well defined if there's a <i>unique</i> shortest geodesic between the endpoints of the two segments.
            <para>
            <paramref name="lineX"/> and <paramref name="lineY"/> should be created with minimum capabilities <see cref="F:GeographicLib.Intersect.LineCaps"/>.
            The methods for creating a <see cref="T:GeographicLib.IGeodesicLine"/> include all these capabilities by default.
            </para>
            <para>
            <paramref name="segmode"/> codes up information about the closest intersection in the case where the segments intersect.
            Let <i>x12</i> be the length of the segment <i>X</i> and <i>x</i> = <i>p</i>.X, the position of the intersection on segment <i>X</i>. Define
            <list type="bullet">
            <item><i>kx</i> = −1, if <i>x</i> &lt; 0,</item>
            <item><i>kx</i> = 0, if 0 ≤ <i>x</i> ≤ <i>x12</i>,</item>
            <item><i>kx</i> = 1, if <i>x12</i> &lt; <i>x</i>.</item>
            </list>
            and similarly for segment <i>Y</i>. Then <paramref name="segmode"/> = 3 <i>kx</i> + <i>ky</i>.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Next(System.Double,System.Double,System.Double,System.Double,System.Int32@)">
            <summary>
            Find the next closest intersection point to a given intersection, specified by position and two azimuths.
            </summary>
            <param name="latX">Latitude of starting points for geodesics <i>X</i> and <i>Y</i> (degrees).</param>
            <param name="lonX">Longitude of starting points for geodesics <i>X</i> and <i>Y</i> (degrees).</param>
            <param name="aziX">Azimuth at starting point for geodesic <i>X</i> (degrees).</param>
            <param name="aziY">Azimuth at starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="c">Coincidence indicator.</param>
            <returns>
            <i>p</i>, the next closest intersection point.
            </returns>
            <remarks>
            The returned intersection minimizes Intersect.Dist(<i>p</i>) (excluding <i>p</i> = [0,0]).
            <para>
            Equidistant closest intersections are surprisingly common.
            If this may be a problem, use <see cref="M:GeographicLib.Intersect.All(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32[]@,GeographicLib.Point)"/> with a sufficiently large <i>maxdist</i> to capture close intersections.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Next(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Find the next closest intersection point to a given intersection, specified by position and two azimuths.
            </summary>
            <param name="latX">Latitude of starting points for geodesics <i>X</i> and <i>Y</i> (degrees).</param>
            <param name="lonX">Longitude of starting points for geodesics <i>X</i> and <i>Y</i> (degrees).</param>
            <param name="aziX">Azimuth at starting point for geodesic <i>X</i> (degrees).</param>
            <param name="aziY">Azimuth at starting point for geodesic <i>Y</i> (degrees).</param>
            <returns>
            <i>p</i>, the next closest intersection point.
            </returns>
            <remarks>
            The returned intersection minimizes Intersect.Dist(<i>p</i>) (excluding <i>p</i> = [0,0]).
            <para>
            Equidistant closest intersections are surprisingly common.
            If this may be a problem, use <see cref="M:GeographicLib.Intersect.All(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,GeographicLib.Point)"/> with a sufficiently large <i>maxdist</i> to capture close intersections.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Next(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,System.Int32@)">
            <summary>
            Find the next closest intersection point to a given intersection, with each geodesic specified a <see cref="T:GeographicLib.IGeodesicLine"/>.
            </summary>
            <param name="lineX">Geodesic <i>X</i>.</param>
            <param name="lineY">Geodesic <i>Y</i>.</param>
            <param name="c">Coincidence indicator.</param>
            <returns>
            <i>p</i>, the next closest intersection point.
            </returns>
            <remarks>
            <paramref name="lineX"/> and <paramref name="lineY"/> must both have the same starting point,
            i.e., the distance between [<paramref name="lineX"/>.Latitude, <paramref name="lineX"/>.Longitude]
            and [<paramref name="lineY"/>.Latitude, <paramref name="lineY"/>.Longitude] must be zero.
            <para>
            <paramref name="lineX"/> and <paramref name="lineY"/> should be created with minimum capabilities <see cref="F:GeographicLib.Intersect.LineCaps"/>.
            The methods for creating a <see cref="T:GeographicLib.IGeodesicLine"/> include all these capabilities by default.
            </para>
            <para>
            Equidistant closest intersections are surprisingly common.
            If this may be a problem, use <see cref="M:GeographicLib.Intersect.All(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,System.Double,System.Int32[]@,GeographicLib.Point)"/> with a sufficiently large <i>maxdist</i> to capture close intersections.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Next(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine)">
            <summary>
            Find the next closest intersection point to a given intersection, with each geodesic specified a <see cref="T:GeographicLib.IGeodesicLine"/>.
            </summary>
            <param name="lineX">Geodesic <i>X</i>.</param>
            <param name="lineY">Geodesic <i>Y</i>.</param>
            <returns>
            <i>p</i>, the next closest intersection point.
            </returns>
            <remarks>
            <paramref name="lineX"/> and <paramref name="lineY"/> must both have the same starting point,
            i.e., the distance between [<paramref name="lineX"/>.Latitude, <paramref name="lineX"/>.Longitude]
            and [<paramref name="lineY"/>.Latitude, <paramref name="lineY"/>.Longitude] must be zero.
            <para>
            <paramref name="lineX"/> and <paramref name="lineY"/> should be created with minimum capabilities <see cref="F:GeographicLib.Intersect.LineCaps"/>.
            The methods for creating a <see cref="T:GeographicLib.IGeodesicLine"/> include all these capabilities by default.
            </para>
            <para>
            Equidistant closest intersections are surprisingly common.
            If this may be a problem, use <see cref="M:GeographicLib.Intersect.All(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,System.Double,GeographicLib.Point)"/> with a sufficiently large <i>maxdist</i> to capture close intersections.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.All(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32[]@,GeographicLib.Point)">
            <summary>
            Find all intersections within a certain distance, with each geodesic specified by position and azimuth.
            </summary>
            <param name="latX">Latitude of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="lonX">Longitude of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="aziX">Azimuth of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="latY">Latitude of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="lonY">Longitude of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="aziY">Azimuth of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="maxdist">The maximum distance for the returned intersections (meters).</param>
            <param name="c">Vector of coincidences.</param>
            <param name="p0">Offset for the starting points (meters), default = [0,0].</param>
            <returns>A vector for the intersections closest to <i>p0</i>.</returns>
            <remarks>
            Each intersection point satisfies Intersect.Dist(<i>p</i>, <i>p0</i>) ≤ <i>maxdist</i>.
            The vector of returned intersections is sorted on the distance from <i>p0</i>.
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.All(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,GeographicLib.Point)">
            <summary>
            Find all intersections within a certain distance, with each geodesic specified by position and azimuth.
            Don't return vector of coincidences.
            </summary>
            <param name="latX">Latitude of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="lonX">Longitude of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="aziX">Azimuth of starting point for geodesic <i>X</i> (degrees).</param>
            <param name="latY">Latitude of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="lonY">Longitude of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="aziY">Azimuth of starting point for geodesic <i>Y</i> (degrees).</param>
            <param name="maxdist">The maximum distance for the returned intersections (meters).</param>
            <param name="p0">Offset for the starting points (meters), default = [0,0].</param>
            <returns>A vector for the intersections closest to <i>p0</i>.</returns>
            <remarks>
            Each intersection point satisfies Intersect.Dist(<i>p</i>, <i>p0</i>) ≤ <i>maxdist</i>.
            The vector of returned intersections is sorted on the distance from <i>p0</i>.
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.All(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,System.Double,System.Int32[]@,GeographicLib.Point)">
            <summary>
            Find all intersections within a certain distance, with each geodesic specified by position and azimuth.
            </summary>
            <param name="lineX">Geodesic <i>X</i>.</param>
            <param name="lineY">Geodesic <i>Y</i>.</param>
            <param name="maxdist">The maximum distance for the returned intersections (meters).</param>
            <param name="c">Vector of coincidences.</param>
            <param name="p0">Offset for the starting points (meters), default = [0,0].</param>
            <returns>A vector for the intersections closest to <i>p0</i>.</returns>
            <remarks>
            Each intersection point satisfies Intersect.Dist(<i>p</i>, <i>p0</i>) ≤ <i>maxdist</i>.
            The vector of returned intersections is sorted on the distance from <i>p0</i>.
            <para>
            <paramref name="lineX"/> and <paramref name="lineY"/> should be created with minimum capabilities <see cref="F:GeographicLib.Intersect.LineCaps"/>.
            The methods for creating a <see cref="T:GeographicLib.IGeodesicLine"/> include all these capabilities by default.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.All(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,System.Double,GeographicLib.Point)">
            <summary>
            Find all intersections within a certain distance, with each geodesic specified by position and azimuth.
            Don't return vector of coincidences.
            </summary>
            <param name="lineX">Geodesic <i>X</i>.</param>
            <param name="lineY">Geodesic <i>Y</i>.</param>
            <param name="maxdist">The maximum distance for the returned intersections (meters).</param>
            <param name="p0">Offset for the starting points (meters), default = [0,0].</param>
            <returns>A vector for the intersections closest to <i>p0</i>.</returns>
            <remarks>
            Each intersection point satisfies Intersect.Dist(<i>p</i>, <i>p0</i>) ≤ <i>maxdist</i>.
            The vector of returned intersections is sorted on the distance from <i>p0</i>.
            <para>
            <paramref name="lineX"/> and <paramref name="lineY"/> should be created with minimum capabilities <see cref="F:GeographicLib.Intersect.LineCaps"/>.
            The methods for creating a <see cref="T:GeographicLib.IGeodesicLine"/> include all these capabilities by default.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Dist(GeographicLib.Point,GeographicLib.Point)">
            <summary>
            The L1 distance.
            </summary>
            <param name="p">The position along geodesics <i>X</i> and <i>Y</i>.</param>
            <param name="p0">The reference position, default = [0, 0].</param>
            <returns>
            The L1 distance of <i>p</i> from <i>p0</i>, i.e., |<i>px</i> − <i>p0x</i>| + |<i>py</i> − <i>p0y</i>|.
            </returns>
        </member>
        <member name="P:GeographicLib.Intersect.Geodesic">
            <summary>
            The <see cref="P:GeographicLib.Intersect.Geodesic"/> object used in the constructor.
            </summary>
            <remarks>
            This can be used to query <see cref="P:GeographicLib.Geodesic.EquatorialRadius"/>,
            <see cref="P:GeographicLib.Geodesic.Flattening"/>, <see cref="P:GeographicLib.Geodesic.IsExact"/>,
            and <see cref="P:GeographicLib.Geodesic.EllipsoidArea"/>.
            </remarks>
        </member>
        <member name="P:GeographicLib.Intersect.NumInverse">
            <summary>
            The cumulative number of invocations of <b>h</b>.
            </summary>
            <remarks>
            This is a count of the number of times the spherical triangle needs to be solved.
            Each involves a call to Geodesic.GenInverse
            and this is a good metric for the overall cost. This counter is set to zero by the constructor.
            <para>
            The counter is a mutable variable and so is not thread safe.
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.Intersect.NumBasic">
            <summary>
            The cumulative number of invocations of <b>b</b>.
            </summary>
            <remarks>
            This is a count of the number of invocations of the basic algorithm, which is used by all the intersection methods.
            This counter is set to zero by the constructor.
            <para>
            The counter is a mutable variable and so is not thread safe.
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.Intersect.NumChange">
            <summary>
            The number of times intersection point was changed in Intersect.Closest and Intersect.Next.
            </summary>
            <remarks>
            If this counter is incremented by just 1 in Intersect.Closest,
            then the initial result of the basic algorithm was eventually accepted.
            This counter is set to zero by the constructor.
            <para>
            This counter is also incremented by Intersect.Segment, which calls Intersect.Closest.
            </para>
            <para>
            The counter is a mutable variable and so is not thread safe.
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.Intersect.NumCorner">
            <summary>
            The number of times a corner point is checked in Intersect.Segment.
            </summary>
            <remarks>
            This counter is set to zero by the constructor.
            <para>
            The counter is a mutable variable and so is not thread safe.
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.Intersect.NumOverride">
            <summary>
            The number of times a corner point is returned by Intersect.Segment.
            </summary>
            <remarks>
            This counter is set to zero by the constructor.
            <para>
            A conjecture is that a corner point never results in an intersection that
            overrides the intersection closest to the midpoints of the segments; i.e., <see cref="P:GeographicLib.Intersect.NumCorner"/> always returns 0.
            </para>
            <para>
            The counter is a mutable variable and so is not thread safe.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Intersect.Spherical(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,GeographicLib.Intersect.XPoint)">
            <summary>
            The spherical solution
            </summary>
            <param name="lineX"></param>
            <param name="lineY"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Intersect.Basic(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,GeographicLib.Intersect.XPoint)">
            <summary>
            The basic algorithm
            </summary>
            <param name="lineX"></param>
            <param name="lineY"></param>
            <param name="p0"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Intersect.ClosestInt(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,GeographicLib.Intersect.XPoint)">
            <summary>
            The closest intersecton
            </summary>
            <param name="lineX"></param>
            <param name="lineY"></param>
            <param name="p0"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Intersect.NextInt(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine)">
            <summary>
            The next intersecton
            </summary>
            <param name="lineX"></param>
            <param name="lineY"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Intersect.SegmentInt(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,System.Int32@)">
            <summary>
            Segment intersecton
            </summary>
            <param name="lineX"></param>
            <param name="lineY"></param>
            <param name="segmode"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Intersect.AllInt0(GeographicLib.IGeodesicLine,GeographicLib.IGeodesicLine,System.Double,GeographicLib.Intersect.XPoint)">
            <summary>
            All intersectons
            </summary>
            <param name="lineX"></param>
            <param name="lineY"></param>
            <param name="maxdist"></param>
            <param name="p0"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Intersect.ConjugateDist(GeographicLib.IGeodesicLine,System.Double,System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
             Find {semi-,}conjugate point which is close to s3.  Optional m12, M12,
            M21 use {semi-,}conjugacy relative to point 2
            </summary>
            <param name="line"></param>
            <param name="s3"></param>
            <param name="semi"></param>
            <param name="m12"></param>
            <param name="M12"></param>
            <param name="M21"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Intersect.fixcoincident(GeographicLib.Intersect.XPoint,GeographicLib.Intersect.XPoint)">
            <summary>
            p is intersection point on coincident lines orientation = c; p0 is
            origin point.  Change p to center point wrt p0, i.e, abs((p-p0)_x) =
            abs((p-p0)_y)
            </summary>
            <param name="p0"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:GeographicLib.IPolygonArea">
            <summary>
            Computes polygon areas.
            </summary>
        </member>
        <member name="P:GeographicLib.IPolygonArea.Count">
            <summary>
            Report the number of points currently in the polygon or polyline.
            </summary>
            <remarks>
            If no points have been added, then 0 is returned.
            </remarks>
        </member>
        <member name="P:GeographicLib.IPolygonArea.IsPolyline">
            <summary>
            Report whether the current object is a polygon or a polyline.
            </summary>
        </member>
        <member name="P:GeographicLib.IPolygonArea.CurrentPoint">
            <summary>
            Gets a value representing the previous vertex added to the polygon or polyline.
            </summary>
            <remarks>
            If no points have been added, then <see cref="F:System.Double.NaN"/>s are returned. Otherwise, <i>lon</i> will be in the range [−180°, 180°].
            </remarks>
        </member>
        <member name="M:GeographicLib.IPolygonArea.AddEdge(System.Double,System.Double)">
            <summary>
            Add an edge to the polygon or polyline.
            </summary>
            <param name="azi">azimuth at current point (degrees).</param>
            <param name="s">distance from current point to next point (meters).</param>
            <remarks>
            This does nothing if no points have been added yet.
            Use <see cref="P:GeographicLib.IPolygonArea.CurrentPoint"/> to determine the position of the new vertex.
            </remarks>
        </member>
        <member name="M:GeographicLib.IPolygonArea.AddPoint(System.Double,System.Double)">
            <summary>
            Add a point to the polygon or polyline.
            </summary>
            <param name="lat">the latitude of the point (degrees).</param>
            <param name="lon">the longitude of the point (degrees).</param>
            <remarks>
            <paramref name="lat"/> should be in the range [−90°, 90°].
            </remarks>
        </member>
        <member name="M:GeographicLib.IPolygonArea.AddPoint(GeographicLib.GeoCoords)">
            <summary>
            Add a point to the polygon or polyline.
            </summary>
            <param name="coords">point to add.</param>
        </member>
        <member name="M:GeographicLib.IPolygonArea.AddPoints(System.Collections.Generic.IEnumerable{GeographicLib.GeoCoords})">
            <summary>
            Add points to the polygon or polyline.
            </summary>
            <param name="coords">points to add.</param>
        </member>
        <member name="M:GeographicLib.IPolygonArea.Clear">
            <summary>
            Clear current instance of <see cref="T:GeographicLib.PolygonArea`1"/>, allowing a new polygon to be started.
            </summary>
        </member>
        <member name="M:GeographicLib.IPolygonArea.Compute(System.Boolean,System.Boolean)">
            <summary>
            Return the results so far.
            </summary>
            <param name="reverse">if <see langword="true"/> then clockwise (instead of counter-clockwise) traversal counts as a positive area.</param>
            <param name="sign">if <see langword="true"/> then return a signed result for the area if the polygon is traversed in the "wrong" direction
            instead of returning the area for the rest of the earth.</param>
            <returns>
            <list type="bullet">
            <item>
            <i>points</i>, the number of points.
            </item>
            <item>
            <i>perimeter</i>, the perimeter of the polygon or length of the polyline (meters).
            </item>
            <item>
            <i>area</i>, the area of the polygon (meters^2); only set if polyline is <see langword="false"/> in the constructor.
            </item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.IPolygonArea.TestEdge(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Return the results assuming a tentative final test point is added via an azimuth and distance;
            however, the data for the test point is not saved.
            This lets you report a running result for the perimeter and area as the user moves the mouse cursor.
            Ordinary floating point arithmetic is used to accumulate the data for the test point;
            thus the area and perimeter returned are less accurate than if
            <see cref="M:GeographicLib.IPolygonArea.AddEdge(System.Double,System.Double)"/> and <see cref="M:GeographicLib.IPolygonArea.Compute(System.Boolean,System.Boolean)"/> are used.
            </summary>
            <param name="azi">azimuth at current point (degrees).</param>
            <param name="s">distance from current point to final test point (meters).</param>
            <param name="reverse">if <see langword="true"/> then clockwise (instead of counter-clockwise) traversal counts as a positive area.</param>
            <param name="sign">if <see langword="true"/> then return a signed result for the area if the polygon is traversed in the "wrong" direction
            instead of returning the area for the rest of the earth.</param>
            <returns>
            <list type="bullet">
            <item>
            <i>points</i>, the number of points.
            </item>
            <item>
            <i>perimeter</i>, the perimeter of the polygon or length of the polyline (meters).
            </item>
            <item>
            <i>area</i>, the area of the polygon (meters^2); only set if polyline is <see langword="false"/> in the constructor.
            </item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.IPolygonArea.TestPoint(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Return the results assuming a tentative final test point is added; however, the data for the test point is not saved.
            This lets you report a running result for the perimeter and area as the user moves the mouse cursor.
            Ordinary floating point arithmetic is used to accumulate the data for the test point;
            thus the area and perimeter returned are less accurate than if
            <see cref="M:GeographicLib.IPolygonArea.AddPoint(System.Double,System.Double)"/> and <see cref="M:GeographicLib.IPolygonArea.Compute(System.Boolean,System.Boolean)"/> are used.
            </summary>
            <param name="lat">the latitude of the test point (degrees).</param>
            <param name="lon">the longitude of the test point (degrees).</param>
            <param name="reverse">if <see langword="true"/> then clockwise (instead of counter-clockwise) traversal counts as a positive area.</param>
            <param name="sign">if <see langword="true"/> then return a signed result for the area if the polygon is traversed in the "wrong" direction
            instead of returning the area for the rest of the earth.</param>
            <returns>
            <list type="bullet">
            <item>
            <i>points</i>, the number of points.
            </item>
            <item>
            <i>perimeter</i>, the perimeter of the polygon or length of the polyline (meters).
            </item>
            <item>
            <i>area</i>, the area of the polygon (meters^2); only set if polyline is <see langword="false"/> in the constructor.
            </item>
            </list>
            </returns>
            <remarks>
            <paramref name="lat"/> should be in the range [−90°, 90°].
            </remarks>
        </member>
        <member name="M:GeographicLib.IPolygonArea.TestPoint(GeographicLib.GeoCoords,System.Boolean,System.Boolean)">
            <summary>
            Return the results assuming a tentative final test point is added; however, the data for the test point is not saved.
            This lets you report a running result for the perimeter and area as the user moves the mouse cursor.
            Ordinary floating point arithmetic is used to accumulate the data for the test point;
            thus the area and perimeter returned are less accurate than if
            <see cref="M:GeographicLib.IPolygonArea.AddPoint(GeographicLib.GeoCoords)"/> and <see cref="M:GeographicLib.IPolygonArea.Compute(System.Boolean,System.Boolean)"/> are used.
            </summary>
            <param name="coords">point to test.</param>
            <param name="reverse">if <see langword="true"/> then clockwise (instead of counter-clockwise) traversal counts as a positive area.</param>
            <param name="sign">if <see langword="true"/> then return a signed result for the area if the polygon is traversed in the "wrong" direction
            instead of returning the area for the rest of the earth.</param>
            <returns>
            <list type="bullet">
            <item>
            <i>points</i>, the number of points.
            </item>
            <item>
            <i>perimeter</i>, the perimeter of the polygon or length of the polyline (meters).
            </item>
            <item>
            <i>area</i>, the area of the polygon (meters^2); only set if polyline is <see langword="false"/> in the constructor.
            </item>
            </list>
            </returns>
        </member>
        <member name="T:GeographicLib.LocalCartesian">
            <summary>
            Local cartesian coordinates.
            </summary>
            <remarks>
            Convert between geodetic coordinates latitude = <i>lat</i>, longitude = <i>lon</i>, height = <i>h</i>
            (measured vertically from the surface of the ellipsoid) to local cartesian coordinates (<i>x</i>, <i>y</i>, <i>z</i>).
            The origin of local cartesian coordinate system is at <i>lat</i> = <i>lat0</i>, <i>lon</i> = <i>lon0</i>, <i>h</i> = <i>h0</i>.
            The <i>z</i> axis is normal to the ellipsoid; the <i>y</i> axis points due north. The plane <i>z</i> = - <i>h0</i> is tangent to the ellipsoid.
            <para>
            The conversions all take place via geocentric coordinates using a <see cref="T:GeographicLib.Geocentric"/> object (by default <see cref="P:GeographicLib.Geocentric.WGS84"/>).
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.LocalCartesian.#ctor(System.Double,System.Double,System.Double,GeographicLib.Geocentric)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.LocalCartesian"/> instance with specified origin.
            </summary>
            <param name="lat0">latitude at origin (degrees).</param>
            <param name="lon0">longitude at origin (degrees).</param>
            <param name="h0">height above ellipsoid at origin (meters); default 0.</param>
            <param name="earth"><see cref="T:GeographicLib.Geocentric"/> object for the transformation; default <see cref="P:GeographicLib.Geocentric.WGS84"/>.</param>
            <remarks>
            <paramref name="lat0"/> should be in the range [−90°, 90°].
            </remarks>
        </member>
        <member name="M:GeographicLib.LocalCartesian.#ctor(GeographicLib.Geocentric)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.LocalCartesian"/> instance.
            </summary>
            <param name="earth"><see cref="T:GeographicLib.Geocentric"/> object for the transformation; default <see cref="P:GeographicLib.Geocentric.WGS84"/>.</param>
        </member>
        <member name="M:GeographicLib.LocalCartesian.Reset(System.Double,System.Double,System.Double)">
            <summary>
            Reset the origin.
            </summary>
            <param name="lat0">latitude at origin (degrees).</param>
            <param name="lon0">longitude at origin (degrees).</param>
            <param name="h0">height above ellipsoid at origin (meters); default 0.</param>
            <remarks>
            <paramref name="lat0"/> should be in the range [−90°, 90°].
            </remarks>
        </member>
        <member name="M:GeographicLib.LocalCartesian.Forward(System.Double,System.Double,System.Double,System.Span{System.Double})">
            <summary>
            Convert from geodetic to local cartesian coordinates and return rotation matrix.
            </summary>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="h">height of point above the ellipsoid (meters).</param>
            <param name="M">if the length of the vector is 9, fill with the rotation matrix in row-major order.</param>
            <returns>
            local cartesian coordinate (meters).
            </returns>
            <remarks>
            <paramref name="lat"/> should be in the range [−90°, 90°].
            <para>
            Let <i>v</i> be a unit vector located at (<paramref name="lat"/>, <paramref name="lon"/>, <paramref name="h"/>).
            We can express <i>v</i> as column vectors in one of two ways
            <list type="bullet">
            <item>
            in east, north, up coordinates (where the components are relative to a local coordinate system at 
            (<paramref name="lat"/>, <paramref name="lon"/>, <paramref name="h"/>)); call this representation <i>v1</i>.
            </item>
            <item>
            in <i>x</i>, <i>y</i>, <i>z</i> coordinates (where the components are relative to the local coordinate system at
            (<i>lat0</i>, <i>lon0</i>, <i>h0</i>)); call this representation <i>v0</i>.
            </item>
            </list>
            Then we have <i>v0</i> = <paramref name="M"/> ⋅ <i>v1</i>.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.LocalCartesian.Reverse(System.Double,System.Double,System.Double,System.Span{System.Double})">
            <summary>
            Convert from local cartesian to geodetic coordinates.
            </summary>
            <param name="x"><i>x</i> component of local cartesian coordinate (meters).</param>
            <param name="y"><i>y</i> component of local cartesian coordinate (meters).</param>
            <param name="z"><i>z</i> component of local cartesian coordinate (meters).</param>
            <param name="M">if the length of the vector is 9, fill with the rotation matrix in row-major order.</param>
            <returns>
            <list type="bullet">
            <item><i>lat</i>, latitude of point (degrees).</item>
            <item><i>lon</i>, longitude of point (degrees).</item>
            <item><i>h</i>, height of point above the ellipsoid (meters).</item>
            </list>
            </returns>
            <remarks>
            In general, there are multiple solutions and the result which minimizes |<i>h</i> |is returned, i.e., (<i>lat</i>, <i>lon</i>) corresponds
            to the closest point on the ellipsoid. The value of lon returned is in the range [−180°, 180°].
            <para>
            Let <i>v</i> be a unit vector located at (<i>lat</i>, <i>lon</i>, <i>h</i>).
            We can express <i>v</i> as column vectors in one of two ways
            <list type="bullet">
            <item>
            in east, north, up coordinates (where the components are relative to a local coordinate system at 
            (<i>lat</i>, <i>lon</i>, <i>h</i>)); call this representation <i>v1</i>.
            </item>
            <item>
            in <i>x</i>, <i>y</i>, <i>z</i> coordinates (where the components are relative to the local coordinate system at
            (<i>lat0</i>, <i>lon0</i>, <i>h0</i>)); call this representation <i>v0</i>.
            </item>
            </list>
            Then we have <i>v1</i> = <paramref name="M"/>t ⋅ <i>v0</i>, where <paramref name="M"/>t is the transpose of <paramref name="M"/>.
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.LocalCartesian.LatitudeOrigin">
            <summary>
            Gets a values representing latitude of the origin in degrees.
            </summary>
        </member>
        <member name="P:GeographicLib.LocalCartesian.LongitudeOrigin">
            <summary>
            Gets a values representing longitude of the origin in degrees.
            </summary>
        </member>
        <member name="P:GeographicLib.LocalCartesian.HeightOrigin">
            <summary>
            Gets a values representing height of the origin in meters.
            </summary>
        </member>
        <member name="P:GeographicLib.LocalCartesian.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.LocalCartesian.Flattening">
            <inheritdoc/>
        </member>
        <member name="F:GeographicLib.Macros.GEOGRAPHICLIB_PRECISION">
            <summary>
            The precision of floating point numbers used in %GeographicLib.  1 means
            float (single precision); 2 (the default) means double; 3 means long double;
            4 is reserved for quadruple precision.  Nearly all the testing has been
            carried out with doubles and that's the recommended configuration.  In order
            for long double to be used, GEOGRAPHICLIB_HAVE_LONG_DOUBLE needs to be
            defined.  Note that with Microsoft Visual Studio, long double is the same as
            double.
            </summary>
        </member>
        <member name="F:GeographicLib.Macros.GEOGRAPHICLIB_RHUMBAREA_ORDER">
            <summary>
            The order of the series approximation used in rhumb area calculations.
            <see cref="F:GeographicLib.Macros.GEOGRAPHICLIB_RHUMBAREA_ORDER"/> can be set to one of [4, 5, 6, 7, 8].
            </summary>
        </member>
        <member name="F:GeographicLib.Macros.GEOGRAPHICLIB_GEODESIC_ORDER">
            <summary>
            The order of the expansions used by Geodesic. GEOGRAPHICLIB_GEODESIC_ORDER can be set to any integer in [3, 8].
            </summary>
        </member>
        <member name="F:GeographicLib.Macros.GEOGRAPHICLIB_GEOID_PGM_PIXEL_WIDTH">
            <summary>
            The size of the pixel data in the pgm data files for the geoids.  2 is the
            standard size corresponding to a maxval 2^16-1.  Setting it
            to 4 uses a maxval of 2^32-1 and changes the extension for
            the data files from.pgm to.pgm4.Note that the format of these pgm4 files
            is a non-standard extension of the pgm format.
            </summary>
        </member>
        <member name="F:GeographicLib.Macros.GEOGRAPHICLIB_AUXLATITUDE_ORDER">
            <summary>
            The order of the series approximation used in AuxLatitude.
            GEOGRAPHICLIB_AUXLATITUDE_ORDER can be set to one of[4, 6, 8].  Use order
            appropriate for double precision, 6, also for GEOGRAPHICLIB_PRECISION == 5
            to enable truncation errors to be measured easily.
            </summary>
        </member>
        <member name="T:GeographicLib.MagneticCircle">
            <summary>
            Geomagnetic field on a circle of latitude.
            </summary>
            <remarks>
            Evaluate the earth's magnetic field on a circle of constant height and latitude.
            This uses a <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> to pre-evaluate the inner sum of the spherical harmonic sum,
            allowing the values of the field at several different longitudes to be evaluated rapidly.
            <para>
            Use <see cref="M:GeographicLib.MagneticModel.Circle(System.Double,System.Double,System.Double)"/>  to create a <see cref="T:GeographicLib.MagneticCircle"/> object. (The constructor for this class is private.)
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.MagneticCircle.Evaluate(System.Double)">
            <summary>
            Evaluate the components of the geomagnetic field at a particular longitude.
            </summary>
            <param name="lon">longitude of the point (degrees).</param>
            <returns>
            <list type="bullet">
            <item><i>Bx</i>, the easterly component of the magnetic field (nanotesla).</item>
            <item><i>By</i>, the northerly component of the magnetic field (nanotesla).</item>
            <item><i>Bz</i>, the vertical (up) component of the magnetic field (nanotesla).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.MagneticCircle.Evaluate(System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Evaluate the components of the geomagnetic field and their time derivatives at a particular longitude.
            </summary>
            <param name="lon">longitude of the point (degrees).</param>
            <param name="Bxt">the rate of change of <i>Bx</i> (nT/yr).</param>
            <param name="Byt">the rate of change of <i>By</i> (nT/yr).</param>
            <param name="Bzt">the rate of change of <i>Bz</i> (nT/yr).</param>
            <returns>
            <list type="bullet">
            <item><i>Bx</i>, the easterly component of the magnetic field (nanotesla).</item>
            <item><i>By</i>, the northerly component of the magnetic field (nanotesla).</item>
            <item><i>Bz</i>, the vertical (up) component of the magnetic field (nanotesla).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.MagneticCircle.FieldGeocentric(System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Evaluate the components of the geomagnetic field and their time derivatives at a particular longitude.
            </summary>
            <param name="lon">longitude of the point (degrees).</param>
            <param name="BXt">the rate of change of <i>BX</i> (nT/yr).</param>
            <param name="BYt">the rate of change of <i>BY</i> (nT/yr).</param>
            <param name="BZt">the rate of change of <i>BZ</i> (nT/yr).</param>
            <returns>
            <list type="bullet">
            <item><i>BX</i>, the <i>X</i> component of the magnetic field (nanotesla).</item>
            <item><i>BY</i>, the <i>Y</i> component of the magnetic field (nanotesla).</item>
            <item><i>BZ</i>, the <i>Z</i> component of the magnetic field (nanotesla).</item>
            </list>
            </returns>
        </member>
        <member name="P:GeographicLib.MagneticCircle.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius (<i>a</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticCircle.Flattening">
            <summary>
            Gets a value representing the flattening (<i>f</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticCircle.Latitude">
            <summary>
            Gets a value representing the latitude of the circle (degrees).
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticCircle.Height">
            <summary>
            Gets a value representing the height of the circle (meters).
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticCircle.Time">
            <summary>
            Gets a value representing the time (fractional years).
            </summary>
        </member>
        <member name="T:GeographicLib.MagneticModel">
            <summary>
            Model of the earth's magnetic field. 
            </summary>
            <remarks>
            Evaluate the earth's magnetic field according to a model. 
            At present only internal magnetic fields are handled.
            These are due to the earth's code and crust; these vary slowly (over many years).
            Excluded are the effects of currents in the ionosphere and magnetosphere which have daily and annual variations.
            <para>See <a href="https://geographiclib.sourceforge.io/html/magnetic.html">Magnetic models</a> 
            for details of how to install the magnetic models and the data format.</para>
            <para>
            See
            <list type="bullet">
            <item>
            General information:
            <list type="bullet">
            <item><a href="http://geomag.org/models/index.html"></a></item>
            </list>
            </item>
            <item>
            WMM2010:
            <list type="bullet">
            <item><a href="https://ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml"></a></item>
            <item><a href="https://ngdc.noaa.gov/geomag/WMM/data/WMM2010/WMM2010COF.zip"></a></item>
            </list>
            </item>
            <item>
            WMM2015 (deprecated):
            <list type="bullet">
            <item><a href="https://ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml"></a></item>
            <item><a href="https://ngdc.noaa.gov/geomag/WMM/data/WMM2015/WMM2015COF.zip"></a></item>
            </list>
            </item>
            <item>
            WMM2015V2:
            <list type="bullet">
            <item><a href="https://ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml"></a></item>
            <item><a href="https://ngdc.noaa.gov/geomag/WMM/data/WMM2015/WMM2015v2COF.zip"></a></item>
            </list>
            </item>
            <item>
            WMM2020:
            <list type="bullet">
            <item><a href="https://ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml"></a></item>
            <item><a href="https://ngdc.noaa.gov/geomag/WMM/data/WMM2020/WMM2020COF.zip"></a></item>
            </list>
            </item>
            <item>
            IGRF11:
            <list type="bullet">
            <item><a href="https://ngdc.noaa.gov/IAGA/vmod/igrf.html"></a></item>
            <item><a href="https://ngdc.noaa.gov/IAGA/vmod/igrf11coeffs.txt"></a></item>
            <item><a href="https://ngdc.noaa.gov/IAGA/vmod/geomag70_linux.tar.gz"></a></item>
            </list>
            </item>
            <item>
            EMM2010:
            <list type="bullet">
            <item><a href="https://ngdc.noaa.gov/geomag/EMM/index.html"></a></item>
            <item><a href="https://ngdc.noaa.gov/geomag/EMM/data/geomag/EMM2010_Sph_Windows_Linux.zip"></a></item>
            </list>
            </item>
            <item>
            EMM2015:
            <list type="bullet">
            <item><a href="https://ngdc.noaa.gov/geomag/EMM/index.html"></a></item>
            <item><a href="https://www.ngdc.noaa.gov/geomag/EMM/data/geomag/EMM2015_Sph_Linux.zip"></a></item>
            </list>
            </item>
            <item>
            EMM2017:
            <list type="bullet">
            <item><a href="https://ngdc.noaa.gov/geomag/EMM/index.html"></a></item>
            <item><a href="https://www.ngdc.noaa.gov/geomag/EMM/data/geomag/EMM2017_Sph_Linux.zip"></a></item>
            </list>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.MagneticModel.#ctor(System.String,System.String,GeographicLib.Geocentric,System.Int32,System.Int32)">
            <summary>
            Construct a magnetic model.
            </summary>
            <param name="name">the name of the model</param>
            <param name="path">(optional) directory for data file.</param>
            <param name="earth">(optional) <see cref="T:GeographicLib.Geocentric"/> object for converting coordinates; default <see cref="P:GeographicLib.Geocentric.WGS84"/>.</param>
            <param name="Nmax">(optional) if non-negative, truncate the degree of the model this value.</param>
            <param name="Mmax">(optional) if non-negative, truncate the order of the model this value.</param>
            <remarks>
            A filename is formed by appending ".wmm" (World Magnetic Model) to the name.
            If path is specified (and is non-empty), then the file is loaded from directory, <paramref name="path"/>.
            Otherwise the path is given by the <see cref="P:GeographicLib.MagneticModel.DefaultMagneticPath"/>.
            <para>
            This file contains the metadata which specifies the properties of the model.
            The coefficients for the spherical harmonic sums are obtained from a file obtained by appending ".cof" to metadata file (so the filename ends in ".wwm.cof").
            </para>
            <para>
            The model is not tied to a particular ellipsoidal model of the earth.
            The final earth argument to the constructor specifies an ellipsoid to allow geodetic coordinates to the 
            transformed into the spherical coordinates used in the spherical harmonic sum.
            </para>
            <para>
            If <paramref name="Nmax"/> ≥ 0 and <paramref name="Mmax"/> &lt; 0, then <paramref name="Mmax"/> is set to <paramref name="Nmax"/>.
            After the model is loaded, the maximum degree and order of the model can be found by the <see cref="P:GeographicLib.MagneticModel.Degree"/> and <see cref="P:GeographicLib.MagneticModel.Order"/> methods.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.MagneticModel.#ctor(System.IO.Stream,System.IO.Stream,GeographicLib.Geocentric,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Construct a magnetic model from the given <paramref name="metadataStream"/> and <paramref name="coefficientsStream"/>.
            </summary>
            <param name="metadataStream">A <see cref="T:System.IO.Stream"/> which contains the metadata of the magnetic model.</param>
            <param name="coefficientsStream">A <see cref="T:System.IO.Stream"/> which contains the coefficients of the magnetic model.</param>
            <param name="earth">(optional) <see cref="T:GeographicLib.Geocentric"/> object for converting coordinates; default <see cref="P:GeographicLib.Geocentric.WGS84"/>.</param>
            <param name="Nmax">(optional) if non-negative, truncate the degree of the model this value.</param>
            <param name="Mmax">(optional) if non-negative, truncate the order of the model this value.</param>
            <param name="leaveOpen">
            <see langword="true"/> to leave the streams open after the constructor returns; otherwise, <see langword="false"/>.
            </param>
            <remarks>
            <para>
            The model is not tied to a particular ellipsoidal model of the earth.
            The final earth argument to the constructor specifies an ellipsoid to allow geodetic coordinates to the 
            transformed into the spherical coordinates used in the spherical harmonic sum.
            </para>
            <para>
            If <paramref name="Nmax"/> ≥ 0 and <paramref name="Mmax"/> &lt; 0, then <paramref name="Mmax"/> is set to <paramref name="Nmax"/>.
            After the model is loaded, the maximum degree and order of the model can be found by the <see cref="P:GeographicLib.MagneticModel.Degree"/> and <see cref="P:GeographicLib.MagneticModel.Order"/> methods.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:GeographicLib.MagneticModel.#ctor(System.Byte[],System.Byte[],GeographicLib.Geocentric,System.Int32,System.Int32)">
            <summary>
            Construct a magnetic model from the given <paramref name="metadataBytes"/> and <paramref name="coefficientsBytes"/>.
            </summary>
            <param name="metadataBytes">A <see cref="T:System.Byte"/> array which contains the metadata of the magnetic model.</param>
            <param name="coefficientsBytes">A <see cref="T:System.Byte"/> array which contains the coefficients of the magnetic model.</param>
            <param name="earth">(optional) <see cref="T:GeographicLib.Geocentric"/> object for converting coordinates; default <see cref="P:GeographicLib.Geocentric.WGS84"/>.</param>
            <param name="Nmax">(optional) if non-negative, truncate the degree of the model this value.</param>
            <param name="Mmax">(optional) if non-negative, truncate the order of the model this value.</param>
            <remarks>
            <para>
            The model is not tied to a particular ellipsoidal model of the earth.
            The final earth argument to the constructor specifies an ellipsoid to allow geodetic coordinates to the 
            transformed into the spherical coordinates used in the spherical harmonic sum.
            </para>
            <para>
            If <paramref name="Nmax"/> ≥ 0 and <paramref name="Mmax"/> &lt; 0, then <paramref name="Mmax"/> is set to <paramref name="Nmax"/>.
            After the model is loaded, the maximum degree and order of the model can be found by the <see cref="P:GeographicLib.MagneticModel.Degree"/> and <see cref="P:GeographicLib.MagneticModel.Order"/> methods.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.MagneticModel.FieldGeocentric(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the magnetic field in geocentric coordinate.
            </summary>
            <param name="t">the time (fractional years).</param>
            <param name="X"><i>X</i> component of geocentric coordinate (meters).</param>
            <param name="Y"><i>Y</i> component of geocentric coordinate (meters).</param>
            <param name="Z"><i>Z</i> component of geocentric coordinate (meters).</param>
            <param name="BXt">the rate of change of <i>BX</i> (nT/yr).</param>
            <param name="BYt">the rate of change of <i>BY</i> (nT/yr).</param>
            <param name="BZt">the rate of change of <i>BZ</i> (nT/yr).</param>
            <returns>
            <list type="bullet">
            <item><i>BX</i>, the <i>X</i> component of the magnetic field (nanotesla).</item>
            <item><i>BY</i>, the <i>Y</i> component of the magnetic field (nanotesla).</item>
            <item><i>BZ</i>, the <i>Z</i> component of the magnetic field (nanotesla).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.MagneticModel.Evaluate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the components of the geomagnetic field.
            </summary>
            <param name="t">the time (fractional years).</param>
            <param name="lat">latitude of the point (degrees).</param>
            <param name="lon">longitude of the point (degrees).</param>
            <param name="h">the height of the point above the ellipsoid (meters).</param>
            <returns>
            <list type="bullet">
            <item><i>Bx</i>, the easterly component of the magnetic field (nanotesla).</item>
            <item><i>By</i>, the northerly component of the magnetic field (nanotesla).</item>
            <item><i>Bz</i>, the vertical (up) component of the magnetic field (nanotesla).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.MagneticModel.Evaluate(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Evaluate the components of the geomagnetic field and their time derivatives.
            </summary>
            <param name="t">the time (fractional years).</param>
            <param name="lat">latitude of the point (degrees).</param>
            <param name="lon">longitude of the point (degrees).</param>
            <param name="h">the height of the point above the ellipsoid (meters).</param>
            <param name="Bxt">the rate of change of <i>Bx</i> (nT/yr).</param>
            <param name="Byt">the rate of change of <i>By</i> (nT/yr).</param>
            <param name="Bzt">the rate of change of <i>Bz</i> (nT/yr).</param>
            <returns>
            <list type="bullet">
            <item><i>Bx</i>, the easterly component of the magnetic field (nanotesla).</item>
            <item><i>By</i>, the northerly component of the magnetic field (nanotesla).</item>
            <item><i>Bz</i>, the vertical (up) component of the magnetic field (nanotesla).</item>
            </list>
            </returns>
            <remarks>
             Use <see cref="M:GeographicLib.Utility.FractionalYear(System.String)"/> to convert a date of the form yyyy-mm or yyyy-mm-dd into a fractional year.
            </remarks>
        </member>
        <member name="M:GeographicLib.MagneticModel.Circle(System.Double,System.Double,System.Double)">
            <summary>
            Create a <see cref="T:GeographicLib.MagneticCircle"/> object to allow the geomagnetic field at many points with constant
            <i>lat</i>, <i>h</i>, and <i>t</i> and varying lon to be computed efficiently.
            </summary>
            <param name="h">the height of the point above the ellipsoid (meters).</param>
            <param name="lat">latitude of the point (degrees).</param>
            <param name="t">the time (fractional years).</param>
            <returns>
            a <see cref="T:GeographicLib.MagneticCircle"/> object whose <see cref="M:GeographicLib.MagneticCircle.Evaluate(System.Double,System.Double@,System.Double@,System.Double@)"/> member function
            computes the field at particular values of <i>lon</i>.
            </returns>
            <remarks>
            If the field at several points on a circle of latitude need to be calculated then creating a <see cref="T:GeographicLib.MagneticCircle"/>
            and using its member functions will be substantially faster, especially for high-degree models.
            </remarks>
        </member>
        <member name="M:GeographicLib.MagneticModel.FieldComponents(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute various quantities dependent on the magnetic field.
            </summary>
            <param name="Bx">the <i>x</i> (easterly) component of the magnetic field (nanotesla).</param>
            <param name="By">the <i>y</i> (northerly) component of the magnetic field (nanotesla).</param>
            <param name="Bz">the <i>z</i> (vertical, up positive) component of the magnetic field (nanotesla).</param>
            <param name="Bxt">the rate of change of <i>Bx</i> (nT/yr).</param>
            <param name="Byt">the rate of change of <i>By</i> (nT/yr).</param>
            <param name="Bzt">the rate of change of <i>Bz</i> (nT/yr).</param>
            <param name="Ht">the rate of change of <i>H</i> (nT/yr).</param>
            <param name="Ft">the rate of change of <i>F</i> (nT/yr).</param>
            <param name="Dt">the rate of change of <i>D</i> (degrees/yr).</param>
            <param name="It">the rate of change of <i>I</i> (degrees/yr).</param>
            <returns>
            <list type="bullet">
            <item><i>H</i>, the horizontal magnetic field (nT).</item>
            <item><i>F</i>, the total magnetic field (nT).</item>
            <item><i>D</i>, the declination of the field (degrees east of north).</item>
            <item><i>I</i>, the inclination of the field (degrees down from horizontal).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.MagneticModel.FieldComponents(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compute various quantities dependent on the magnetic field and its rate of change.
            </summary>
            <param name="Bx">the <i>x</i> (easterly) component of the magnetic field (nanotesla).</param>
            <param name="By">the <i>y</i> (northerly) component of the magnetic field (nanotesla).</param>
            <param name="Bz">the <i>z</i> (vertical, up positive) component of the magnetic field (nanotesla).</param>
            <param name="Bxt">the rate of change of <i>Bx</i> (nT/yr).</param>
            <param name="Byt">the rate of change of <i>By</i> (nT/yr).</param>
            <param name="Bzt">the rate of change of <i>Bz</i> (nT/yr).</param>
             <returns>
            <list type="bullet">
            <item><i>H</i>, the horizontal magnetic field (nT).</item>
            <item><i>F</i>, the total magnetic field (nT).</item>
            <item><i>D</i>, the declination of the field (degrees east of north).</item>
            <item><i>I</i>, the inclination of the field (degrees down from horizontal).</item>
            </list>
            </returns>
        </member>
        <member name="P:GeographicLib.MagneticModel.DefaultMagneticPath">
            <summary>
            This is the value of the environment variable GEOGRAPHICLIB_MAGNETIC_PATH, if set;
            otherwise, it is $GEOGRAPHICLIB_DATA/magnetic if the environment variable GEOGRAPHICLIB_DATA is set;
            otherwise, it is a compile-time default (/usr/local/share/GeographicLib/magnetic on non-Windows systems 
            and C:/ProgramData/GeographicLib/magnetic on Windows systems).
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticModel.DefaultMagneticName">
            <summary>
            This is the value of the environment variable GEOGRAPHICLIB_MAGNETIC_NAME, if set; otherwise, it is "wmm2020".
            The <see cref="T:GeographicLib.MagneticModel"/> class does not use this function;
            it is just provided as a convenience for a calling program when constructing a <see cref="T:GeographicLib.MagneticModel"/> object.
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticModel.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius (<i>a</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticModel.Flattening">
            <summary>
            Gets a value representing the flattening (<i>f</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticModel.Degree">
            <summary>
            Gets a value representing the maximum degree of the components of the model.
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticModel.Order">
            <summary>
            Gets a value representing the maximum order of the components of the model.
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticModel.MinHeight">
            <summary>
            Gets a value representing the minimum height above the ellipsoid (in meters) for which this <see cref="T:GeographicLib.MagneticModel"/> should be used.
            </summary>
            <remarks>
            Because the model will typically provide useful results slightly outside the range of allowed heights,
            no check of t argument is made by <see cref="M:GeographicLib.MagneticModel.Evaluate(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)"/> or 
            <see cref="M:GeographicLib.MagneticModel.Circle(System.Double,System.Double,System.Double)"/>.
            </remarks>
        </member>
        <member name="P:GeographicLib.MagneticModel.MaxHeight">
            <summary>
            Gets a value representing the maximum height above the ellipsoid (in meters) for which this <see cref="T:GeographicLib.MagneticModel"/> should be used.
            </summary>
            <remarks>
            Because the model will typically provide useful results slightly outside the range of allowed heights,
            no check of t argument is made by <see cref="M:GeographicLib.MagneticModel.Evaluate(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)"/> or 
            <see cref="M:GeographicLib.MagneticModel.Circle(System.Double,System.Double,System.Double)"/>.
            </remarks>
        </member>
        <member name="P:GeographicLib.MagneticModel.MinTime">
            <summary>
            Gets a value representing the minimum time (in years) for which this <see cref="T:GeographicLib.MagneticModel"/> should be used.
            </summary>
            <remarks>
            Because the model will typically provide useful results slightly outside the range of allowed heights,
            no check of t argument is made by <see cref="M:GeographicLib.MagneticModel.Evaluate(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)"/> or 
            <see cref="M:GeographicLib.MagneticModel.Circle(System.Double,System.Double,System.Double)"/>.
            </remarks>
        </member>
        <member name="P:GeographicLib.MagneticModel.MaxTime">
            <summary>
            Gets a value representing the maximum time (in years) for which this <see cref="T:GeographicLib.MagneticModel"/> should be used.
            </summary>
            <remarks>
            Because the model will typically provide useful results slightly outside the range of allowed heights,
            no check of t argument is made by <see cref="M:GeographicLib.MagneticModel.Evaluate(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)"/> or 
            <see cref="M:GeographicLib.MagneticModel.Circle(System.Double,System.Double,System.Double)"/>.
            </remarks>
        </member>
        <member name="P:GeographicLib.MagneticModel.Description">
            <summary>
            Gets a value representing the description of the magnetic model, if available, from the Description file in the data file;
            if absent, return "NONE".
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticModel.DateTime">
            <summary>
            Gets a value representing release date of the model, if available, from the ReleaseDate field in the data file;
            if absent, return <see langword="null"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.MagneticModel.MagneticFile">
            <summary>
            Gets a value representing the full file name used to load the magnetic model.
            </summary>
            <remarks>
            This property returns <see langword="null"/> if the <see cref="T:GeographicLib.MagneticModel"/> object
            is constructed from <see cref="T:System.IO.Stream"/> or <see cref="T:System.Byte"/> array.
            </remarks>
        </member>
        <member name="P:GeographicLib.MagneticModel.MagneticModelName">
            <summary>
            Gets a value representing the "name" used to load the magnetic model
            (from the first argument of the constructor, but this may be overridden by the model file).
            </summary>
            <remarks>
            This property returns <see langword="null"/> if the <see cref="T:GeographicLib.MagneticModel"/> object
            is constructed from <see cref="T:System.IO.Stream"/> or <see cref="T:System.Byte"/> array, and the model file doesn't
            define <c>Name</c> attribute.
            </remarks>
        </member>
        <member name="P:GeographicLib.MagneticModel.MagneticModelDirectory">
            <summary>
            Gets a value representing the directory used to load the magnetic model.
            </summary>
            <remarks>
            This property returns <see langword="null"/> if the <see cref="T:GeographicLib.MagneticModel"/> object
            is constructed from <see cref="T:System.IO.Stream"/> or <see cref="T:System.Byte"/> array.
            </remarks>
        </member>
        <member name="T:GeographicLib.MathEx">
            <summary>
            Defines extended mathematical methods.
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.Degree">
            <summary>
            The number of radians in a degree
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.QD">
            <summary>
            degrees per quarter turn
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.DM">
            <summary>
            minutes per degree
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.MS">
            <summary>
            seconds per minute
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.HD">
            <summary>
            degrees per half turn
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.TD">
            <summary>
            degrees per turn
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.DS">
            <summary>
            seconds per degree
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.FLT_RADIX">
            <summary>
            
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.DBL_MIN">
            <summary>
            Minimum positive, normal value of a <see cref="T:System.Double"/> (<c>2.2250738585072014e-308</c>).
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.DBL_EPSILON">
            <summary>
            Gives an upper bound on the relative error due to rounding in floating point arithmetic. 
            Not to be confused with <see cref="F:System.Double.Epsilon"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.DBL_MAX_EXP">
            <summary>
            Maximum binary exponent of a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.DBL_MANT_DIG">
            <summary>
            Number of digits in the radix specified by FLT_RADIX in the floating-point significand.
            </summary>
        </member>
        <member name="F:GeographicLib.MathEx.DBL_DIG">
            <summary>
            # of decimal digits of precision
            </summary>
        </member>
        <member name="P:GeographicLib.MathEx.UseManagedCMath">
            <summary>
            Gets or sets a value representing that whether <see cref="T:GeographicLib.MathEx"/> should use managed implementations of C mathematical functions
            when there's no corresponding implementation provided by .NET runtime.
            </summary>
            <remarks>
            The following functions have managed implementation:
            <list type="bullet">
            <item><see cref="M:GeographicLib.MathEx.Exp2(System.Double)"/></item>
            <item><see cref="M:GeographicLib.MathEx.Expm1(System.Double)"/></item>
            <item><see cref="M:GeographicLib.MathEx.Log1p(System.Double)"/></item>
            <item><see cref="M:GeographicLib.MathEx.Hypot(System.Double,System.Double)"/></item>
            <item><see cref="M:GeographicLib.MathEx.Remquo(System.Double,System.Double,System.Int32@)"/></item>
            <item><see cref="M:GeographicLib.MathEx.Frexp(System.Double,System.Int32@)"/></item>
            </list>
            When set to <see langword="true"/>, <see cref="T:GeographicLib.MathEx"/> will use managed implementations when the above functions are called.
            <para>
            When set to <see langword="false"/>, <see cref="T:GeographicLib.MathEx"/> will use platform dependent implementations provided by system C runtime
            library when the above functions are called.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.Log1p(System.Double)">
            <summary>
            Compute log(1+x) without losing precision for small values of <paramref name="x"/>.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.MathEx.Expm1(System.Double)">
            <summary>
            Compute exp(x) - 1 without loss of precision for small values of x.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.MathEx.Exp2(System.Double)">
            <summary>
            Computes 2 raised to the given power <paramref name="x"/>.
            </summary>
            <param name="x"></param>
            <returns>2^x</returns>
        </member>
        <member name="M:GeographicLib.MathEx.Hypot(System.Double,System.Double)">
            <summary>
            Computes the square root of the sum of the squares of x and y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>Hypotenuse of a right-angled triangle computed as √(x^2+y^2).</returns>
        </member>
        <member name="M:GeographicLib.MathEx.Remquo(System.Double,System.Double,System.Int32@)">
            <summary>
            Computes the remainder of two integer values, 
            and stores an integer value with the sign and approximate magnitude of the quotient in a location that's specified in a parameter.
            </summary>
            <param name="x">The numerator.</param>
            <param name="y">The denominator.</param>
            <param name="quo">A pointer to an integer to store a value that has the sign and approximate magnitude of the quotient.</param>
            <returns>
            Returns the floating-point remainder of <paramref name="x"/> / <paramref name="y"/>.
            If the value of <paramref name="y"/> is 0.0, this method returns a quiet <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:GeographicLib.MathEx.Frexp(System.Double,System.Int32@)">
            <summary>
            Decomposes given floating point value <paramref name="x"/> into a normalized fraction and an integral power of two.
            </summary>
            <param name="x">Floating point value.</param>
            <param name="e">Pointer to integer value to store the exponent to.</param>
            <returns>
            <para>
            If <paramref name="x"/> is zero, returns zero and stores zero in <paramref name="e"/>.
            </para>
            <para>
            Otherwise (if <paramref name="x"/> is not zero), if no errors occur,
            returns the value x in the range (-1;-0.5], [0.5; 1) and stores an integer value in <paramref name="e"/> such that
            x×2(<paramref name="e"/>)=<paramref name="x"/>
            </para>
            <para>
            If the value to be stored in <paramref name="e"/> is outside the range of int, the behavior is unspecified.
            </para>
            <para>
            If <paramref name="x"/> is not a floating-point number, the behavior is unspecified.
            </para>
            </returns>
        </member>
        <member name="M:GeographicLib.MathEx.Ldexp(System.Double,System.Int32)">
            <summary>
            Multiplies a floating-point number by an integral power of two.
            </summary>
            <param name="number">Floating-point value.</param>
            <param name="exp">Integer exponent.</param>
            <returns>
            Return the value of x * 2^<paramref name="exp"/> if successful.
            On overflow, and depending on the sign of <paramref name="number"/>,
            <see cref="F:System.Double.NegativeInfinity"/> or <see cref="F:System.Double.PositiveInfinity"/> is returned.
            </returns>
        </member>
        <member name="M:GeographicLib.MathEx.Swap``1(``0@,``0@)">
            <summary>
            Swap value of two variables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:GeographicLib.MathEx.Norm(System.Double@,System.Double@)">
            <summary>
            Normalize a two-vector.
            </summary>
            <param name="x">on output set to <i>x</i>/Hypot(<i>x</i>, <i>y</i>).</param>
            <param name="y">on output set to <i>y</i>/hypot(<i>x</i>, <i>y</i>).</param>
        </member>
        <member name="M:GeographicLib.MathEx.Hypot(System.Double)">
            <summary>
            Computes the square root of the sum of the squares of 1 and x.
            </summary>
            <param name="x"></param>
            <returns>Hypotenuse of a right-angled triangle computed as √(1^2+x^2).</returns>
        </member>
        <member name="M:GeographicLib.MathEx.Sq(System.Double)">
            <summary>
            Square a number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.MathEx.SinCosd(System.Double,System.Double@,System.Double@)">
            <summary>
            Evaluate the sine and cosine function with the argument in degrees.
            </summary>
            <param name="x">x in degrees.</param>
            <param name="sinx">sin(<i>x</i>).</param>
            <param name="cosx">cos(<i>x</i>).</param>
            <remarks>
            The results obey exactly the elementary properties of the trigonometric
            functions, e.g., sin 9° = cos 81° = - sin 123456789°.
            <para>
            If <i>x</i> = -0 or a negative multiple of 180°, then sin<i>x</i> = -0;
            this is the only case where -0 is returned.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.SinCosde(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Evaluate the sine and cosine with reduced argument plus correction.
            </summary>
            <param name="x">angle in degrees.</param>
            <param name="t">correction in degrees.</param>
            <param name="sinx">sin(<i>x</i>).</param>
            <param name="cosx">cos(<i>x</i>).</param>
            <remarks>
            This is a variant of <see cref="M:GeographicLib.MathEx.SinCosd(System.Double,System.Double@,System.Double@)"/> 
            allowing a correction to the angle to be supplied.
            <para>
            <paramref name="x"/> must be in [-180°, 180°] and <paramref name="t"/> is
            assumed to be a <i>small</i> correction.
            </para>
            <para>
            <see cref="M:GeographicLib.MathEx.AngRound(System.Double)"/> is
            applied to the reduced angle to prevent problems with <paramref name="x"/> +
            <paramref name="t"/> being extremely close but not exactly equal to one of
            the cardinal directions.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.Sind(System.Double)">
            <summary>
            Evaluate the sine function with the argument in degrees.
            </summary>
            <param name="x">in degrees.</param>
            <returns>sin(<i>x</i>)</returns>
            <remarks>
            The result is +0 for <paramref name="x"/> = +0 and positive multiples of 180°. The
            result is -0 for <paramref name="x"/> = -0 and negative multiples of 180°.
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.Cosd(System.Double)">
            <summary>
            Evaluate the cosine function with the argument in degrees.
            </summary>
            <param name="x">in degrees.</param>
            <returns>cos(<i>x</i>)</returns>
            <remarks>
            The result is +0 for <paramref name="x"/> an odd multiple of 90°.
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.Tand(System.Double)">
            <summary>
            Evaluate the tangent function with the argument in degrees.
            </summary>
            <param name="x">in degrees.</param>
            <returns>tan(<i>x</i>).</returns>
            <remarks>
            If <paramref name="x"/> is an odd multiple of 90°, then a suitably large (but finite) value is returned.
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.Atan2d(System.Double,System.Double)">
            <summary>
            Evaluate the atan2 function with the result in degrees.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns>atan2(<i>y</i>, <i>x</i>) in degrees.</returns>
            <remarks>
            The result is in the range [-180°, 180°].  N.B.,
            atan2d(±0, -1) = ±180°.
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.EAtanhE(System.Double,System.Double)">
            <summary>
            Evaluate <i>e</i> atanh(<i>e x</i>)
            </summary>
            <param name="x"></param>
            <param name="es">The signed eccentricity = sign(<i>e^2</i>)sqrt(|<i>e^2</i>|)</param>
            <returns><i>e</i> atanh(<i>e x</i>)</returns>
            <remarks>
            If <i>e^2</i> is negative (<i>e</i> is imaginary), the expression is evaluated in terms of atan.
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.Taupf(System.Double,System.Double)">
            <summary>
            tanχ in terms of tanφ
            </summary>
            <param name="tau">τ = tanφ</param>
            <param name="es">The signed eccentricity = sign(<i>e^2</i>)sqrt(|<i>e^2</i>|)</param>
            <returns>τ′ = tanχ</returns>
            <remarks>
            See Eqs. (7--9) of
            C.F.F.Karney,
            <a href = "https://doi.org/10.1007/s00190-011-0445-3" >
            Transverse Mercator with an accuracy of a few nanometers,</a>
            J.Geodesy 85(8), 475--485 (Aug. 2011)
            (preprint
            <a href = "https://arxiv.org/abs/1002.1417" > arXiv:1002.1417</a>).
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.Tauf(System.Double,System.Double)">
            <summary>
            tanφ in terms of tanχ
            </summary>
            <param name="taup">τ′ = tanχ</param>
            <param name="es">The signed eccentricity = sign(<i>e^2</i>)sqrt(|<i>e^2</i>|)</param>
            <returns>τ = tanφ</returns>
            <remarks>
            See Eqs. (19--21) of
            C.F.F.Karney,
            <a href = "https://doi.org/10.1007/s00190-011-0445-3" >
            Transverse Mercator with an accuracy of a few nanometers,</a>
            J.Geodesy 85(8), 475--485 (Aug. 2011)
            (preprint
            <a href = "https://arxiv.org/abs/1002.1417" > arXiv:1002.1417</a>).
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.Atand(System.Double)">
            <summary>
            Evaluate the atan function with the result in degrees.
            </summary>
            <param name="x">in degrees</param>
            <returns>atan(<i>x</i>) in degrees.</returns>
        </member>
        <member name="M:GeographicLib.MathEx.Sum(System.Double,System.Double,System.Double@)">
            <summary>
            The error-free sum of two numbers.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="t">the exact error given by (<paramref name="u"/> + <paramref name="v"/>) - <i>s</i>.</param>
            <returns><i>s</i> = round(<paramref name="u"/> + <paramref name="v"/>)</returns>
            <remarks>
            See D. E. Knuth, TAOCP, Vol 2, 4.2.2, Theorem B.  (Note that <paramref name="t"/> can be the same as one of the first two arguments.)
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.AngNormalize(System.Double)">
            <summary>
            Normalize an angle.
            </summary>
            <remarks>
            The range of <paramref name="x"/> is unrestricted. If the result is ±0° or
            ±180° then the sign is the sign of <paramref name="x"/>.
            </remarks>
            <param name="x">The angle in degrees.</param>
            <returns>The angle reduced to the range [-180°, 180°]</returns>
        </member>
        <member name="M:GeographicLib.MathEx.AngDiff(System.Double,System.Double,System.Double@)">
            <summary>
            The exact difference of two angles reduced to [-180°, 180°].
            </summary>
            <param name="x">The first angle in degrees.</param>
            <param name="y">The second angle in degrees.</param>
            <param name="e">The error term in degrees.</param>
            <returns><i>d</i>, the truncated value of <paramref name="y"/> - <paramref name="x"/>. </returns>
            <remarks>
            This computes <i>z</i> = <i>y</i> - <i>x</i> exactly, reduced to
            [-180°, 180°]; and then sets <i>z</i> = <i>d</i> + <i>e</i> where <i>d</i>
            is the nearest representable number to <i>z</i> and <i>e</i> is the truncation
            error. If <i>z</i> = ±0° or ±180°, then the sign of <i>d</i> is given
            by the sign of <i>y</i> - <i>x</i>. The maximum absolute value of <i>e</i> is 2^-26
            (for doubles).
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.AngDiff(System.Double,System.Double)">
            <summary>
            The exact difference of two angles reduced to [-180°, 180°].
            </summary>
            <param name="x">The first angle in degrees.</param>
            <param name="y">The second angle in degrees.</param>
            <returns><i>d</i>, the truncated value of <paramref name="y"/> - <paramref name="x"/>. </returns>
            <remarks>
            This computes <i>z</i> = <i>y</i> - <i>x</i> exactly, reducing
            it to [-180°, 180°] and rounding the result.
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.LatFix(System.Double)">
            <summary>
            Normalize a latitude.
            </summary>
            <param name="x">The angle in degrees.</param>
            <returns><paramref name="x"/> if it is in the range [-90°, 90°], otherwise <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:GeographicLib.MathEx.AngRound(System.Double)">
            <summary>
            Coarsen a value close to zero.
            </summary>
            <param name="x"></param>
            <returns>the coarsened value.</returns>
            <remarks>
            The makes the smallest gap in <i>x</i> = 1/16 - nextafter(1/16, 0) = 1/2^57
            for doubles = 0.8 pm on the earth if <i>x</i> is an angle
            in degrees.  (This is about 2000 times more resolution than we get with
            angles around 90°.)  We use this to avoid having to deal with near
            singular cases when <i>x</i> is non-zero but tiny (e.g.,
            10^-200).  The sign of ±0 is preserved.
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.PolyVal(System.Int32,System.ReadOnlySpan{System.Double},System.Double)">
            <summary>
            Evaluate a polynomial.
            </summary>
            <param name="N">the order of the polynomial.</param>
            <param name="p">
            the coefficient array (of size <paramref name="N"/> + 1) with
            <i>p</i><sub>0</sub> being coefficient of <i>x</i><sup><i>N</i></sup>.</param>
            <param name="x">the variable.</param>
            <returns>the value of the polynomial.</returns>
            <remarks>
            The evaluation uses Horner's method.
            </remarks>
        </member>
        <member name="M:GeographicLib.MathEx.PolyVal(System.Int32,System.ReadOnlyMemory{System.Double},System.Double)">
            <summary>
            Evaluate a polynomial.
            </summary>
            <param name="N">the order of the polynomial.</param>
            <param name="p">
            the coefficient array (of size <paramref name="N"/> + 1) with
            <i>p</i><sub>0</sub> being coefficient of <i>x</i><sup><i>N</i></sup>.</param>
            <param name="x">the variable.</param>
            <returns>the value of the polynomial.</returns>
            <remarks>
            The evaluation uses Horner's method.
            </remarks>
        </member>
        <member name="T:GeographicLib.NormalGravity">
            <summary>
            The normal gravity of the earth.
            </summary>
            <remarks>
            "Normal" gravity refers to an idealization of the earth which is modeled as an rotating ellipsoid.
            The eccentricity of the ellipsoid, the rotation speed, and the distribution of mass within the ellipsoid are such that
            the ellipsoid is a "level ellipoid", a surface of constant potential (gravitational plus centrifugal). The acceleration
            due to gravity is therefore perpendicular to the surface of the ellipsoid.
            <para>
            Because the distribution of mass within the ellipsoid is unspecified, only the potential exterior to the ellipsoid is well
            defined. In this class, the mass is assumed to be to concentrated on a "focal disc" of radius, (<i>a</i>^2 − <i>b</i>^2)^(1/2),
            where a is the equatorial radius of the ellipsoid and b is its polar semi-axis. In the case of an oblate ellipsoid,
            the mass is concentrated on a "focal rod" of length 2(<i>b</i>^2 − <i>a</i>^2)^(1/2). As a result the potential is well
            defined everywhere.
            </para>
            <para>
            There is a closed solution to this problem which is implemented here.
            Series "approximations" are only used to evaluate certain combinations of elementary functions where use of the closed
            expression results in a loss of accuracy for small arguments due to cancellation of the leading terms. However these series
            include sufficient terms to give full machine precision.
            </para>
            <para>
            Although the formulation used in this class applies to ellipsoids with arbitrary flattening, in practice, its use should be
            limited to about <i>b</i>/<i>a</i> ∈ [0.01, 100] or <i>f</i> ∈ [−99, 0.99].
            </para>
            Definitions:
            <list type="bullet">
            <item><i>V</i>0, the gravitational contribution to the normal potential;</item>
            <item>Φ, the rotational contribution to the normal potential;</item>
            <item><i>U</i> = <i>V</i>0 + Φ, the total potential;</item>
            <item><b>Γ</b> = ∇<i>V</i>0, the acceleration due to mass of the earth;</item>
            <item><b>f</b> = ∇Φ, the centrifugal acceleration;</item>
            <item><b>γ</b> = ∇<i>U</i> = <b>Γ</b> + <b>f</b>, the normal acceleration;</item>
            <item><i>X</i>, <i>Y</i>, <i>Z</i>, geocentric coordinates;</item>
            <item><i>x</i>, <i>y</i>, <i>z</i>, local cartesian coordinates used to denote the east, north and up directions.</item>
            </list>
            References:
            <list type="bullet">
            <item>
            C. Somigliana,
            Teoria generale del campo gravitazionale dell'ellissoide di rotazione,
            Mem. Soc. Astron. Ital, 4, 541–599 (1929).
            </item>
            <item>
            W. A. Heiskanen and H. Moritz,
            <a href="https://archive.org/details/HeiskanenMoritz1967PhysicalGeodesy">Physical Geodesy (Freeman, San Francisco, 1967)</a>.
            Secs. 1-19, 2-7, 2-8 (2-9, 2-10), 6-2 (6-3).
            </item>
            <item>
            B. Hofmann-Wellenhof, H. Moritz,
            <a href="https://doi.org/10.1007/978-3-211-33545-1">Physical Geodesy (Second edition, Springer, 2006)</a>
            </item>
            <item>
            H. Moritz,
            <a href="https://doi.org/10.1007/BF02521480">Geodetic Reference System 1980</a>,
            J. Geodesy 54(3), 395-405 (1980)
            </item>
            </list>
            For more information on normal gravity see <a href="https://geographiclib.sourceforge.io/html/normalgravity.html">Normal gravity</a>.
            </remarks>
        </member>
        <member name="M:GeographicLib.NormalGravity.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor for the normal gravity.
            </summary>
            <param name="a">equatorial radius (meters).</param>
            <param name="GM">mass constant of the ellipsoid (meters^3/seconds^2);
            this is the product of <i>G</i> the gravitational constant and <i>M</i> the mass of the earth
            (usually including the mass of the earth's atmosphere).</param>
            <param name="omega">the angular velocity (rad s^−1).</param>
            <param name="f_J2">either the flattening of the ellipsoid <i>f</i> or the the dynamical form factor <i>J2</i>.</param>
            <param name="geometricp">
            if <see langword="true"/> (the default), then <paramref name="f_J2"/> denotes the flattening,
            else it denotes the dynamical form factor <i>J2</i>.
            </param>
            <remarks>
            The shape of the ellipsoid can be given in one of two ways:
            <list type="bullet">
            <item>geometrically (<paramref name="geometricp"/> = <see langword="true"/>), the ellipsoid is defined by
            the flattening <i>f</i> = (<i>a</i> − <i>b</i>) / <i>a</i>,
            where <i>a</i> and <i>b</i> are the equatorial radius and the polar semi-axis.
            The parameters should obey <i>a</i> > 0, <i>f</i> &lt; 1.
            There are no restrictions on <paramref name="GM"/> or <paramref name="omega"/>, in particular, <paramref name="GM"/> need not be positive.</item>
            <item>physically (<paramref name="geometricp"/> = <see langword="false"/>),
            the ellipsoid is defined by the dynamical form factor <i>J2</i> = (<i>C</i> − <i>A</i>) / <i>Ma</i>^2,
            where <i>A</i> and <i>C</i> are the equatorial and polar moments of inertia and <i>M</i> is the mass of the earth.
            The parameters should obey <paramref name="a"/> > 0,
            <paramref name="GM"/> > 0 and <i>J2</i> &lt; 1/3 − (<paramref name="omega"/>^2 <paramref name="a"/>^3/<paramref name="GM"/>) 8/(45π).
            There is no restriction on omega.</item>
            </list>
            </remarks>
        </member>
        <member name="M:GeographicLib.NormalGravity.SurfaceGravity(System.Double)">
            <summary>
            Evaluate the gravity on the surface of the ellipsoid.
            </summary>
            <param name="lat">the geographic latitude (degrees).</param>
            <returns>γ, the acceleration due to gravity, positive downwards (m s^−2).</returns>
            <remarks>
            Due to the axial symmetry of the ellipsoid, the result is independent of the value of the longitude.
            This acceleration is perpendicular to the surface of the ellipsoid. It includes the effects of the earth's rotation.
            </remarks>
        </member>
        <member name="M:GeographicLib.NormalGravity.Gravity(System.Double,System.Double)">
            <summary>
            Evaluate the gravity at an arbitrary point above (or below) the ellipsoid.
            </summary>
            <param name="lat">the geographic latitude (degrees).</param>
            <param name="h">the height above the ellipsoid (meters).</param>
            <returns>
            <list type="bullet">
            <item><i>U</i>, the corresponding normal potential (m^2 s^−2).</item>
            <item><i>gammay</i>, the northerly component of the acceleration (m s^−2).</item>
            <item><i>gammaz</i>, the upward component of the acceleration (m s−^2); this is usually negative.</item>
            </list>
            </returns>
            <remarks>
            Due to the axial symmetry of the ellipsoid, the result is independent of the value of the longitude and the easterly
            component of the acceleration vanishes, <i>gammax</i> = 0. The function includes the effects of the earth's rotation.
            When <i>h</i> = 0, this function gives <i>gammay</i> = 0 and the returned value matches that of
            <see cref="M:GeographicLib.NormalGravity.SurfaceGravity(System.Double)"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.NormalGravity.U(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the components of the acceleration due to gravity and the centrifugal acceleration in geocentric coordinates.
            </summary>
            <param name="X"><i>X</i> component of geocentric coordinate of point (meters).</param>
            <param name="Y"><i>Y</i> component of geocentric coordinate of point (meters).</param>
            <param name="Z"><i>Z</i> component of geocentric coordinate of point (meters).</param>
            <returns>
            <list type="bullet">
            <item><i>U</i> = <i>V</i>0 + Φ, the sum of the gravitational and centrifugal potentials (m^2 s^−2).</item>
            <item><i>gammaX</i>, the <i>X</i> component of the acceleration (m s^−2).</item>
            <item><i>gammaY</i>, the <i>Y</i> component of the acceleration (m s^−2).</item>
            <item><i>gammaZ</i>, the <i>Z</i> component of the acceleration (m s^−2).</item>
            </list>
            </returns>
            <remarks>
            The acceleration given by <b>γ</b> = ∇<i>U</i> = ∇<i>V</i>0 + ∇Φ = <b>Γ</b> + <b>f</b>.
            </remarks>
        </member>
        <member name="M:GeographicLib.NormalGravity.V0(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the components of the acceleration due to the gravitational force in geocentric coordinates.
            </summary>
            <param name="X"><i>X</i> component of geocentric coordinate of point (meters).</param>
            <param name="Y"><i>Y</i> component of geocentric coordinate of point (meters).</param>
            <param name="Z"><i>Z</i> component of geocentric coordinate of point (meters).</param>
            <returns>
            <list type="bullet">
            <item><i>V</i>0, the gravitational potential (m^2 s^−2).</item>
            <item><i>GammaX</i>, the <i>X</i> component of the acceleration due to the gravitational force (m s^−2).</item>
            <item><i>GammaY</i>, the <i>Y</i> component of the acceleration due to the gravitational force (m s^−2).</item>
            <item><i>GammaZ</i>, the <i>Z</i> component of the acceleration due to the gravitational force (m s^−2).</item>
            </list>
            </returns>
            <remarks>
            This function excludes the centrifugal acceleration and is appropriate to use for space applications.
            In terrestrial applications, the function <see cref="M:GeographicLib.NormalGravity.U(System.Double,System.Double,System.Double)"/>
            (which includes this effect) should usually be used.
            </remarks>
        </member>
        <member name="M:GeographicLib.NormalGravity.Phi(System.Double,System.Double)">
            <summary>
            Evaluate the centrifugal acceleration in geocentric coordinates.
            </summary>
            <param name="X"><i>X</i> component of geocentric coordinate of point (meters).</param>
            <param name="Y"><i>Y</i> component of geocentric coordinate of point (meters).</param>
            <returns>
            <list type="bullet">
            <item>Φ, the centrifugal potential (m^2 s^−2).</item>
            <item><i>fX</i>, the <i>X</i> component of the centrifugal acceleration (m s^−2).</item>
            <item><i>fY</i>, the <i>Y</i> component of the centrifugal acceleration (m s^−2).</item>
            </list>
            </returns>
            <remarks>
            Φ is independent of <i>Z</i>, thus <i>fZ</i> = 0.
            This function <see cref="M:GeographicLib.NormalGravity.U(System.Double,System.Double,System.Double)"/> sums the results of
            <see cref="M:GeographicLib.NormalGravity.V0(System.Double,System.Double,System.Double)"/> and <see cref="M:GeographicLib.NormalGravity.Phi(System.Double,System.Double)"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.NormalGravity.DynamicalFormFactor(System.Int32)">
            <summary>
            Gets the dynamical form factor of the ellipsoid.
            </summary>
            <param name="n"></param>
            <returns><i>Jn</i>, the dynamical form factors of the ellipsoid.</returns>
            <remarks>
            If <paramref name="n"/> = 2 (the default), this is the value of <i>J2</i> used in the constructor.
            Otherwise it is the zonal coefficient of the Legendre harmonic sum of the normal gravitational potential.
            Note that <i>Jn</i> = 0 if <paramref name="n"/> is odd. In most gravity applications,
            fully normalized Legendre functions are used and the corresponding coefficient is
            <i>Cn</i>0 = −<i>Jn</i> / sqrt(2 <paramref name="n"/> + 1).
            </remarks>
        </member>
        <member name="P:GeographicLib.NormalGravity.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.NormalGravity.Flattening">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.NormalGravity.MassConstant">
            <summary>
            Gets a value representing <i>GM</i>, the mass constant of the ellipsoid (m^3 s^−2).
            This is the value used in the constructor.
            </summary>
        </member>
        <member name="P:GeographicLib.NormalGravity.AngularVelocity">
            <summary>
            Gets a value representing ω, the angular velocity of the ellipsoid (rad s^−1).
            This is the value used in the constructor.
            </summary>
        </member>
        <member name="P:GeographicLib.NormalGravity.EquatorialGravity">
            <summary>
            Gets a value representing γe, the normal gravity at equator (m s^−2).
            </summary>
        </member>
        <member name="P:GeographicLib.NormalGravity.PolarGravity">
            <summary>
            Gets a value representing γp, the normal gravity at poles (m s^−2).
            </summary>
        </member>
        <member name="P:GeographicLib.NormalGravity.GravityFlattening">
            <summary>
            Gets a value representing <i>f</i> *, the gravity flattening (γp − γe) / γe.
            </summary>
        </member>
        <member name="P:GeographicLib.NormalGravity.SurfacePotential">
            <summary>
            Gets a value representing <i>U</i>0, the constant normal potential for the surface of the ellipsoid (m^2 s^−2).
            </summary>
        </member>
        <member name="P:GeographicLib.NormalGravity.Earth">
            <summary>
            Gets a value representing the <see cref="T:GeographicLib.Geocentric"/> object used by this instance.
            </summary>
        </member>
        <member name="P:GeographicLib.NormalGravity.WGS84">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.NormalGravity"/> for the WGS84 ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.NormalGravity.GRS80">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.NormalGravity"/> for the GRS80 ellipsoid.
            </summary>
        </member>
        <member name="M:GeographicLib.NormalGravity.J2ToFlattening(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compute the flattening from the dynamical form factor.
            </summary>
            <param name="a">equatorial radius (meters).</param>
            <param name="GM">mass constant of the ellipsoid (meters^3/seconds^2);
            this is the product of <i>G</i> the gravitational constant and <i>M</i> the mass of the earth
            (usually including the mass of the earth's atmosphere).</param>
            <param name="omega">the angular velocity (rad s^−1).</param>
            <param name="J2">the dynamical form factor.</param>
            <returns><i>f</i>, the flattening of the ellipsoid.</returns>
            <remarks>
            This routine requires <i>a</i> > 0, <i>GM</i> > 0, <i>J2</i> &lt; 1/3 − <i>omega</i>^2 <i>a</i>^3/<i>GM</i> 8/(45π).
            A <see cref="F:System.Double.NaN"/> is returned if these conditions do not hold. The restriction to positive <i>GM</i> is made
            because for negative <i>GM</i> two solutions are possible.
            </remarks>
        </member>
        <member name="M:GeographicLib.NormalGravity.FlatteningToJ2(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compute the dynamical form factor from the flattening.
            </summary>
            <param name="a">equatorial radius (meters).</param>
            <param name="GM">mass constant of the ellipsoid (meters^3/seconds^2);
            this is the product of <i>G</i> the gravitational constant and <i>M</i> the mass of the earth
            (usually including the mass of the earth's atmosphere).</param>
            <param name="omega">the angular velocity (rad s^−1).</param>
            <param name="f">the flattening of the ellipsoid.</param>
            <returns><i>J2</i>, the dynamical form factor.</returns>
            <remarks>
            This routine requires <i>a</i> > 0, <i>GM</i> ≠ 0, <i>f</i> &lt; 1. The values of these parameters are not checked.
            </remarks>
        </member>
        <member name="T:GeographicLib.Point">
            <summary>
            Represents an ordered pair of double precision floating-point x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:GeographicLib.Point.Zero">
            <summary>
            A <see cref="T:GeographicLib.Point"/> with <i>X</i> = 0 and <i>Y</i> = 0.
            </summary>
        </member>
        <member name="M:GeographicLib.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GeographicLib.Point"/> struct with the specified <paramref name="x"/> and <paramref name="y"/> components. 
            </summary>
            <param name="x">The <i>X</i> component of the <see cref="T:GeographicLib.Point"/>.</param>
            <param name="y">The <i>Y</i> component of the <see cref="T:GeographicLib.Point"/>.</param>
        </member>
        <member name="P:GeographicLib.Point.X">
            <summary>
            The <i>X</i> component of the <see cref="T:GeographicLib.Point"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.Point.Y">
            <summary>
            The <i>Y</i> component of the <see cref="T:GeographicLib.Point"/>.
            </summary>
        </member>
        <member name="M:GeographicLib.Point.Equals(GeographicLib.Point)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.Point.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.Point.op_Equality(GeographicLib.Point,GeographicLib.Point)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.Point.op_Inequality(GeographicLib.Point,GeographicLib.Point)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.Point.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.Point.ToString">
            <summary>
            Gets the string representation of current <see cref="T:GeographicLib.Point"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GeographicLib.PolygonArea`1">
            <summary>
            Computes polygon areas.
            </summary>
            <typeparam name="T">the geodesic class to use.</typeparam>
            <remarks>
            This computes the area of a polygon whose edges are geodesics using the method given in Section 6 of
            <list type="bullet">
            <item>
            C. F. F. Karney,
            <a href="https://doi.org/10.1007/s00190-012-0578-z">Algorithms for geodesics</a>,
            J. Geodesy 87, 43–55 (2013);
            DOI: 10.1007/s00190-012-0578-z;
            addenda: <a href="https://geographiclib.sourceforge.io/geod-addenda.html">geod-addenda.html</a>.
            </item>
            </list>
            Arbitrarily complex polygons are allowed.
            In the case self-intersecting of polygons the area is accumulated "algebraically", e.g., the areas of the 2 loops in a figure-8 polygon
            will partially cancel.
            <para>
            This class lets you add vertices and edges one at a time to the polygon.
            The sequence must start with a vertex and thereafter vertices and edges can be added in any order.
            Any vertex after the first creates a new edge which is the shortest geodesic from the previous vertex.
            In some cases there may be two or many such shortest geodesics and the area is then not uniquely defined.
            In this case, either add an intermediate vertex or add the edge as an edge (by defining its direction and length).
            </para>
            <para>
            The area and perimeter are accumulated at two times the standard floating point precision to guard against the loss of accuracy
            with many-sided polygons. At any point you can ask for the perimeter and area so far. There's an option to treat the points as defining
            a polyline instead of a polygon; in that case, only the perimeter is computed.
            </para>
            <para>
            This is a templated class to allow it to be used with <see cref="T:GeographicLib.Geodesic"/>, <see cref="T:GeographicLib.GeodesicExact"/>, and <see cref="T:GeographicLib.Rhumb"/>.
            <see cref="T:GeographicLib.PolygonArea"/>, <see cref="T:GeographicLib.PolygonAreaExact"/>, and <see cref="T:GeographicLib.PolygonAreaRhumb"/> are typedefs for these cases.
            </para>
            <para>
            For <see cref="T:GeographicLib.PolygonArea"/> (edges defined by <see cref="T:GeographicLib.Geodesic"/>), an upper bound on the error is about 0.1 m^2 per vertex.
            However this is a wildly pessimistic estimate in most cases.
            A more realistic estimate of the error is given by a test involving 10^7 approximately regular polygons on the WGS84 ellipsoid.
            The centers and the orientations of the polygons were uniformly distributed, the number of vertices was log-uniformly distributed in [3, 300],
            and the center to vertex distance log-uniformly distributed in [0.1 m, 9000 km].
            </para>
            <para>
            Using double precision (the standard precision for GeographicLib and GeographicLib.NET), the maximum error in the perimeter was 200 nm,
            and the maximum error in the area was
            <code>
            <para>0.0013 m^2 for perimeter &lt; 10 km</para>
            <para>0.0070 m^2 for perimeter &lt; 100 km</para>
            <para>0.070 m^2 for perimeter &lt; 1000 km</para>
            <para>0.11 m^2 for all perimeters</para>
            </code>
            </para>
            <para>
            The errors are given in terms of the perimeter, because it is expected that the errors depend mainly on the number of edges and the edge lengths.
            </para>
            <para>
            Using long doubles (GEOGRPAHICLIB_PRECISION = 3, which is not supported by GeographicLib.NET), the maximum error in the perimeter was 200 pm,
            and the maximum error in the area was
            </para>
            <code>
            <para>0.7 mm^2 for perimeter &lt; 10 km</para>
            <para>3.2 mm^2 for perimeter &lt; 100 km</para>
            <para>21 mm^2 for perimeter &lt; 1000 km</para>
            <para>45 mm^2 for all perimeters</para>
            </code>
            </remarks>
        </member>
        <member name="M:GeographicLib.PolygonArea`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor for <see cref="T:GeographicLib.PolygonArea`1"/>.
            </summary>
            <param name="earth">the <see cref="T:GeographicLib.IGeodesicLike"/> object to use for geodesic calculations.</param>
            <param name="polyline">
            if <see langword="true"/> that treat the points as defining a polyline instead of a polygon (default = <see langword="false"/>).
            </param>
        </member>
        <member name="P:GeographicLib.PolygonArea`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.PolygonArea`1.IsPolyline">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.PolygonArea`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.PolygonArea`1.AddPoint(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.PolygonArea`1.AddPoint(GeographicLib.GeoCoords)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.PolygonArea`1.AddPoints(System.Collections.Generic.IEnumerable{GeographicLib.GeoCoords})">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.PolygonArea`1.AddEdge(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.PolygonArea`1.Compute(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.PolygonArea`1.TestPoint(System.Double,System.Double,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.PolygonArea`1.TestPoint(GeographicLib.GeoCoords,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.PolygonArea`1.TestEdge(System.Double,System.Double,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.PolygonArea`1.CurrentPoint">
            <inheritdoc/>
        </member>
        <member name="T:GeographicLib.PolygonArea">
            <summary>
            Polygon areas using <see cref="T:GeographicLib.Geodesic"/>. This should be used if the flattening is small.
            </summary>
        </member>
        <member name="M:GeographicLib.PolygonArea.#ctor(GeographicLib.Geodesic,System.Boolean)">
            <summary>
            Constructor for <see cref="T:GeographicLib.PolygonArea"/>.
            </summary>
            <param name="earth">the <see cref="T:GeographicLib.Geodesic"/> object to use for geodesic calculations.</param>
            <param name="polyline">
            if <see langword="true"/> that treat the points as defining a polyline instead of a polygon (default = <see langword="false"/>).
            </param>
        </member>
        <member name="T:GeographicLib.PolygonAreaExact">
            <summary>
            Polygon areas using <see cref="T:GeographicLib.GeodesicExact"/>.
            (But note that the implementation of areas in <see cref="T:GeographicLib.GeodesicExact"/> uses a high order series and this is only accurate for modest flattenings.)
            </summary>
        </member>
        <member name="M:GeographicLib.PolygonAreaExact.#ctor(GeographicLib.GeodesicExact,System.Boolean)">
            <summary>
            Constructor for <see cref="T:GeographicLib.PolygonAreaExact"/>.
            </summary>
            <param name="earth">the <see cref="T:GeographicLib.GeodesicExact"/> object to use for geodesic calculations.</param>
            <param name="polyline">
            if <see langword="true"/> that treat the points as defining a polyline instead of a polygon (default = <see langword="false"/>).
            </param>
        </member>
        <member name="T:GeographicLib.PolygonAreaRhumb">
            <summary>
            Polygon areas using <see cref="T:GeographicLib.Rhumb"/>.
            </summary>
        </member>
        <member name="M:GeographicLib.PolygonAreaRhumb.#ctor(GeographicLib.Rhumb,System.Boolean)">
            <summary>
            Constructor for <see cref="T:GeographicLib.PolygonAreaRhumb"/>.
            </summary>
            <param name="earth">the <see cref="T:GeographicLib.Rhumb"/> object to use for geodesic calculations.</param>
            <param name="polyline">
            if <see langword="true"/> that treat the points as defining a polyline instead of a polygon (default = <see langword="false"/>).
            </param>
        </member>
        <member name="T:GeographicLib.Projections.AlbersEqualArea">
            <summary>
            Albers equal area conic projection.
            </summary>
            <remarks>
            <para>
            Implementation taken from the report,
            - J.P.Snyder,
              <a href = "http://pubs.er.usgs.gov/usgspubs/pp/pp1395" > Map Projections: A
            Working Manual</a>, USGS Professional Paper 1395 (1987),
            pp. 101--102.
            </para>
            <para>
            This is a implementation of the equations in Snyder except that divided
            differences will be[have been] used to transform the expressions into
            ones which may be evaluated accurately.  [In this implementation, the
            projection correctly becomes the cylindrical equal area or the azimuthal
            equal area projection when the standard latitude is the equator or a
            pole.]
            </para>
            </remarks>
        </member>
        <member name="F:GeographicLib.Projections.AlbersEqualArea._numit">
            <summary>
            Newton iterations in Reverse
            </summary>
        </member>
        <member name="F:GeographicLib.Projections.AlbersEqualArea._numit0">
            <summary>
            Newton iterations in Init
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.#ctor(GeographicLib.IEllipsoid,System.Double,System.Double)">
            <summary>
            Constructor with a single standard parallel.
            </summary>
            <param name="ellipsoid"><see cref="T:GeographicLib.IEllipsoid"/> instance to be used in projection.</param>
            <param name="stdlat">standard parallel (degrees), the circle of tangency.</param>
            <param name="k0">azimuthal scale on the standard parallel.</param>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.#ctor(GeographicLib.IEllipsoid,System.Double,System.Double,System.Double)">
            <summary>
            Constructor with two standard parallels.
            </summary>
            <param name="ellipsoid"><see cref="T:GeographicLib.IEllipsoid"/> instance to be used in projection.</param>
            <param name="stdlat1">first standard parallel (degrees).</param>
            <param name="stdlat2">second standard parallel (degrees).</param>
            <param name="k1">azimuthal scale on the standard parallels.</param>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor with a single standard parallel.
            </summary>
            <param name="a">equatorial radius of ellipsoid (meters).</param>
            <param name="f">flattening of ellipsoid.  Setting <i>f</i> = 0 gives a sphere.</param>
            <param name="stdlat">standard parallel (degrees), the circle of tangency.</param>
            <param name="k0">azimuthal scale on the standard parallel.</param>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor with two standard parallels.
            </summary>
            <param name="a">equatorial radius of ellipsoid (meters).</param>
            <param name="f">flattening of ellipsoid.  Setting <i>f</i> = 0 gives a sphere.</param>
            <param name="stdlat1">first standard parallel (degrees).</param>
            <param name="stdlat2">second standard parallel (degrees).</param>
            <param name="k1">azimuthal scale on the standard parallels.</param>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor with two standard parallels specified by sines and cosines.
            </summary>
            <param name="a">equatorial radius of ellipsoid (meters).</param>
            <param name="f">flattening of ellipsoid.  Setting <i>f</i> = 0 gives a sphere.</param>
            <param name="sinlat1">sine of first standard parallel.</param>
            <param name="coslat1">cosine of first standard parallel.</param>
            <param name="sinlat2">sine of second standard parallel.</param>
            <param name="coslat2">cosine of second standard parallel.</param>
            <param name="k1">azimuthal scale on the standard parallels.</param>
            <remarks>
            This allows parallels close to the poles to be specified accurately.
            This routine computes the latitude of origin and the azimuthal scale at
            this latitude.If <i>dlat</i> = abs(<i>lat2</i> - <i>lat1</i>) &lt;= 160°,
            then the error in the latitude of origin is less than 4.5 * 10^-14 d;.
            </remarks>
        </member>
        <member name="P:GeographicLib.Projections.AlbersEqualArea.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius of the ellipsoid (meters).  This is the value used in the constructor.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.AlbersEqualArea.Flattening">
            <summary>
            Gets a value representing the flattening of the ellipsoid.  This is the value used in the constructor.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.AlbersEqualArea.OriginLatitude">
            <summary>
            Gets a value representing the latitude of the origin for the projection (degrees).
            </summary>
            <remarks>
            This is the latitude of minimum azimuthal scale and equals the <i>stdlat</i> 
            in the 1-parallel constructor and lies between <i>stdlat1</i>  and <i>stdlat2</i> 
            in the 2-parallel constructors.
            </remarks>
        </member>
        <member name="P:GeographicLib.Projections.AlbersEqualArea.CentralScale">
            <summary>
            Gets a value representing central scale for the projection.  This is the azimuthal scale on the latitude of origin.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.AlbersEqualArea.IsFrozen">
            <summary>
            Gets or sets an value representing that whether current <see cref="T:GeographicLib.Projections.AlbersEqualArea"/> is frozen.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.AlbersEqualArea.Cylindrical">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Projections.AlbersEqualArea"/> with the WGS84 ellipsoid, 
            <i>stdlat</i> = 0, and <i>k0</i> = 1.This degenerates to the cylindrical equalarea projection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GeographicLib.Projections.AlbersEqualArea.North">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Projections.AlbersEqualArea"/> with the WGS84 ellipsoid, 
            <i>stdlat</i> = 90°, and <i>k0</i> = 1.This degenerates to the Lambert azimuthal equal area projection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GeographicLib.Projections.AlbersEqualArea.South">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Projections.AlbersEqualArea"/> with the WGS84 ellipsoid, 
            <i>stdlat</i> = -90°, and <i>k0</i> = 1.This degenerates to the Lambert azimuthal equal area projection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.Freeze">
            <summary>
            Freeze current <see cref="T:GeographicLib.Projections.AlbersEqualArea"/> instance to prevent its scale being modified.
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.SetScale(System.Double,System.Double)">
            <summary>
            Set the azimuthal scale for the projection.
            </summary>
            <param name="lat">lat (degrees).</param>
            <param name="k">azimuthal scale at latitude <paramref name="lat"/> (default 1).</param>
            <remarks>
            This allows a "latitude of conformality" to be specified.
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.Forward(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Forward projection, from geographic to Lambert conformal conic.
            </summary>
            <param name="lon0">central meridian longitude (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">azimuthal scale of projection at point; the radial scale is the 1/<paramref name="k"/>.</param>
            <returns>
            <i>x</i>, easting of point and <i>y</i>, northing of point, in meters.
            </returns>
            <remarks>
            The latitude origin is given by <see cref="P:GeographicLib.Projections.AlbersEqualArea.OriginLatitude"/>.  No
            false easting or northing is added and <paramref name="lat"/> should be in the range
            [-90°, 90°].  The values of <i>x</i> and <i>y</i> returned for
            points which project to infinity (i.e., one or both of the poles) will
            be large but finite.
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.Forward(System.Double,System.Double,System.Double)">
            <summary>
            Forward without returning convergence and scale.
            </summary>
            <param name="lon0">central meridian longitude (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <returns>
            <i>x</i>, easting of point and <i>y</i>, northing of point, in meters.
            </returns>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.Reverse(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Reverse projection, from Lambert conformal conic to geographic.
            </summary>
            <param name="lon0">central meridian longitude (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">azimuthal scale of projection at point; the radial scale is the 1/<paramref name="k"/>.</param>
            <returns>
            <i>lat</i>, latitude of point and <i>lon</i>, longitude of point, in degress.
            </returns>
            <remarks>
            The latitude origin is given by <see cref="P:GeographicLib.Projections.AlbersEqualArea.OriginLatitude"/>.  No
            false easting or northing is added. The value of <i>lon</i> returned is in
            the range[-180°, 180°].  The value of <i>lat</i> returned is
            in the range[-90°, 90°].  If the input point is outside
            the legal projected space the nearest pole is returned.
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.Reverse(System.Double,System.Double,System.Double)">
            <summary>
            Reverse without returning convergence and scale.
            </summary>
            <param name="lon0">central meridian longitude (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <returns>
            <i>lat</i>, latitude of point and <i>lon</i>, longitude of point, in degress.
            </returns>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.AtanhEE(System.Double)">
            <summary>
            <para>Returns atanh(      e   * x)/      e   when f > 0,</para>
            <para>Returns atan (sqrt(-e2) * x)/sqrt(-e2) when f &lt; 0,</para>
            <para>Returns x                              when f = 0.</para>
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.AtanhXm1(System.Double)">
            <summary>
              return atanh(sqrt(x))/sqrt(x) - 1 = y/3 + y^2/5 + y^3/7 + ...
              typical x &lt; e^2 = 2*f
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.DAtanhEE(System.Double,System.Double)">
            <summary>
            Datanhee(x,y) = atanhee((x-y)/(1-e^2*x*y))/(x-y)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.DDAtanhEE(System.Double,System.Double)">
            <summary>
            Returns (Datanhee(1,y) - Datanhee(1,x))/(y-x)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Projections.AlbersEqualArea.Dsn(System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Divided differences
             <para>Definition: Df(x,y) = (f(x)-f(y))/(x-y)</para>
             <para>
             See:
               W. M. Kahan and R. J. Fateman,
               Symbolic computation of divided differences,
               SIGSAM Bull. 33(2), 7-28 (1999)
               https://doi.org/10.1145/334714.334716
               http://www.cs.berkeley.edu/~fateman/papers/divdiff.pdf
             </para>
             <para>General rules</para>
             <para>h(x) = f(g(x)): Dh(x,y) = Df(g(x),g(y))*Dg(x,y)</para>
             <para>h(x) = f(x)*g(x):</para>
             <para>Dh(x,y) = Df(x,y)*g(x) + Dg(x,y)*f(y)</para>
             <para>        = Df(x,y)*g(y) + Dg(x,y)*f(x)</para>
             <para>        = Df(x,y)*(g(x)+g(y))/2 + Dg(x,y)*(f(x)+f(y))/2</para>
            
             <para>sn(x) = x/sqrt(1+x^2): Dsn(x,y) = (x+y)/((sn(x)+sn(y))*(1+x^2)*(1+y^2))</para>
             </summary>
             <param name="x"></param>
             <param name="y"></param>
             <param name="sx"></param>
             <param name="sy"></param>
             <returns></returns>
        </member>
        <member name="T:GeographicLib.Projections.AzimuthalEquidistant">
            <summary>
            Azimuthal equidistant projection.
            </summary>
            <remarks>
            Azimuthal equidistant projection centered at an arbitrary position on the ellipsoid.
            For a point in projected space (<i>x</i>, <i>y</i>), the geodesic distance from the center position is hypot(<i>x</i>, <i>y</i>) 
            and the azimuth of the geodesic from the center point is atan2(<i>x</i>, <i>y</i>).
            The <see cref="M:GeographicLib.Projections.AzimuthalEquidistant.Forward(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> and 
            <see cref="M:GeographicLib.Projections.AzimuthalEquidistant.Reverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> methods also return the azimuth <i>azi</i> of the geodesic at (<i>x</i>, <i>y</i>)
            and reciprocal scale <i>rk</i> in the azimuthal direction which, together with the basic properties of the projection, serve to specify
            completely the local affine transformation between geographic and projected coordinates.
            <para>
            The conversions all take place using a <see cref="T:GeographicLib.Geodesic"/> object (by default <see cref="P:GeographicLib.Geodesic.WGS84"/>).
            For more information on geodesics see <a href="https://geographiclib.sourceforge.io/html/geodesic.html">Geodesics on an ellipsoid of revolution</a>.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.AzimuthalEquidistant.#ctor(GeographicLib.IGeodesic)">
            <summary>
            Constructor for <see cref="T:GeographicLib.Projections.AzimuthalEquidistant"/>.
            </summary>
            <param name="earth">the <see cref="T:GeographicLib.IGeodesic"/> object to use for geodesic calculations.</param>
        </member>
        <member name="M:GeographicLib.Projections.AzimuthalEquidistant.#ctor">
            <summary>
            Initialize a <see cref="T:GeographicLib.Projections.AzimuthalEquidistant"/> with <see cref="P:GeographicLib.Geodesic.WGS84"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.AzimuthalEquidistant.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius (<i>a</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.AzimuthalEquidistant.Flattening">
            <summary>
            Gets a value representing the flattening (<i>f</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.AzimuthalEquidistant.Forward(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Forward projection, from geographic to azimuthal equidistant.
            </summary>
            <param name="lat0">latitude of center point of projection (degrees).</param>
            <param name="lon0">longitude of center point of projection (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="azi">azimuth of easting direction at point (degrees).</param>
            <param name="rk">reciprocal of azimuthal northing scale at point.</param>
            <returns>
            <i>x</i>, easting of point and <i>y</i>, northing of point, in meters.
            </returns>
            <remarks>
            <paramref name="lat0"/> and <paramref name="lat"/>  should be in the range [−90°, 90°].
            The scale of the projection is 1 in the "radial" direction, <paramref name="azi"/> clockwise from true north,
            and is 1/<paramref name="rk"/> in the direction perpendicular to this.
            A call to <see cref="M:GeographicLib.Projections.AzimuthalEquidistant.Forward(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> 
            followed by a call to <see cref="M:GeographicLib.Projections.AzimuthalEquidistant.Reverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> 
            will return the original (<paramref name="lat"/>, <paramref name="lon"/>) (to within roundoff).
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.AzimuthalEquidistant.Forward(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Forward without returning the azimuth and scale.
            </summary>
            <param name="lat0">latitude of center point of projection (degrees).</param>
            <param name="lon0">longitude of center point of projection (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <returns>
            <i>x</i>, easting of point and <i>y</i>, northing of point, in meters.
            </returns>
            <remarks>
            <paramref name="lat0"/> and <paramref name="lat"/>  should be in the range [−90°, 90°].
            The scale of the projection is 1 in the "radial" direction, <i>azi</i> clockwise from true north,
            and is 1/<i>rk</i> in the direction perpendicular to this.
            A call to <see cref="M:GeographicLib.Projections.AzimuthalEquidistant.Forward(System.Double,System.Double,System.Double,System.Double)"/> followed by a call to
            <see cref="M:GeographicLib.Projections.AzimuthalEquidistant.Reverse(System.Double,System.Double,System.Double,System.Double)"/> 
            will return the original (<paramref name="lat"/>, <paramref name="lon"/>) (to within roundoff).
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.AzimuthalEquidistant.Reverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Reverse projection, from azimuthal equidistant to geographic.
            </summary>
            <param name="lat0">latitude of center point of projection (degrees).</param>
            <param name="lon0">longitude of center point of projection (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="azi">azimuth of easting direction at point (degrees).</param>
            <param name="rk">reciprocal of azimuthal northing scale at point.</param>
            <returns>
            <i>lat</i>, latitude of point and <i>lon</i>, longitude of point, in degress.
            </returns>
            <remarks>
            <paramref name="lat0"/> should be in the range [−90°, 90°].
            <i>lat</i> will be in the range [−90°, 90°] and <i>lon</i> will be in the range [−180°, 180°].
            The scale of the projection is 1 in the "radial" direction, <paramref name="azi"/> clockwise from true north,
            and is 1/<paramref name="rk"/> in the direction perpendicular to this.
            A call to <see cref="M:GeographicLib.Projections.AzimuthalEquidistant.Reverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> 
            followed by a call to <see cref="M:GeographicLib.Projections.AzimuthalEquidistant.Forward(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> 
            will return the original (<paramref name="x"/>, <paramref name="y"/>) (to within roundoff) only if the geodesic to 
            (<paramref name="x"/>, <paramref name="y"/>) is a shortes path.
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.AzimuthalEquidistant.Reverse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Reverse without returning the azimuth and scale.
            </summary>
            <param name="lat0">latitude of center point of projection (degrees).</param>
            <param name="lon0">longitude of center point of projection (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <returns>
            <i>lat</i>, latitude of point and <i>lon</i>, longitude of point, in degress.
            </returns>
            <remarks>
            <paramref name="lat0"/> should be in the range [−90°, 90°].
            <i>lat</i> will be in the range [−90°, 90°] and <i>lon</i> will be in the range [−180°, 180°].
            The scale of the projection is 1 in the "radial" direction, <i>azi</i> clockwise from true north,
            and is 1/<i>rk</i> in the direction perpendicular to this.
            A call to <see cref="M:GeographicLib.Projections.AzimuthalEquidistant.Reverse(System.Double,System.Double,System.Double,System.Double)"/> 
            followed by a call to <see cref="M:GeographicLib.Projections.AzimuthalEquidistant.Forward(System.Double,System.Double,System.Double,System.Double)"/> 
            will return the original (<paramref name="x"/>, <paramref name="y"/>) (to within roundoff) only if the geodesic to 
            (<paramref name="x"/>, <paramref name="y"/>) is a shortes path.
            </remarks>
        </member>
        <member name="T:GeographicLib.Projections.CassiniSoldner">
            <summary>
            Cassini-Soldner projection.
            </summary>
            <remarks>
            <para>
            Cassini-Soldner projection centered at an arbitrary position, <i>lat0</i>, <i>lon0</i>, on the ellipsoid.
            This projection is a transverse cylindrical equidistant projection.
            The projection from (<i>lat</i>, <i>lon</i>) to easting and northing (<i>x</i>, <i>y</i>) is defined by geodesics as follows.
            Go north along a geodesic a distance <i>y</i> from the central point; then turn clockwise 90° and go a distance <i>x</i> along a geodesic.
            (Although the initial heading is north, this changes to south if the pole is crossed.) This procedure uniquely defines the reverse projection.
            The forward projection is constructed as follows. Find the point (<i>lat1</i>, <i>lon1</i>) on the meridian closest to (<i>lat</i>, <i>lon</i>).
            Here we consider the full meridian so that lon1 may be either <i>lon0</i> or <i>lon0</i> + 180°.
            x is the geodesic distance from (<i>lat1</i>, <i>lon1</i>) to (<i>lat</i>, <i>lon</i>), appropriately signed according to which side of the 
            central meridian (<i>lat</i>, <i>lon</i>) lies. y is the shortest distance along the meridian from (<i>lat0</i>, <i>lon0</i>) to 
            (<i>lat1</i>, <i>lon1</i>), again, appropriately signed according to the initial heading. 
            [Note that, in the case of prolate ellipsoids, the shortest meridional path from (<i>lat0</i>, <i>lon0</i>) to (<i>lat1</i>, <i>lon1</i>) 
            may not be the shortest path.]
            This procedure uniquely defines the forward projection except for a small class of points for which there may be two equally short routes for
            either leg of the path.
            </para>
            <para>
            Because of the properties of geodesics, the (<i>x</i>, <i>y</i>) grid is orthogonal.
            The scale in the easting direction is unity. The scale, <i>k</i>, in the northing direction is unity on the central meridian and increases away 
            from the central meridian.
            The projection routines return azi, the true bearing of the easting direction, and <i>rk</i> = 1/<i>k</i>, the reciprocal of the scale in the
            northing direction.
            </para>
            <para>
            The conversions all take place using a <see cref="T:GeographicLib.Geodesic"/> object (by default <see cref="P:GeographicLib.Geodesic.WGS84"/>).
            For more information on geodesics see <a href="https://geographiclib.sourceforge.io/html/geodesic.html">Geodesics on an ellipsoid of revolution</a>. 
            The determination of (<i>lat1</i>, <i>lon1</i>) in the forward projection is by solving the inverse geodesic problem for (<i>lat</i>, <i>lon</i>)
            and its twin obtained by reflection in the meridional plane. 
            The scale is found by determining where two neighboring geodesics intersecting the central meridian at <i>lat1</i> and <i>lat1</i> + <i>dlat1</i>
            intersect and taking the ratio of the reduced lengths for the two geodesics between that point and, respectively, (<i>lat1</i>, <i>lon1</i>) and (<i>lat</i>, <i>lon</i>).
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.CassiniSoldner.#ctor">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.CassiniSoldner"/> instance with <see cref="P:GeographicLib.Geodesic.WGS84"/>.
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.CassiniSoldner.#ctor(GeographicLib.IGeodesic)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.CassiniSoldner"/> instance with specified <see cref="T:GeographicLib.IGeodesic"/> instance.
            </summary>
            <param name="earth">the <see cref="T:GeographicLib.IGeodesic"/> object to use for geodesic calculations.</param>
        </member>
        <member name="M:GeographicLib.Projections.CassiniSoldner.#ctor(System.Double,System.Double,GeographicLib.IGeodesic)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.CassiniSoldner"/> instance with specified center point and <see cref="T:GeographicLib.Geodesic"/> instance.
            </summary>
            <param name="earth">the <see cref="T:GeographicLib.Geodesic"/> object to use for geodesic calculations.</param>
            <param name="lat0">latitude of center point of projection (degrees).</param>
            <param name="lon0">longitude of center point of projection (degrees).</param>
        </member>
        <member name="P:GeographicLib.Projections.CassiniSoldner.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius (<i>a</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.CassiniSoldner.Flattening">
            <summary>
            Gets a value representing the flatterning (<i>f</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.CassiniSoldner.LatitudeOrigin">
            <summary>
            Gets a value representing the latitude of origin (degrees).
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.CassiniSoldner.LongitudeOrigin">
            <summary>
            Gets a value representing the longitude of origin (degrees).
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.CassiniSoldner.Reset(System.Double,System.Double)">
            <summary>
            Set the central point of the projection
            </summary>
            <param name="lat0">latitude of center point of projection (degrees).</param>
            <param name="lon0">longitude of center point of projection (degrees).</param>
            <remarks>
            <paramref name="lat0"/> should be in the range [−90°, 90°].
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.CassiniSoldner.Forward(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Forward projection, from geographic to Cassini-Soldner.
            </summary>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="azi">azimuth of easting direction at point (degrees).</param>
            <param name="rk">reciprocal of azimuthal northing scale at point.</param>
            <returns>
            <i>x</i>, easting of point and <i>y</i>, northing of point, in meters.
            </returns>
            <remarks>
            <paramref name="lat"/> should be in the range [−90°, 90°].
            A call to <see cref="M:GeographicLib.Projections.CassiniSoldner.Forward(System.Double,System.Double,System.Double@,System.Double@)"/> 
            followed by a call to <see cref="M:GeographicLib.Projections.CassiniSoldner.Reverse(System.Double,System.Double,System.Double@,System.Double@)"/> 
            will return the original (<paramref name="lat"/>, <paramref name="lon"/>) (to within roundoff).
            The routine does nothing if the origin has not been set.
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.CassiniSoldner.Reverse(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Reverse projection, from Cassini-Soldner to geographic.
            </summary>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="azi">azimuth of easting direction at point (degrees).</param>
            <param name="rk">reciprocal of azimuthal northing scale at point.</param>
            <returns>
            <i>lat</i>, latitude of point and <i>lon</i>, longitude of point, in degress.
            </returns>
            <remarks>
            A call to <see cref="M:GeographicLib.Projections.CassiniSoldner.Reverse(System.Double,System.Double,System.Double@,System.Double@)"/> followed
            by a call to <see cref="M:GeographicLib.Projections.CassiniSoldner.Forward(System.Double,System.Double,System.Double@,System.Double@)"/> will 
            return the original (<paramref name="x"/>, <paramref name="y"/>) (to within roundoff), 
            provided that <paramref name="x"/> and <paramref name="y"/> are sufficiently small not to "wrap around" the earth. 
            The routine does nothing if the origin has not been set.
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.CassiniSoldner.Forward(System.Double,System.Double)">
            <summary>
            Forward without returning the azimuth and scale.
            </summary>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <returns>
            <i>x</i>, easting of point and <i>y</i>, northing of point, in meters.
            </returns>
            <remarks>
            <paramref name="lat"/> should be in the range [−90°, 90°].
            A call to <see cref="M:GeographicLib.Projections.CassiniSoldner.Forward(System.Double,System.Double)"/> 
            followed by a call to <see cref="M:GeographicLib.Projections.CassiniSoldner.Reverse(System.Double,System.Double)"/> 
            will return the original (<paramref name="lat"/>, <paramref name="lon"/>) (to within roundoff).
            The routine does nothing if the origin has not been set.
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.CassiniSoldner.Reverse(System.Double,System.Double)">
            <summary>
            Reverse without returning the azimuth and scale.
            </summary>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <returns>
            <i>lat</i>, latitude of point and <i>lon</i>, longitude of point, in degress.
            </returns>
            <remarks>
            A call to <see cref="M:GeographicLib.Projections.CassiniSoldner.Reverse(System.Double,System.Double)"/> followed
            by a call to <see cref="M:GeographicLib.Projections.CassiniSoldner.Forward(System.Double,System.Double)"/> will 
            return the original (<paramref name="x"/>, <paramref name="y"/>) (to within roundoff), 
            provided that <paramref name="x"/> and <paramref name="y"/> are sufficiently small not to "wrap around" the earth. 
            The routine does nothing if the origin has not been set.
            </remarks>
        </member>
        <member name="T:GeographicLib.Projections.Gnomonic">
            <summary>
            Gnomonic projection.
            </summary>
            <remarks>
            Gnomonic projection centered at an arbitrary position C on the ellipsoid.
            This projection is derived in Section 8 of
            <list type="bullet">
            <item>C. F. F. Karney, <a href="https://doi.org/10.1007/s00190-012-0578-z">
            Algorithms for geodesics</a>, J. Geodesy 87, 43–55 (2013);
            DOI: <a href="https://doi.org/10.1007/s00190-012-0578-z">10.1007/s00190-012-0578-z</a>;
            addenda: <a href="https://geographiclib.sourceforge.io/geod-addenda.html">geod-addenda.html</a>.</item>
            </list>
            The projection of <i>P</i> is defined as follows:
            compute the geodesic line from <i>C</i> to <i>P</i>; compute the reduced length <i>m12</i>,
            geodesic scale <i>M12</i>, and ρ = <i>m12</i>/<i>M12</i>; finally <i>x</i> = ρ sin <i>azi1</i>;
            <i>y</i> = ρ cos <i>azi1</i>, where <i>azi1</i> is the azimuth of the geodesic at <i>C</i>.
            The <see cref="M:GeographicLib.Projections.Gnomonic.Forward(System.Double,System.Double,System.Double,System.Double)"/> and 
            <see cref="M:GeographicLib.Projections.Gnomonic.Reverse(System.Double,System.Double,System.Double,System.Double)"/> methods also return the azimuth <i>azi</i>
            of the geodesic at <i>P</i> and reciprocal scale <i>rk</i> in the azimuthal direction.
            The scale in the radial direction if 1/<i>rk</i>^2.
            <para>
            For a sphere, ρ is reduces to a tan(<i>s12</i>/<i>a</i>),
            where <i>s12</i> is the length of the geodesic from <i>C</i> to <i>P</i>,
            and the gnomonic projection has the property that all geodesics appear as straight lines.
            For an ellipsoid, this property holds only for geodesics interesting the centers.
            However geodesic segments close to the center are approximately straight.
            </para>
            <para>
            Consider a geodesic segment of length <i>l</i>.
            Let <i>T</i> be the point on the geodesic (extended if necessary) closest to <i>C</i> the
            center of the projection and t be the distance <i>CT</i>.
            To lowest order, the maximum deviation (as a true distance) of the corresponding gnomonic
            line segment (i.e., with the same end points) from the geodesic is
            </para>
            <list type="table">
            <item>(<i>K</i>(<i>T</i>) - <i>K</i>(<i>C</i>)) <i>l</i>^2 <i>t</i> / 32.</item>
            </list>
            where <i>K</i> is the Gaussian curvature.
            <para>
            This result applies for any surface. For an ellipsoid of revolution,
            consider all geodesics whose end points are within a distance <i>r</i> of <i>C</i>.
            For a given <i>r</i>, the deviation is maximum when the latitude of <i>C</i> is 45°,
            when endpoints are a distance <i>r</i> away, and when their azimuths from the center
            are ± 45° or ± 135°. To lowest order in <i>r</i> and the flattening <i>f</i>,
            the deviation is <i>f</i> (<i>r</i>/2<i>a</i>)^3 <i>r</i>.
            </para>
            <para>
            The conversions all take place using a <see cref="T:GeographicLib.Geodesic"/> object
            (by default <see cref="P:GeographicLib.Geodesic.WGS84"/>).
            For more information on geodesics see
            <a href="https://geographiclib.sourceforge.io/C++/doc/geodesic.html">
            Geodesics on an ellipsoid of revolution</a>.
            </para>
            <b>Warning</b>
            <para>
            The definition of this projection for a sphere is standard.
            However, there is no standard for how it should be extended to an ellipsoid.
            The choices are:
            </para>
            <list type="bullet">
            <item>Declare that the projection is undefined for an ellipsoid.</item>
            <item>
            Project to a tangent plane from the center of the ellipsoid.
            This causes great ellipses to appear as straight lines in the projection;
            i.e., it generalizes the spherical great circle to a great ellipse.
            This was proposed by independently by Bowring and Williams in 1997.
            </item>
            <item>
            Project to the conformal sphere with the constant of integration chosen so that
            the values of the latitude match for the center point and perform a central
            projection onto the plane tangent to the conformal sphere at the center point.
            This causes normal sections through the center point to appear as straight lines
            in the projection; i.e., it generalizes the spherical great circle to a normal
            section. This was proposed by I. G. Letoval'tsev, Generalization of the gnomonic
            projection for a spheroid and the principal geodetic problems involved in the
            alignment of surface routes, Geodesy and Aerophotography (5), 271–274 (1963).
            </item>
            <item>
            The projection given here. This causes geodesics close to the center point to
            appear as straight lines in the projection; i.e., it generalizes the spherical
            great circle to a geodesic.
            </item>
            </list>
             </remarks>
        </member>
        <member name="M:GeographicLib.Projections.Gnomonic.#ctor(GeographicLib.IGeodesic)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.Gnomonic"/> instance with specified <see cref="T:GeographicLib.Geodesic"/> instance.
            </summary>
            <param name="earth">the <see cref="T:GeographicLib.IGeodesic"/> object to use for geodesic calculations.</param>
        </member>
        <member name="M:GeographicLib.Projections.Gnomonic.#ctor">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.Gnomonic"/> instance with <see cref="P:GeographicLib.Geodesic.WGS84"/>.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.Gnomonic.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.Projections.Gnomonic.Flattening">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.Projections.Gnomonic.Forward(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Forward projection, from geographic to gnomonic.
            </summary>
            <param name="lat0">latitude of center point of projection (degrees).</param>
            <param name="lon0">longitude of center point of projection (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="azi">azimuth of geodesic at point (degrees).</param>
            <param name="rk">reciprocal of azimuthal scale at point.</param>
            <returns>
            <i>x</i>, easting of point (meters) and <i>y</i>, northing of point (meters).
            </returns>
            <remarks>
            <paramref name="lat0"/> and <paramref name="lat"/> should be in the range [−90°, 90°].
            The scale of the projection is 1/<paramref name="rk"/>^2 in the "radial" direction, <paramref name="azi"/> clockwise from true north,
            and is 1/<paramref name="rk"/> in the direction perpendicular to this. If the point lies "over the horizon", i.e.,
            if <paramref name="rk"/> ≤ 0, then <see cref="F:System.Double.NaN"/>s are returned for <i>x</i> and <i>y</i> 
            (the correct values are returned for <paramref name="azi"/> and <paramref name="rk"/>).
            A call to <see cref="M:GeographicLib.Projections.Gnomonic.Forward(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> followed by a call to
            <see cref="M:GeographicLib.Projections.Gnomonic.Reverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> will return the 
            original (<paramref name="lat"/>, <paramref name="lon"/>) (to within roundoff) provided the point in not over the horizon.
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.Gnomonic.Forward(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="M:GeographicLib.Projections.Gnomonic.Forward(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> without returning the azimuth and scale.
            </summary>
            <param name="lat0">latitude of center point of projection (degrees).</param>
            <param name="lon0">longitude of center point of projection (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <returns>
            <i>x</i>, easting of point (meters) and <i>y</i>, northing of point (meters).
            </returns>
        </member>
        <member name="M:GeographicLib.Projections.Gnomonic.Reverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Reverse projection, from gnomonic to geographic.
            </summary>
            <param name="lat0">latitude of center point of projection (degrees).</param>
            <param name="lon0">longitude of center point of projection (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="azi">azimuth of geodesic at point (degrees).</param>
            <param name="rk">reciprocal of azimuthal scale at point.</param>
            <returns>
            <i>lat</i>, latitude of point (degrees) and <i>lon</i>, longitude of point (degrees).
            </returns>
            <remarks>
            <paramref name="lat0"/> should be in the range [−90°, 90°].
            <i>lat</i> will be in the range [−90°, 90°] and <i>lon</i> will be in the range [−180°, 180°].
            The scale of the projection is 1/<paramref name="rk"/>^2 in the "radial" direction, <paramref name="azi"/> clockwise from true north,
            and is 1/<paramref name="rk"/> in the direction perpendicular to this. Even though all inputs should return a valid <i>lat</i> and <i>lon</i>,
            it's possible that the procedure fails to converge for very large <paramref name="x"/> or <paramref name="y"/>;
            in this case <see cref="F:System.Double.NaN"/>s are returned for all the output arguments.
            A call to <see cref="M:GeographicLib.Projections.Gnomonic.Reverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> followed by a call to
            <see cref="M:GeographicLib.Projections.Gnomonic.Forward(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> 
            will return the original (<paramref name="x"/>, <paramref name="y"/>) (to roundoff).
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.Gnomonic.Reverse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="M:GeographicLib.Projections.Gnomonic.Reverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> without returning the azimuth and scale.
            </summary>
            <param name="lat0">latitude of center point of projection (degrees).</param>
            <param name="lon0">longitude of center point of projection (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <returns>
            <i>lat</i>, latitude of point (degrees) and <i>lon</i>, longitude of point (degrees).
            </returns>
        </member>
        <member name="T:GeographicLib.Projections.LambertConformalConic">
            <summary>
            Lambert conformal conic projection.
            </summary>
            <remarks>
            Implementation taken from the report,
            <list type="bullet">
            <item>
            J. P. Snyder, <a href="http://pubs.er.usgs.gov/usgspubs/pp/pp1395">Map Projections: A Working Manual</a>,
            USGS Professional Paper 1395 (1987), pp. 107–109.
            </item>
            </list>
            <para>
            This is a implementation of the equations in Snyder except that divided differences have been used to 
            transform the expressions into ones which may be evaluated accurately and that Newton's method is used
            to invert the projection. In this implementation, the projection correctly becomes the Mercator projection
            or the polar stereographic projection when the standard latitude is the equator or a pole. The accuracy of
            the projections is about 10 nm (10 nanometers).
            </para>
            <para>
            The ellipsoid parameters, the standard parallels, and the scale on the standard parallels are set in the constructor.
            Internally, the case with two standard parallels is converted into a single standard parallel, the latitude of tangency
            (also the latitude of minimum scale), with a scale specified on this parallel. This latitude is also used as the latitude
            of origin which is returned by <see cref="P:GeographicLib.Projections.LambertConformalConic.OriginLatitude"/>. The scale on the latitude of origin is given by 
            <see cref="P:GeographicLib.Projections.LambertConformalConic.CentralScale"/>. The case with two distinct standard parallels where one is a pole is singular and is disallowed.
            The central meridian (which is a trivial shift of the longitude) is specified as the <i>lon0</i> argument of the 
            <see cref="M:GeographicLib.Projections.LambertConformalConic.Forward(System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            and <see cref="M:GeographicLib.Projections.LambertConformalConic.Reverse(System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> functions.
            </para>
            <para>
            This class also returns the meridian convergence <i>gamma</i> and scale <i>k</i>. 
            The meridian convergence is the bearing of grid north (the <i>y</i> axis) measured clockwise from true north.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.#ctor(GeographicLib.IEllipsoid,System.Double,System.Double)">
            <summary>
            Constructor with a single standard parallel.
            </summary>
            <param name="ellipsoid"><see cref="T:GeographicLib.IEllipsoid"/> instance to be used in projection.</param>
            <param name="stdlat">standard parallel (degrees), the circle of tangency.</param>
            <param name="k0">scale on the standard parallel.</param>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.#ctor(GeographicLib.IEllipsoid,System.Double,System.Double,System.Double)">
            <summary>
            Constructor with two standard parallels.
            </summary>
            <param name="ellipsoid"><see cref="T:GeographicLib.IEllipsoid"/> instance to be used in projection.</param>
            <param name="stdlat1">first standard parallel (degrees).</param>
            <param name="stdlat2">second standard parallel (degrees).</param>
            <param name="k1">scale on the standard parallels.</param>
            <exception cref="T:GeographicLib.GeographicException">
            When <i>a</i>, (1 − <i>f</i>) <i>a</i>, or <paramref name="k1"/> is not positive. 
            When <paramref name="stdlat1"/> or <paramref name="stdlat2"/> is not in [−90°, 90°], 
            or if either <paramref name="stdlat1"/> or <paramref name="stdlat2"/> is a pole and <paramref name="stdlat1"/> is not equal <paramref name="stdlat2"/>.
            </exception>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor with a single standard parallel.
            </summary>
            <param name="a">equatorial radius of ellipsoid (meters).</param>
            <param name="f">flattening of ellipsoid. Setting <i>f</i> = 0 gives a sphere. Negative <i>f</i> gives a prolate ellipsoid.</param>
            <param name="stdlat">standard parallel (degrees), the circle of tangency.</param>
            <param name="k0">scale on the standard parallel.</param>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor with two standard parallels.
            </summary>
            <param name="a">equatorial radius of ellipsoid (meters).</param>
            <param name="f">flattening of ellipsoid. Setting <i>f</i> = 0 gives a sphere. Negative <i>f</i> gives a prolate ellipsoid.</param>
            <param name="stdlat1">first standard parallel (degrees).</param>
            <param name="stdlat2">second standard parallel (degrees).</param>
            <param name="k1">scale on the standard parallels.</param>
            <exception cref="T:GeographicLib.GeographicException">
            When <paramref name="a"/>, (1 − <paramref name="f"/>) <paramref name="a"/>, or <paramref name="k1"/> is not positive. 
            When <paramref name="stdlat1"/> or <paramref name="stdlat2"/> is not in [−90°, 90°], 
            or if either <paramref name="stdlat1"/> or <paramref name="stdlat2"/> is a pole and <paramref name="stdlat1"/> is not equal <paramref name="stdlat2"/>.
            </exception>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor with two standard parallels specified by sines and cosines.
            </summary>
            <param name="a">equatorial radius of ellipsoid (meters).</param>
            <param name="f">flattening of ellipsoid. Setting <i>f</i> = 0 gives a sphere. Negative <i>f</i> gives a prolate ellipsoid.</param>
            <param name="sinlat1">sine of first standard parallel.</param>
            <param name="coslat1">cosine of first standard parallel.</param>
            <param name="sinlat2">sine of second standard parallel.</param>
            <param name="coslat2">cosine of second standard parallel.</param>
            <param name="k1">scale on the standard parallels.</param>
            <remarks>
            This allows parallels close to the poles to be specified accurately.
            This routine computes the latitude of origin and the scale at this latitude.
            In the case where <i>lat1</i> and <i>lat2</i> are different, the errors in this routines are as follows:
            if <i>dlat</i> = abs(<i>lat2</i> − <i>lat1</i>) ≤ 160° and max(abs(<i>lat1</i>), 
            abs(<i>lat2</i>)) ≤ 90 − min(0.0002, 2.2 × 10^−6(180 − <i>dlat</i>), 6 * 10^−8 <i>dlat</i>^2) (in degrees), 
            then the error in the latitude of origin is less than 4.5 × 10^−14d and the relative error in the scale is less than 7 × 10^−15.
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.Dhyp(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Divided differences
            Definition: Df(x,y) = (f(x)-f(y))/(x-y)
            <para>
             See:
              W. M. Kahan and R. J. Fateman,
             Symbolic computation of divided differences,
              SIGSAM Bull. 33(2), 7-28 (1999)
              https://doi.org/10.1145/334714.334716
              http://www.cs.berkeley.edu/~fateman/papers/divdiff.pdf
            </para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="hx"></param>
            <param name="hy"></param>
            <returns></returns>
        </member>
        <member name="P:GeographicLib.Projections.LambertConformalConic.OriginLatitude">
            <summary>
            Gets a value representing the latitude of the origin for the projection (degrees).
            </summary>
            <remarks>
            This is the latitude of minimum azimuthal scale and equals the <i>stdlat</i> 
            in the 1-parallel constructor and lies between <i>stdlat1</i>  and <i>stdlat2</i> 
            in the 2-parallel constructors.
            </remarks>
        </member>
        <member name="P:GeographicLib.Projections.LambertConformalConic.CentralScale">
            <summary>
            Gets a value representing central scale for the projection.  This is the azimuthal scale on the latitude of origin.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.LambertConformalConic.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius (<i>a</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.LambertConformalConic.Flattening">
            <summary>
            Gets a value representing the flatterning (<i>f</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.LambertConformalConic.IsFrozen">
            <summary>
            Gets or sets an value representing that whether current <see cref="T:GeographicLib.Projections.LambertConformalConic"/> is frozen.
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.Freeze">
            <summary>
            Freeze current <see cref="T:GeographicLib.Projections.LambertConformalConic"/> instance to prevent its scale being modified.
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.SetScale(System.Double,System.Double)">
            <summary>
            Set the scale for the projection.
            </summary>
            <param name="lat">(degrees).</param>
            <param name="k">scale at latitude <paramref name="lat"/> (default 1).</param>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.Forward(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Forward projection, from geographic to Lambert conformal conic.
            </summary>
            <param name="lon0">central meridian longitude (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">scale of projection at point.</param>
            <returns>
            <i>x</i>, easting of point and <i>y</i>, northing of point, in meters.
            </returns>
            <remarks>
            The latitude origin is given by <see cref="P:GeographicLib.Projections.LambertConformalConic.OriginLatitude"/>. 
            No false easting or northing is added and <paramref name="lat"/> should be in the range [−90°, 90°].
            The error in the projection is less than about 10 nm (10 nanometers), true distance, 
            and the errors in the meridian convergence and scale are consistent with this. 
            The values of <i>x</i> and <i>y</i> returned for points which project to infinity
            (i.e., one or both of the poles) will be large but finite.
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.Reverse(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Reverse projection, from Lambert conformal conic to geographic.
            </summary>
            <param name="lon0">central meridian longitude (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">scale of projection at point.</param>
            <returns>
            <i>lat</i>, latitude of point and <i>lon</i>, longitude of point, in degress.
            </returns>
            <remarks>
            The latitude origin is given by <see cref="P:GeographicLib.Projections.LambertConformalConic.OriginLatitude"/>.
            No false easting or northing is added. 
            The value of <i>lon</i> returned is in the range [−180°, 180°].
            The error in the projection is less than about 10 nm (10 nanometers), true distance, 
            and the errors in the meridian convergence and scale are consistent with this.
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.Forward(System.Double,System.Double,System.Double)">
            <summary>
            Forward without returning convergence and scale.
            </summary>
            <param name="lon0">central meridian longitude (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <returns>
            <i>x</i>, easting of point and <i>y</i>, northing of point, in meters.
            </returns>
        </member>
        <member name="M:GeographicLib.Projections.LambertConformalConic.Reverse(System.Double,System.Double,System.Double)">
            <summary>
            Reverse without returning convergence and scale.
            </summary>
            <param name="lon0">central meridian longitude (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <returns>
            <i>lat</i>, latitude of point and <i>lon</i>, longitude of point, in degress.
            </returns>
        </member>
        <member name="T:GeographicLib.Projections.PolarStereographic">
            <summary>
            Polar stereographic projection.
            </summary>
            <remarks>
            Implementation taken from the report,
            <list type="bullet">
            <item>
            J. P. Snyder, <a href="http://pubs.er.usgs.gov/usgspubs/pp/pp1395">Map Projections: A Working Manual</a>,
            USGS Professional Paper 1395 (1987), pp. 160–163.
            </item>
            </list>
            <para>
            This is a straightforward implementation of the equations in Snyder except that Newton's method is used to invert the projection.
            </para>
            <para>
            This class also returns the meridian convergence <i>gamma</i> and scale <i>k</i>. 
            The meridian convergence is the bearing of grid north (the <i>y</i> axis) measured clockwise from true north.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.PolarStereographic.#ctor(GeographicLib.IEllipsoid,System.Double)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.PolarStereographic"/> instance with specified ellipsoid and scale.
            </summary>
            <param name="ellipsoid">the ellipsoid.</param>
            <param name="k0">central scale factor.</param>
        </member>
        <member name="M:GeographicLib.Projections.PolarStereographic.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.PolarStereographic"/> instance with specified equatorial radius, flattening of ellipsoid and scale.
            </summary>
            <param name="a">equatorial radius (meters).</param>
            <param name="f">flattening of ellipsoid. Setting <i>f</i> = 0 gives a sphere. Negative <i>f</i> gives a prolate ellipsoid.</param>
            <param name="k0">central scale factor.</param>
        </member>
        <member name="P:GeographicLib.Projections.PolarStereographic.UPS">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Projections.PolarStereographic"/> with
            the WGS84 ellipsoid and the UPS scale factor. However, unlike UPS, no false easting or northing is added.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.PolarStereographic.CentralScale">
            <summary>
            Gets a value representing central scale for the projection.  This is the azimuthal scale on the latitude of origin.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.PolarStereographic.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius (<i>a</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.PolarStereographic.Flattening">
            <summary>
            Gets a value representing the flatterning (<i>f</i>) of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.PolarStereographic.IsFrozen">
            <summary>
            Gets or sets an value representing that whether current <see cref="T:GeographicLib.Projections.PolarStereographic"/> is frozen.
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.PolarStereographic.Freeze">
            <summary>
            Freeze current <see cref="T:GeographicLib.Projections.PolarStereographic"/> instance to prevent its scale being modified.
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.PolarStereographic.Forward(System.Boolean,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Forward projection, from geographic to projected coordinate system.
            </summary>
            <param name="northp">the pole which is the center of projection (<see langword="true"/> means north, <see langword="false"/> means south).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">scale of projection at point.</param>
            <returns>
            <i>x</i>, easting of point (meters) and <i>y</i>, northing of point (meters).
            </returns>
        </member>
        <member name="M:GeographicLib.Projections.PolarStereographic.Reverse(System.Boolean,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Reverse projection, from projected coordinate system to geographic.
            </summary>
            <param name="northp">the pole which is the center of projection (<see langword="true"/> means north, <see langword="false"/> means south).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">azimuthal scale of projection at point; the radial scale is the 1/<paramref name="k"/>.</param>
            <returns>
            <i>lat</i>, latitude of point (degrees) and <i>lon</i>, longitude of point (degrees).
            </returns>
        </member>
        <member name="M:GeographicLib.Projections.PolarStereographic.Forward(System.Boolean,System.Double,System.Double)">
            <summary>
            Forward without returning convergence and scale.
            </summary>
            <param name="northp">the pole which is the center of projection (<see langword="true"/> means north, <see langword="false"/> means south).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <returns>
            <i>x</i>, easting of point (meters) and <i>y</i>, northing of point (meters).
            </returns>
        </member>
        <member name="M:GeographicLib.Projections.PolarStereographic.Reverse(System.Boolean,System.Double,System.Double)">
            <summary>
            Reverse without returning convergence and scale.
            </summary>
            <param name="northp">the pole which is the center of projection (<see langword="true"/> means north, <see langword="false"/> means south).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <returns>
            <i>lat</i>, latitude of point (degrees) and <i>lon</i>, longitude of point (degrees).
            </returns>
        </member>
        <member name="M:GeographicLib.Projections.PolarStereographic.SetScale(System.Double,System.Double)">
            <summary>
            Set the scale for the projection.
            </summary>
            <param name="lat">(degrees).</param>
            <param name="k">scale at latitude <paramref name="lat"/> (default 1).</param>
        </member>
        <member name="T:GeographicLib.Projections.TransverseMercator">
            <summary>
            Transverse Mercator projection.
            This uses Krüger's method which evaluates the projection and its inverse in terms of a series. See 
            <para>
              - L. Krüger, <a href = "https://doi.org/10.2312/GFZ.b103-krueger28" > 
              Konforme Abbildung des Erdellipsoids in der Ebene</a>
              (Conformal mapping of the ellipsoidal earth to the plane), 
              Royal Prussian Geodetic Institute, New Series 52, 172 pp. (1912).
            </para>
            <para>
            - C. F. F. Karney,
            <a href="https://doi.org/10.1007/s00190-011-0445-3">
            Transverse Mercator with an accuracy of a few nanometers</a>,
            J. Geodesy 85(8), 475--485 (Aug. 2011);
            preprint
            <a href="https://arxiv.org/abs/1002.1417">arXiv:1002.1417</a>.
            </para>
            <para>
            Krüger's method has been extended from 4th to 6th order.
            The maximum error is 5 nm (5 nanometers), ground distance,
            for all positions within 35 degrees of the central meridian.
            The error in the convergence is 2 × 10^−15" and the relative error in the scale is 6 × 10^−12%%.
            See Sec. 4 of <a href="https://arxiv.org/abs/1002.1417">arXiv:1002.1417</a> for details.
            The speed penalty in going to 6th order is only about 1%.
            </para>
            <para>
            There's a singularity in the projection at φ = 0°,
            λ − λ0 = ±(1 − e)90° (≈ ±82.6° for the WGS84 ellipsoid),
            where e is the eccentricity. Beyond this point,
            the series ceases to converge and the results from this method will be garbage.
            To be on the safe side, don't use this method if the angular distance from the central meridian exceeds (1 − 2e)90° (≈ 75° for the WGS84 ellipsoid)
            </para>
            <para>
            <see cref="T:GeographicLib.Projections.TransverseMercatorExact"/> is an alternative implementation of the projection using exact formulas which yield accurate(to 8 nm) results over the entire ellipsoid.
            This formulation is accessible in this class by calling the constructor with <i>exact</i> = <see langword="true"/>.
            </para>
            <para>
            The ellipsoid parameters and the central scale are set in the constructor.
            The central meridian (which is a trivial shift of the longitude) is specified as the <i>lon0</i> argument
            of the <see cref="M:GeographicLib.Projections.TransverseMercator.Forward(System.Double,System.Double,System.Double)"/> and <see cref="M:GeographicLib.Projections.TransverseMercator.Reverse(System.Double,System.Double,System.Double)"/> functions.
            The latitude of origin is taken to be the equator. There is no provision in this class for specifying a false easting
            or false northing or a different latitude of origin.
            However these are can be simply included by the calling function.
            For example, the <see cref="T:GeographicLib.UTMUPS"/> class applies the false easting and false northing for the UTM projections.
            A more complicated example is the British National Grid(<a href="https://www.spatialreference.org/ref/epsg/7405/">EPSG:7405</a>) which requires the use of a latitude of origin.
            This is implemented by the <see cref="T:GeographicLib.Geocodes.OSGB"/> class.
            </para>
            <para>
            This class also returns the meridian convergence gamma and scale <i>k</i>.The meridian convergence is the bearing of grid north (the <i>y</i> axis) measured clockwise from true north.
            </para>
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercator.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.TransverseMercator"/> instance with specified equatorial radius and flattening.
            </summary>
            <param name="a">equatorial radius (meters).</param>
            <param name="f">flattening of ellipsoid. Setting <i>f</i> = 0 gives a sphere. Negative <i>f</i> gives a prolate ellipsoid.</param>
            <param name="k0">central scale factor.</param>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercator.#ctor(System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.TransverseMercator"/> instance with specified equatorial radius and flattening.
            </summary>
            <param name="a">equatorial radius (meters).</param>
            <param name="f">flattening of ellipsoid. Setting <i>f</i> = 0 gives a sphere. Negative <i>f</i> gives a prolate ellipsoid.</param>
            <param name="k0">central scale factor.</param>
            <param name="exact">
            If <see langword="true"/> use exact formulation in terms of elliptic functions instead of series expansions.
            </param>
            <param name="extendp">
            Use extended domain; should only be used if <paramref name="exact"/> = <see langword="true"/>.
            </param>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercator.#ctor(GeographicLib.IEllipsoid,System.Double)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.TransverseMercator"/> instance with specified ellipsoid.
            </summary>
            <param name="ellipsoid"><see cref="T:GeographicLib.IEllipsoid"/> instance to be used in projection.</param>
            <param name="k0">central scale factor.</param>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercator.#ctor(GeographicLib.IEllipsoid,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.TransverseMercator"/> instance with specified equatorial radius and flattening.
            </summary>
            <param name="ellipsoid"><see cref="T:GeographicLib.IEllipsoid"/> instance to be used in projection.</param>
            <param name="k0">central scale factor.</param>
            <param name="exact">
            If <see langword="true"/> use exact formulation in terms of elliptic functions instead of series expansions.
            </param>
            <param name="extendp">
            Use extended domain; should only be used if <paramref name="exact"/> = <see langword="true"/>.
            </param>
        </member>
        <member name="P:GeographicLib.Projections.TransverseMercator.UTM">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GeographicLib.Projections.TransverseMercator.EquatorialRadius">
            <summary>
            Gets a value representing equatorial radius of the ellipsoid. 
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.TransverseMercator.Flattening">
            <summary>
            Gets a value representing flatterning of of the ellipsoid. 
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.TransverseMercator.CentralScale">
            <summary>
            Gets a value representing central scale for the projection.  This is the azimuthal scale on the latitude of origin.
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercator.Forward(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Forward projection, from geographic to projected coordinate system.
            </summary>
            <param name="lon0">central meridian of the projection (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">scale of projection at point.</param>
            <returns>
            <i>x</i>, easting of point (meters) and <i>y</i>, northing of point (meters).
            </returns>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercator.Reverse(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Reverse projection, from projected coordinate system to geographic.
            </summary>
            <param name="lon0">central meridian longitude (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">azimuthal scale of projection at point; the radial scale is the 1/<paramref name="k"/>.</param>
            <returns>
            <i>lat</i>, latitude of point (degrees) and <i>lon</i>, longitude of point (degrees).
            </returns>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercator.Forward(System.Double,System.Double,System.Double)">
            <summary>
            Forward without returning convergence and scale.
            </summary>
            <param name="lon0">central meridian longitude (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <returns>
            <i>x</i>, easting of point (meters) and <i>y</i>, northing of point (meters).
            </returns>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercator.Reverse(System.Double,System.Double,System.Double)">
            <summary>
            Reverse without returning convergence and scale.
            </summary>
            <param name="lon0">central meridian longitude (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <returns>
            <i>lat</i>, latitude of point (degrees) and <i>lon</i>, longitude of point (degrees).
            </returns>
        </member>
        <member name="P:GeographicLib.Projections.TransverseMercator.IsExact">
            <summary>
            Whether the exact formulation is used.  This is the value used in the constructor.
            </summary>
        </member>
        <member name="T:GeographicLib.Projections.TransverseMercatorExact">
            <summary>
            An exact implementation of the transverse Mercator projection.
            </summary>
            <remarks>
            Implementation of the Transverse Mercator Projection given in
            <list type="bullet">
            <item>
            L. P. Lee,
            <a href="https://doi.org/10.3138/X687-1574-4325-WM62">Conformal Projections Based On Jacobian Elliptic Functions</a>,
            Part V of Conformal Projections Based on Elliptic Functions,
            (B. V. Gutsell, Toronto, 1976), 128pp.,
            ISBN: 0919870163 (also appeared as: Monograph 16,
            Suppl. No. 1 to Canadian Cartographer, Vol 13);
            <a href="https://archive.org/details/conformalproject0000leel/page/92">
            borrow from archive.org</a>.
            </item>
            <item>
            C. F. F. Karney,
            <a href="https://doi.org/10.1007/s00190-011-0445-3">Transverse Mercator with an accuracy of a few nanometers</a>,
            J. Geodesy 85(8), 475–485 (Aug. 2011);
            preprint <a href="https://arxiv.org/abs/1002.1417">arXiv:1002.1417</a>.
            </item>
            </list>
            Lee gives the correct results for forward and reverse transformations subject to the branch cut rules
            (see the description of the extendp argument to the constructor). The maximum error is about 8 nm (8 nanometers), ground distance,
            for the forward and reverse transformations. The error in the convergence is 2 × 10^-15", the relative error in the scale is 7 × 10^−12%%.
            See Sec. 3 of <a href="https://arxiv.org/abs/1002.1417">arXiv:1002.1417</a>for details.
            The method is "exact" in the sense that the errors are close to the round-off limit and that no changes are needed in the algorithms for
            them to be used with reals of a higher precision. Thus the errors using long double (with a 64-bit fraction) are about 2000 times smaller
            than using double (with a 53-bit fraction).
            <para>
            This algorithm is about 4.5 times slower than the 6th-order Krüger method, <see cref="T:GeographicLib.Projections.TransverseMercator"/>, taking about 11 us for a
            combined forward and reverse projection on a 2.66 GHz Intel machine (g++, version 4.3.0, -O3).
            </para>
            <para>
            The ellipsoid parameters and the central scale are set in the constructor. The central meridian (which is a trivial shift of the longitude)
            is specified as the lon0 argument of the <see cref="M:GeographicLib.Projections.TransverseMercatorExact.Forward(System.Double,System.Double,System.Double)"/> and <see cref="M:GeographicLib.Projections.TransverseMercatorExact.Reverse(System.Double,System.Double,System.Double)"/> 
            functions. The latitude of origin is taken to be the equator. See the documentation on TransverseMercator for how to include a false easting,
            false northing, or a latitude of origin.
            </para>
            <para>
            See <a href="https://geographiclib.sourceforge.io/tm-grid.kmz">tm-grid.kmz</a>, for an illustration of the transverse Mercator grid in Google Earth.
            </para>
            <para>
            This class also returns the meridian convergence <i>gamma</i> and scale <i>k</i>.
            The meridian convergence is the bearing of grid north (the <i>y</i> axis) measured clockwise from true north.
            </para>
            <para>
            See <a href="https://geographiclib.sourceforge.io/html/transversemercator.html">Transverse Mercator projection</a> for a discussion of this projection.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercatorExact.#ctor(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.TransverseMercatorExact"/> instance with specified equatorial radius, flattening and central scale factor.
            </summary>
            <param name="a">equatorial radius (meters).</param>
            <param name="f">flattening of ellipsoid.</param>
            <param name="k0">central scale factor.</param>
            <param name="extendp">use extended domain.</param>
            <remarks>
            <para>
            The transverse Mercator projection has a branch point singularity at <i>lat</i> = 0 and <i>lon</i> − <i>lon0</i> = 90 (1 − <i>e</i>)
            or (for <see cref="P:GeographicLib.Projections.TransverseMercatorExact.UTM"/>) <i>x</i> = 18381 km, <i>y</i> = 0m. The <paramref name="extendp"/> argument governs where the branch cut is placed.
            With <paramref name="extendp"/> = <see langword="false"/>, the "standard" convention is followed, namely the cut is placed along
            <i>x</i> > 18381 km, <i>y</i> = 0m.
            <see cref="M:GeographicLib.Projections.TransverseMercatorExact.Forward(System.Double,System.Double,System.Double)"/> can be called with any <i>lat</i> and <i>lon</i> then produces the transformation shown
            in Lee, Fig 46.
            <see cref="M:GeographicLib.Projections.TransverseMercatorExact.Reverse(System.Double,System.Double,System.Double)"/> analytically continues this in the ± <i>x</i> direction.
            As a consequence, Reverse may map multiple points to the same geographic location; for example, for <see cref="P:GeographicLib.Projections.TransverseMercatorExact.UTM"/>,
            <i>x</i> = 22051449.037349 m, <i>y</i> = −7131237.022729 m and <i>x</i> = 29735142.378357 m, <i>y</i> = 4235043.607933 m both map to
            <i>lat</i> = −2°, <i>lon</i> = 88°.
            </para>
            <para>
            With <paramref name="extendp"/> = <see langword="true"/>, the branch cut is moved to the lower left quadrant.
            The various symmetries of the transverse Mercator projection can be used to explore the projection on any sheet.
            In this mode the domains of <i>lat</i>, <i>lon</i>, <i>x</i>, and <i>y</i> are restricted to
            <list type="bullet">
            <item>
            the union of
            <list type="bullet">
            <item><i>lat</i> in [0, 90] and <i>lon</i> − <i>lon0</i> in [0, 90]</item>
            <item><i>lat</i> in (-90, 0] and <i>lon</i> − <i>lon0</i> in [90 (1 − e), 90]</item>
            </list>
            </item>
            <item>
            the union of
            <list type="bullet">
            <item><i>x</i>/(<i>k0</i> <i>a</i>) in [0, ∞) and <i>y</i>/(<i>k0</i> <i>a</i>) in [0, E(e2)]</item>
            <item><i>x</i>/(<i>k0</i> <i>a</i>) in [K(1 − <i>e</i>^2) − E(1 − <i>e</i>^2), ∞) and <i>y</i>/(<i>k0</i> <i>a</i>) in (−∞, 0]</item>
            </list>
            </item>
            </list>
            See Sec. 5 of <a href="https://arxiv.org/abs/1002.1417">arXiv:1002.1417</a> for a full discussion of the treatment of the branch cut.
            </para>
            <para>
            The method will work for all ellipsoids used in terrestrial geodesy.
            The method cannot be applied directly to the case of a sphere (<i>f</i> = 0) because some the constants characterizing this method diverge in
            that limit, and in practice, <i>f</i> should be larger than about <see cref="F:GeographicLib.MathEx.DBL_EPSILON"/>.
            However, <see cref="T:GeographicLib.Projections.TransverseMercator"/> treats the sphere exactly.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercatorExact.#ctor(GeographicLib.IEllipsoid,System.Double,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Projections.TransverseMercatorExact"/> instance with specified <see cref="T:GeographicLib.IEllipsoid"/> object and central scale factor.
            </summary>
            <param name="ellipsoid">the <see cref="T:GeographicLib.IEllipsoid"/> object.</param>
            <param name="k0">central scale factor.</param>
            <param name="extendp">use extended domain.</param>
            <remarks>
            See <see cref="M:GeographicLib.Projections.TransverseMercatorExact.#ctor(System.Double,System.Double,System.Double,System.Boolean)"/> for detailed explanation.
            </remarks>
        </member>
        <member name="P:GeographicLib.Projections.TransverseMercatorExact.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.Projections.TransverseMercatorExact.Flattening">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.Projections.TransverseMercatorExact.CentralScale">
            <summary>
            Gets a value representing central scale for the projection.
            This is the value of <i>k0</i> used in the constructor and is the scale on the central meridian.
            </summary>
        </member>
        <member name="P:GeographicLib.Projections.TransverseMercatorExact.UTM">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Projections.TransverseMercatorExact"/> with the WGS84 ellipsoid and the UTM scale factor.
            However, unlike UTM, no false easting or northing is added.
            </summary>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercatorExact.Forward(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Forward projection, from geographic to transverse Mercator.
            </summary>
            <param name="lon0">central meridian of the projection (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">scale of projection at point.</param>
            <returns><i>x</i>, easting of point and <i>y</i>, northing of point, in meters.</returns>
            <remarks>
            No false easting or northing is added. <paramref name="lat"/> should be in the range [−90°, 90°].
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercatorExact.Reverse(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Reverse projection, from transverse Mercator to geographic.
            </summary>
            <param name="lon0">central meridian of the projection (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">scale of projection at point.</param>
            <returns><i>lat</i>, latitude of point and <i>lon</i>, longitude of point, in degrees.</returns>
            <remarks>
            No false easting or northing is added. The value of <i>lon</i> returned is in the range [−180°, 180°].
            </remarks>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercatorExact.Forward(System.Double,System.Double,System.Double)">
            <summary>
            <see cref="M:GeographicLib.Projections.TransverseMercatorExact.Forward(System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> without returning the convergence and scale.
            </summary>
            <param name="lon0">central meridian of the projection (degrees).</param>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <returns><i>x</i>, easting of point and <i>y</i>, northing of point, in meters.</returns>
        </member>
        <member name="M:GeographicLib.Projections.TransverseMercatorExact.Reverse(System.Double,System.Double,System.Double)">
            <summary>
            <see cref="M:GeographicLib.Projections.TransverseMercatorExact.Reverse(System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> without returning the convergence and scale.
            </summary>
            <param name="lon0">central meridian of the projection (degrees).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <returns><i>lat</i>, latitude of point and <i>lon</i>, longitude of point, in degrees.</returns>
        </member>
        <member name="T:GeographicLib.Rhumb">
            <summary>
            Solve of the direct and inverse rhumb problems.
            </summary>
            <remarks>
            The path of constant azimuth between two points on an ellipsoid at (<i>lat1</i>, <i>lon1</i>) and (<i>lat2</i>, <i>lon2</i>)
            is called the rhumb line (also called the loxodrome). Its length is <i>s12</i> and its azimuth is <i>azi12</i>.
            (The azimuth is the heading measured clockwise from north.)
            <para>
            Given <i>lat1</i>, <i>lon1</i>, <i>azi12</i>, and <i>s12</i>, we can determine <i>lat2</i>, and <i>lon2</i>.
            This is the direct rhumb problem and its solution is given by the function <see cref="M:GeographicLib.Rhumb.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>.
            </para>
            <para>
            Given <i>lat1</i>, <i>lon1</i>, <i>lat2</i>, and <i>lon2</i>, we can determine <i>azi12</i> and <i>s12</i>.
            This is the inverse rhumb problem, whose solution is given by <see cref="M:GeographicLib.Rhumb.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>.
            This finds the shortest such rhumb line, i.e., the one that wraps no more than half way around the earth.
            If the end points are on opposite meridians, there are two shortest rhumb lines and the east-going one is chosen.
            </para>
            <para>
            These routines also optionally calculate the area under the rhumb line, <i>S12</i>.
            This is the area, measured counter-clockwise,
            of the rhumb line quadrilateral with corners (l<i>lat1</i>, <i>lon1</i>), (0,<i>lon1</i>), (0,<i>lon2</i>), and (<i>lat2</i>, <i>lon2</i>).
            </para>
            <para>
            Note that rhumb lines may be appreciably longer (up to 50%) than the corresponding <see cref="T:GeographicLib.Geodesic"/>.
            For example the distance between London Heathrow and Tokyo Narita via the rhumb line is 11400 km which is 18% longer than the
            geodesic distance 9600 km.
            </para>
            This implementation is described in
            <para>
            - C. F. F. Karney,
              <a href="https://arxiv.org/abs/2303.03219" > The area of rhumb
            polygons</a>,
            Technical Report, SRI International, March 2023.
              <a href="https://arxiv.org/abs/2303.03219" > arxiv:2303.03219</a>
            .
            </para>
            <para>
            For more information on rhumb lines see <a href="https://geographiclib.sourceforge.io/html/rhumb.html">Rhumb lines</a>.
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.Rhumb.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.Rhumb.Flattening">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.Rhumb.EllipsoidArea">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.Rhumb.IsExact">
            <summary>
            Gets a value representing whether current <see cref="T:GeographicLib.Rhumb"/> instance performs exact calculation for arbitrary flattening.
            </summary>
        </member>
        <member name="P:GeographicLib.Rhumb.WGS84">
            <summary>
            A global instantiation of <see cref="T:GeographicLib.Rhumb"/> with the parameters for the WGS84 ellipsoid.
            </summary>
        </member>
        <member name="M:GeographicLib.Rhumb.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Rhumb"/> instance with specified equatorial radius and flattening of the ellipsoid.
            </summary>
            <param name="a">equatorial radius (meters)</param>
            <param name="f">flattening of ellipsoid. Setting <i>f</i> = 0 gives a sphere. Negative <i>f</i> gives a prolate ellipsoid.</param>
            <param name="exact">
            if <see langword="true"/> use the exact expressions for the auxiliary latitudes; otherwise use series expansion(accurate for |<i>f</i>| &lt; 0.01)
            </param>
        </member>
        <member name="M:GeographicLib.Rhumb.#ctor(GeographicLib.IEllipsoid,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Rhumb"/> instance with specified ellipsoid.
            </summary>
            <param name="ellipsoid">the ellipoid to be used for calculation.</param>
            <param name="exact">
            if <see langword="true"/> use the exact expressions for the auxiliary latitudes; otherwise use series expansion(accurate for |<i>f</i>| &lt; 0.01)
            </param>
        </member>
        <member name="M:GeographicLib.Rhumb.#ctor(GeographicLib.Ellipsoid,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:GeographicLib.Rhumb"/> instance with specified ellipsoid.
            </summary>
            <param name="ellipsoid">the ellipoid to be used for calculation.</param>
            <param name="exact">
            if <see langword="true"/> use the exact expressions for the auxiliary latitudes; otherwise use series expansion(accurate for |<i>f</i>| &lt; 0.01)
            </param>
        </member>
        <member name="M:GeographicLib.Rhumb.GeographicLib#IGeodesicLike#GenDirect(System.Double,System.Double,System.Double,System.Boolean,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            This function is not supposed to be called from user code directly.
            Use <see cref="M:GeographicLib.Rhumb.GenDirect(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@)"/> or
            <see cref="M:GeographicLib.Rhumb.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> instead.
            </summary>
            <param name="lat1"></param>
            <param name="lon1"></param>
            <param name="azi12"></param>
            <param name="_1"></param>
            <param name="s12"></param>
            <param name="outmask"></param>
            <param name="lat2"></param>
            <param name="lon2"></param>
            <param name="_2"></param>
            <param name="_3"></param>
            <param name="_4"></param>
            <param name="_5"></param>
            <param name="_6"></param>
            <param name="S12"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Rhumb.GeographicLib#IGeodesicLike#GenInverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            This function is not supposed to be called from user code directly.
            Use <see cref="M:GeographicLib.Rhumb.GenInverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@)"/> or
            <see cref="M:GeographicLib.Rhumb.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> instead.
            </summary>
            <param name="lat1"></param>
            <param name="lon1"></param>
            <param name="lat2"></param>
            <param name="lon2"></param>
            <param name="outmask"></param>
            <param name="s12"></param>
            <param name="azi12"></param>
            <param name="_1"></param>
            <param name="_2"></param>
            <param name="_3"></param>
            <param name="_4"></param>
            <param name="S12"></param>
            <returns></returns>
        </member>
        <member name="M:GeographicLib.Rhumb.GenDirect(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@)">
            <summary>
            The general direct rhumb problem.
            <see cref="M:GeographicLib.Rhumb.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> is defined in terms of this function.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi12">azimuth of the rhumb line (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="S12">area under the rhumb line (meters^2).</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying which of the following parameters should be set.
            </param>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for <paramref name="outmask"/> are
            <list type="bullet">
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <paramref name="lat2"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the longitude <paramref name="lon2"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <paramref name="S12"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <paramref name="lon2"/> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            With the <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> bit set, the quantity <paramref name="lon2"/> − <paramref name="lon1"/> indicates
            how many times and in what sense the rhumb line encircles the ellipsoid.
            </remarks>
        </member>
        <member name="M:GeographicLib.Rhumb.Direct(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Solve the direct rhumb problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi12">azimuth of the rhumb line (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying
            which of the properties in returned <see cref="T:GeographicLib.DirectRhumbResult"/> instance should be set.
            </param>
            <returns>
            A <see cref="T:GeographicLib.DirectRhumbResult"/> instance containing the result of the calcutation.
            </returns>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for <paramref name="outmask"/> are
            <list type="bullet">
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude returned in <see cref="P:GeographicLib.DirectRhumbResult.Latitude"/>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the longitude returned in <see cref="P:GeographicLib.DirectRhumbResult.Longitude"/>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area returned in <see cref="P:GeographicLib.RhumbResult.Area"/>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <see cref="P:GeographicLib.DirectRhumbResult.Longitude"/> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            With the <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> bit set, the quantity <see cref="P:GeographicLib.DirectRhumbResult.Longitude"/> − <paramref name="lon1"/> indicates
            how many times and in what sense the rhumb line encircles the ellipsoid.
            </remarks>
        </member>
        <member name="M:GeographicLib.Rhumb.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the direct rhumb problem returning also the area.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi12">azimuth of the rhumb line (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="S12">area under the rhumb line (meters^2).</param>
            <remarks>
            <paramref name="lat1"/> should be in the range [−90°, 90°]. The value of <paramref name="lon2"/> returned is in the range [−180°, 180°].
            <para>
            If point 1 is a pole, the cosine of its latitude is taken to be 1/ε2 (where ε is 2^-52).
            This position, which is extremely close to the actual pole, allows the calculation to be carried out in finite terms.
            If <paramref name="s12"/> is large enough that the rhumb line crosses a pole, the longitude of point 2 is indeterminate
            (a <see cref="F:System.Double.NaN"/> is returned for <paramref name="lon2"/> and <paramref name="S12"/>).
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Rhumb.Direct(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Solve the direct rhumb problem without the area.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi12">azimuth of the rhumb line (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
        </member>
        <member name="M:GeographicLib.Rhumb.GenInverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@)">
            <summary>
            The general inverse rhumb problem.
            <see cref="M:GeographicLib.Rhumb.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/> is defined in terms of this function.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi12">azimuth of the rhumb line (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="S12">area under the rhumb line (meters^2).</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying which of the following parameters should be set.
            </param>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for <paramref name="outmask"/> are
            <list type="bullet">
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance <paramref name="s12"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the rhumb line azimuth <paramref name="azi12"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <paramref name="S12"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            </list>
            </remarks>
        </member>
        <member name="M:GeographicLib.Rhumb.Inverse(System.Double,System.Double,System.Double,System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Solve the inverse rhumb problem.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying
            which of the properties in returned <see cref="T:GeographicLib.InverseRhumbResult"/> instance should be set.
            </param>
            <returns>A <see cref="T:GeographicLib.InverseRhumbResult"/> instance containing the result of the calcutation.</returns>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for <paramref name="outmask"/> are
            <list type="bullet">
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Distance"/> for the distance, <see cref="P:GeographicLib.InverseRhumbResult.Distance"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Azimuth"/> for the rhumb line azimuth, <see cref="P:GeographicLib.InverseRhumbResult.Azimuth"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area, <see cref="P:GeographicLib.RhumbResult.Area"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            </list>
            </remarks>
        </member>
        <member name="M:GeographicLib.Rhumb.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Solve the inverse rhumb problem returning also the area.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi12">azimuth of the rhumb line (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="S12">area under the rhumb line (meters^2).</param>
            <remarks>
            The shortest rhumb line is found. If the end points are on opposite meridians, there are two shortest rhumb lines and the east-going one
            is chosen. <paramref name="lat1"/> and <paramref name="lat2"/> should be in the range [−90°, 90°].
            The value of <paramref name="azi12"/> returned is in the range [−180°, 180°].
            <para>
            If either point is a pole, the cosine of its latitude is taken to be 1/ε2 (where ε is 2^-52).
            This position, which is extremely close to the actual pole, allows the calculation to be carried out in finite terms.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.Rhumb.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Solve the inverse rhumb problem without the area.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi12">azimuth of the rhumb line (degrees).</param>
            <param name="s12">distance between point 1 and point 2 (meters).</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
        </member>
        <member name="M:GeographicLib.Rhumb.Line(System.Double,System.Double,System.Double)">
            <summary>
            Set up to compute several points on a single rhumb line.
            </summary>
            <param name="lat1">latitude of point 1 (degrees).</param>
            <param name="lon1">longitude of point 1 (degrees).</param>
            <param name="azi12">azimuth of the rhumb line (degrees).</param>
            <returns>a <see cref="T:GeographicLib.RhumbLine"/> object.</returns>
            <remarks>
            <paramref name="lat1"/> should be in the range [−90°, 90°].
            If point 1 is a pole, the cosine of its latitude is taken to be 1/ε2 (where ε is 2^-52).
            This position, which is extremely close to the actual pole, allows the calculation to be carried out in finite terms.
            </remarks>
        </member>
        <member name="T:GeographicLib.RhumbLine">
            <summary>
            Find a sequence of points on a single rhumb line.
            </summary>
            <remarks>
            <see cref="T:GeographicLib.RhumbLine"/> facilitates the determination of a series of points on a single rhumb line.
            The starting point (<i>lat1</i>, <i>lon1</i>) and the azimuth <i>azi12</i> are specified in the call to <see cref="M:GeographicLib.Rhumb.Line(System.Double,System.Double,System.Double)"/>
            which returns a <see cref="T:GeographicLib.RhumbLine"/> object. <see cref="M:GeographicLib.RhumbLine.Position(System.Double,System.Double@,System.Double@)"/> returns the location of point 2
            (and, optionally, the corresponding area, <i>S12</i>) a distance <i>s12</i> along the rhumb line.
            <para>
            There is no public constructor for this class.
            (Use <see cref="M:GeographicLib.Rhumb.Line(System.Double,System.Double,System.Double)"/> to create an instance.)
            The <see cref="T:GeographicLib.Rhumb"/> object used to create a <see cref="T:GeographicLib.RhumbLine"/> must stay in scope as long as the <see cref="T:GeographicLib.RhumbLine"/>.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.RhumbLine.GenPosition(System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@)">
            <summary>
            The general position routine. <see cref="M:GeographicLib.RhumbLine.Position(System.Double,System.Double@,System.Double@)"/> is defined in term so this function.
            </summary>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="outmask">a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying which of the following parameters should be set.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="S12">area under the rhumb line (meters^2).</param>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for <paramref name="outmask"/> are
            <list type="bullet">
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <paramref name="lat2"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the longitude <paramref name="lon2"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <paramref name="S12"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <paramref name="lon2"/> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            With the <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> bit set, the quantity <paramref name="lon2"/> − <i>lon1</i> indicates
            how many times and in what sense the rhumb line encircles the ellipsoid.
            <para>
            If s12 is large enough that the rhumb line crosses a pole,
            the longitude of point 2 is indeterminate (a <see cref="F:System.Double.NaN"/> is returned for <paramref name="lon2"/> and <paramref name="S12"/>).
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.RhumbLine.Position(System.Double,GeographicLib.GeodesicFlags)">
            <summary>
            Compute the position of point 2 which is a distance <paramref name="s12"/> (meters) from point 1.
            </summary>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="outmask">
            a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying
            which of the properties in returned <see cref="T:GeographicLib.DirectRhumbResult"/> instance should be set.
            </param>
            <returns>A <see cref="T:GeographicLib.DirectRhumbResult"/> instance containing the result of the calcutation.</returns>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for <paramref name="outmask"/> are
            <list type="bullet">
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude returned in <see cref="P:GeographicLib.DirectRhumbResult.Latitude"/>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the longitude returned in  <see cref="P:GeographicLib.DirectRhumbResult.Longitude"/>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area returned in  <see cref="P:GeographicLib.RhumbResult.Area"/>;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item><i>outmask</i> |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <see cref="P:GeographicLib.DirectRhumbResult.Longitude"/> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            With the <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> bit set, the quantity <see cref="P:GeographicLib.DirectRhumbResult.Longitude"/> − <i>lon1</i> indicates
            how many times and in what sense the rhumb line encircles the ellipsoid.
            <para>
            If <paramref name="s12"/> is large enough that the rhumb line crosses a pole,
            the longitude of point 2 is indeterminate (a <see cref="F:System.Double.NaN"/> is returned for <see cref="P:GeographicLib.DirectRhumbResult.Longitude"/> and <see cref="P:GeographicLib.RhumbResult.Area"/>).
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.RhumbLine.Position(System.Double,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is a distance <paramref name="s12"/> (meters) from point 1. The area is not computed.
            </summary>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <remarks>
            The value of <paramref name="lon2"/> returned is in the range [−180°, 180°].
            <para>
            If s12 is large enough that the rhumb line crosses a pole,
            the longitude of point 2 is indeterminate (a <see cref="F:System.Double.NaN"/> is returned for <paramref name="lon2"/>).
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.RhumbLine.Position(System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the position of point 2 which is a distance <paramref name="s12"/> (meters) from point 1. The area is also computed.
            </summary>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="S12">area under the rhumb line (meters^2).</param>
            <remarks>
            The value of <paramref name="lon2"/> returned is in the range [−180°, 180°].
            <para>
            If s12 is large enough that the rhumb line crosses a pole,
            the longitude of point 2 is indeterminate (a <see cref="F:System.Double.NaN"/> is returned for <paramref name="lon2"/> and <paramref name="S12"/>).
            </para>
            </remarks>
        </member>
        <member name="P:GeographicLib.RhumbLine.Latitude">
            <summary>
            Gets a value representing the latitude of point 1 in degrees (<i>lat1</i>).
            </summary>
        </member>
        <member name="P:GeographicLib.RhumbLine.Longitude">
            <summary>
            Gets a value representing the longitude of point 1 in degrees (<i>lon1</i>).
            </summary>
        </member>
        <member name="P:GeographicLib.RhumbLine.Azimuth">
            <summary>
            Gets a value representing the azimuth of the rhumb line in degrees (<i>azi12</i>).
            </summary>
        </member>
        <member name="P:GeographicLib.RhumbLine.EquatorialRadius">
            <inheritdoc/>
        </member>
        <member name="P:GeographicLib.RhumbLine.Flattening">
            <inheritdoc/>
        </member>
        <member name="M:GeographicLib.RhumbLine.Priv.GenPosition(System.Double,GeographicLib.GeodesicFlags,System.Double@,System.Double@,System.Double@)">
            <summary>
            The general position routine. <see cref="M:GeographicLib.RhumbLine.Position(System.Double,System.Double@,System.Double@)"/> is defined in term so this function.
            </summary>
            <param name="s12">distance between point 1 and point 2 (meters); it can be negative.</param>
            <param name="outmask">a bitor'ed combination of <see cref="T:GeographicLib.GeodesicFlags"/> values specifying which of the following parameters should be set.</param>
            <param name="lat2">latitude of point 2 (degrees).</param>
            <param name="lon2">longitude of point 2 (degrees).</param>
            <param name="S12">area under the rhumb line (meters^2).</param>
            <remarks>
            The <see cref="T:GeographicLib.GeodesicFlags"/> values possible for <paramref name="outmask"/> are
            <list type="bullet">
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Latitude"/> for the latitude <paramref name="lat2"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Longitude"/> for the longitude <paramref name="lon2"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.Area"/> for the area <paramref name="S12"/>;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.All"/> for all of the above;</item>
            <item>outmask |= <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> to unroll <paramref name="lon2"/> instead of wrapping it into the range [−180°, 180°].</item>
            </list>
            With the <see cref="F:GeographicLib.GeodesicFlags.LongUnroll"/> bit set, the quantity <paramref name="lon2"/> − <i>lon1</i> indicates
            how many times and in what sense the rhumb line encircles the ellipsoid.
            <para>
            If s12 is large enough that the rhumb line crosses a pole,
            the longitude of point 2 is indeterminate (a <see cref="F:System.Double.NaN"/> is returned for <paramref name="lon2"/> and <paramref name="S12"/>).
            </para>
            </remarks>
        </member>
        <member name="T:GeographicLib.RhumbResult">
            <summary>
            Encapsulates the results of the rhumb problem solutions.
            </summary>
        </member>
        <member name="P:GeographicLib.RhumbResult.Area">
            <summary>
            Gets a value representing <i>S12</i>, the area under the rhumb line, in meters^2.
            </summary>
        </member>
        <member name="T:GeographicLib.DirectRhumbResult">
            <summary>
            Encapsulates the results of the direct rhumb problem solutions.
            </summary>
        </member>
        <member name="P:GeographicLib.DirectRhumbResult.Latitude">
            <summary>
            Gets a value representing <i>lat2</i>, latitude of point 2, in degrees.
            </summary>
        </member>
        <member name="P:GeographicLib.DirectRhumbResult.Longitude">
            <summary>
            Gets a value representing <i>lon2</i>, longitude of point 2, in degrees.
            </summary>
        </member>
        <member name="T:GeographicLib.InverseRhumbResult">
            <summary>
            Encapsulates the results of the inverse rhumb problem solutions.
            </summary>
        </member>
        <member name="P:GeographicLib.InverseRhumbResult.Azimuth">
            <summary>
            Gets a value representing <i>azi12</i>, the azimuth of the rhumb line, in degrees.
            </summary>
        </member>
        <member name="P:GeographicLib.InverseRhumbResult.Distance">
            <summary>
            Gets a value representing <i>s12</i>, the distance between point 1 and point 2, in meters.
            </summary>
        </member>
        <member name="T:GeographicLib.SphericalHarmonics.CircularEngine">
            <summary>
            Spherical harmonic sums for a circle.
            </summary>
            <remarks>
            The class is a companion to <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine"/>. 
            If the results of a spherical harmonic sum are needed for several points 
            on a circle of constant latitude <i>lat</i> and height <i>h</i>, then <see cref="M:GeographicLib.SphericalHarmonics.SphericalEngine.Circle(System.Boolean,GeographicLib.SphericalHarmonics.Normalization,System.ReadOnlySpan{GeographicLib.SphericalHarmonics.SphericalEngine.Coeff},System.ReadOnlySpan{System.Double},System.Double,System.Double,System.Double)"/> can compute
            the inner sum, which is independent of longitude lon, and produce a <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> object.
            <see cref="M:GeographicLib.SphericalHarmonics.CircularEngine.Evaluate(System.Double)"/> can then be used to perform the outer sum for particular vales of <i>lon</i>.
            This can lead to substantial improvements in computational speed for high degree sum (approximately by a factor of <i>N</i> / 2
            where <i>N</i> is the maximum degree).
            <para>
            <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> is tightly linked to the internals of <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine"/>. 
            For that reason, the constructor for this class is private.
            Use <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.Circle(System.Double,System.Double,System.Boolean)"/>, <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic1.Circle(System.Double,System.Double,System.Double,System.Boolean)"/>, and <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic2.Circle(System.Double,System.Double,System.Double,System.Double,System.Boolean)"/>
            to create instances of this class.
            </para>
            <para>
            <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> stores the coefficients needed to allow the summation over order to be performed in 2 or 6 vectors of length <i>M</i> + 1
            (depending on whether gradients are to be calculated).
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.CircularEngine.#ctor">
            <summary>
            A default constructor. Calling <see cref="M:GeographicLib.SphericalHarmonics.CircularEngine.Evaluate(System.Double)"/> and its overloads on the resulting object returns zero. 
            The resulting object can be assigned to the result of <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.Circle(System.Double,System.Double,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.CircularEngine.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluate the sum for a particular longitude given in terms of its sine and cosine.
            </summary>
            <param name="sinlon">the sine of the longitude.</param>
            <param name="coslon">the cosine of the longitude.</param>
            <returns><i>V</i>, the value of the sum.</returns>
            <remarks>
            The arguments must satisfy <paramref name="sinlon"/>^2 + <paramref name="coslon"/>^2 = 1.
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.CircularEngine.Evaluate(System.Double)">
            <summary>
            Evaluate the sum for a particular longitude.
            </summary>
            <param name="lon">the longitude (degrees).</param>
            <returns><i>V</i>, the value of the sum.</returns>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.CircularEngine.Evaluate(System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Evaluate the sum and its gradient for a particular longitude given in terms of its sine and cosine.
            </summary>
            <param name="sinlon">the sine of the longitude.</param>
            <param name="coslon">the cosine of the longitude.</param>
            <param name="gradx"><i>x</i> component of the gradient.</param>
            <param name="grady"><i>y</i> component of the gradient.</param>
            <param name="gradz"><i>z</i> component of the gradient.</param>
            <returns><i>V</i>, the value of the sum.</returns>
            <remarks>
            The gradients will only be computed if the CircularEngine object was created with this capability
            (e.g., via <i>gradp</i> = <see langword="true"/> in <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.Circle(System.Double,System.Double,System.Boolean)"/>).
            If not, <paramref name="gradx"/>, etc., will be set to <see cref="F:System.Double.NaN"/>.
            The arguments must satisfy <paramref name="sinlon"/>^2 + <paramref name="coslon"/>^2 = 1.
            </remarks>
        </member>
        <member name="T:GeographicLib.SphericalHarmonics.Normalization">
            <summary>
            Supported normalizations for associated Legendre polynomials.
            </summary>
        </member>
        <member name="F:GeographicLib.SphericalHarmonics.Normalization.Full">
            <summary>
            Fully normalized associated Legendre polynomials.
            </summary>
            <remarks>
            These are defined by <i>P</i><i>nm</i>^full(<i>z</i>) = (−1)^<i>m</i> sqrt(<i>k</i> (2<i>n</i> + 1)
            (<i>n</i> − <i>m</i>)! / (<i>n</i> + <i>m</i>)!) <b>P</b><i>n</i>^<i>m</i>(<i>z</i>), where <b>P</b><i>n</i>^<i>m</i>(<i>z</i>)
            is Ferrers function (also known as the Legendre function on the cut or the associated Legendre polynomial)
            <a href="https://dlmf.nist.gov/14.7.E10"></a> and <i>k</i> = 1 for <i>m</i> = 0 and <i>k</i> = 2 otherwise.
            <para>
            The mean squared value of <i>P</i><i>nm</i>^full(cosθ) cos(<i>m</i>λ) and <i>P</i><i>nm</i>^full(cosθ) sin(<i>m</i>λ) over the sphere is 1.
            </para>
            </remarks>
        </member>
        <member name="F:GeographicLib.SphericalHarmonics.Normalization.Schmidt">
            <summary>
            Schmidt semi-normalized associated Legendre polynomials.
            </summary>
            <remarks>
            These are defined by <i>P</i><i>nm</i>^schmidt(<i>z</i>) = (−1)<i>m</i> sqrt(<i>k</i> (<i>n</i> − <i>m</i>)! / (<i>n</i> + <i>m</i>)!) 
            <b>P</b><i>n</i>^<i>m</i>(<i>z</i>),where <b>P</b><i>n</i>^<i>m</i>(<i>z</i>) 
            is Ferrers function (also known as the Legendre function on the cut or the associated Legendre polynomial)
            <a href="https://dlmf.nist.gov/14.7.E10"></a> and <i>k</i> = 1 for <i>m</i> = 0 and <i>k</i> = 2 otherwise.
            <para>
            The mean squared value of <i>P</i><i>nm</i>^schmidt(cosθ) cos(<i>m</i>λ) and <i>P</i><i>nm</i>^schmidt(cosθ) sin(<i>m</i>λ) 
            over the sphere is 1/(2<i>n</i> + 1).
            </para>
            </remarks>
        </member>
        <member name="T:GeographicLib.SphericalHarmonics.SphericalEngine">
            <summary>
            The evaluation engine for <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/>.
            </summary>
            <remarks>
            This serves as the backend to <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/>, <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic1"/>, and <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic2"/>.
            Typically end-users will not have to access this class directly.
            </remarks>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalEngine.SqrtTable">
            <summary>
            Gets a value representing a table of the square roots of integers.
            </summary>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalEngine.Scale">
            <summary>
            Gets a value representing an internal scaling of the coefficients to avoid overflow in intermediate calculations.
            </summary>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalEngine.Eps">
            <summary>
            Move latitudes near the pole off the axis by this amount.
            </summary>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.RootTable(System.Int32)">
            <summary>
            Check that the static table of square roots is big enough and enlarge it if necessary.
            </summary>
            <param name="N">
            the maximum degree to be used in <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine"/>.
            </param>
            <remarks>
            Typically, there's no need for an end-user to call this routine, because the constructors for <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> do so.
            However, since this updates a static table, there's a possible race condition in a multi-threaded environment.
            Because this routine does nothing if the table is already large enough, one way to avoid race conditions is to call this
            routine at program start up (when it's still single threaded), supplying the largest degree that your program will use. E.g.,
            <code>SphericalEngine.RootTable(2190);</code>
            suffices to accommodate extant magnetic and gravity models.
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.ClearRootTable">
            <summary>
            Clear the static table of square roots and release the memory. 
            Call this only when you are sure you no longer will be using <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine"/>. 
            Your program will crash if you call <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine"/> after calling this routine.
            </summary>
            <remarks>
            <para>WARNING: It's safest not to call this routine at all. (The space used by the table is modest.)</para>
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Value(System.Boolean,GeographicLib.SphericalHarmonics.Normalization,System.ReadOnlySpan{GeographicLib.SphericalHarmonics.SphericalEngine.Coeff},System.ReadOnlySpan{System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="c">an array of coeff objects.</param>
            <param name="f">array of coefficient multipliers.  <c>f[0]</c> should be <c>1</c>.</param>
            <param name="x">the <i>x</i> component of the cartesian position.</param>
            <param name="y">the <i>y</i> component of the cartesian position.</param>
            <param name="z">the <i>z</i> component of the cartesian position.</param>
            <param name="a">the normalizing radius.</param>
            <param name="gradx">the <i>x</i> component of the gradient.</param>
            <param name="grady">the <i>y</i> component of the gradient.</param>
            <param name="gradz">the <i>z</i> component of the gradient.</param>
            <param name="gradp">should the gradient be calculated.</param>
            <param name="norm">the normalization for the associated Legendre polynomials.</param>
            <returns>the spherical harmonic sum.</returns>
            <remarks>
            See the SphericalHarmonic class for the definition of the sum. 
            The coefficients used by this function are, for example, <c>c[0].Cv + f[1] * c[1].Cv + ... + f[L−1] * c[L−1].Cv</c>.
            (Note that <c>f[0]</c> is <i>not</i> used.) The upper limits on the sum are determined by <c>c[0].Nmx</c> and <c>c[0].Mmx</c>;
            these limits apply to <i>all</i> the components of the coefficients.
            <para>
            Clenshaw summation is used which permits the evaluation of the sum without the need to allocate temporary arrays. 
            Thus this function never throws an exception.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Circle(System.Boolean,GeographicLib.SphericalHarmonics.Normalization,System.ReadOnlySpan{GeographicLib.SphericalHarmonics.SphericalEngine.Coeff},System.ReadOnlySpan{System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Create a <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> object.
            </summary>
            <param name="gradp">should the gradient be calculated.</param>
            <param name="norm">the normalization for the associated Legendre polynomials.</param>
            <param name="c">an array of coeff objects.</param>
            <param name="f">array of coefficient multipliers.  <c>f[0]</c> should be <c>1</c>.</param>
            <param name="p">the radius of the circle = sqrt(<i>x</i>^2 + <i>y</i>^2).</param>
            <param name="z">the height of the circle.</param>
            <param name="a">the normalizing radius.</param>
            <returns>A <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> instance.</returns>
            <remarks>
            If you need to evaluate the spherical harmonic sum for several points with constant 
            <i>f</i>, <i>p</i> = sqrt(<i>x</i>^2 + <i>y</i>^2), <i>z</i>, and <i>a</i>, it is more efficient to construct call
            <see cref="M:GeographicLib.SphericalHarmonics.SphericalEngine.Circle(System.Boolean,GeographicLib.SphericalHarmonics.Normalization,System.ReadOnlySpan{GeographicLib.SphericalHarmonics.SphericalEngine.Coeff},System.ReadOnlySpan{System.Double},System.Double,System.Double,System.Double)"/>
            to give a <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> object and then call <see cref="M:GeographicLib.SphericalHarmonics.CircularEngine.Evaluate(System.Double,System.Double)"/> 
            with arguments <i>x</i>/<i>p</i> and <i>y</i>/<i>p</i>.
            </remarks>
        </member>
        <member name="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff">
            <summary>
            Package up coefficients for <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine"/>.
            </summary>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.#ctor(System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32)">
            <summary>
            The constructor for full coefficient vectors.
            </summary>
            <param name="C">a vector of coefficients for the cosine terms.</param>
            <param name="S">a vector of coefficients for the sine terms.</param>
            <param name="N">the degree giving storage layout for <paramref name="C"/> and <paramref name="S"/>.</param>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.#ctor(System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.Int32,System.Int32)">
            <summary>
            The general constructor.
            </summary>
            <param name="C">a vector of coefficients for the cosine terms.</param>
            <param name="S">a vector of coefficients for the sine terms.</param>
            <param name="N">the degree giving storage layout for <paramref name="C"/> and <paramref name="S"/>.</param>
            <param name="nmx">the maximum degree to be used.</param>
            <param name="mmx">the maximum order to be used.</param>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.IndexOf(System.Int32,System.Int32)">
            <summary>
            Get one-dimensional index into <i>C</i> and <i>S</i>.
            </summary>
            <param name="n">the degree.</param>
            <param name="m">the order.</param>
            <returns>the one-dimensional index.</returns>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.N">
            <summary>
            Gets a value representing the degree giving storage layout for <i>C</i> and <i>S</i>.
            </summary>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.Nmx">
            <summary>
            Gets a value representing the maximum degree to be used.
            </summary>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.Mmx">
            <summary>
            Gets a value representing the maximum order to be used.
            </summary>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.Cv(System.Int32)">
            <summary>
            Gets an element of <i>C</i>.
            </summary>
            <param name="k">the one-dimensional index.</param>
            <returns>the value of the <i>C</i> coefficient.</returns>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.Sv(System.Int32)">
            <summary>
            Gets an element of <i>S</i>.
            </summary>
            <param name="k">the one-dimensional index.</param>
            <returns>the value of the <i>S</i> coefficient.</returns>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.Cv(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Gets an element of <i>C</i> with checking.
            </summary>
            <param name="k">the one-dimensional index.</param>
            <param name="n">the requested degree.</param>
            <param name="m">the requested order.</param>
            <param name="f">a multiplier.</param>
            <returns>
            the value of the <i>C</i> coefficient multiplied by <paramref name="f"/> in <paramref name="n"/> and <paramref name="m"/>
            are in range else <c>0</c>.
            </returns>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.Sv(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Gets an element of <i>S</i> with checking.
            </summary>
            <param name="k">the one-dimensional index.</param>
            <param name="n">the requested degree.</param>
            <param name="m">the requested order.</param>
            <param name="f">a multiplier.</param>
            <returns>
            the value of the <i>S</i> coefficient multiplied by <paramref name="f"/> in <paramref name="n"/> and <paramref name="m"/>
            are in range else <c>0</c>.
            </returns>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.Csize(System.Int32,System.Int32)">
            <summary>
            Gets the size of the coefficient vector for the cosine terms.
            </summary>
            <param name="N">the maximum degree.</param>
            <param name="M">the maximum order.</param>
            <returns>the size of the vector of cosine terms as stored in column major order.</returns>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.Ssize(System.Int32,System.Int32)">
            <summary>
            Gets size of the coefficient vector for the sine terms.
            </summary>
            <param name="N">the maximum degree.</param>
            <param name="M">the maximum order.</param>
            <returns>the size of the vector of sine terms as stored in column major order.</returns>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff.FromStream(System.IO.Stream,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Load coefficients from a binary stream.
            </summary>
            <param name="stream">the input stream.</param>
            <param name="N">The maximum degree of the coefficients.</param>
            <param name="M">The maximum order of the coefficients.</param>
            <param name="truncate">
            if <see langword="false"/> (the default) then <paramref name="N"/> and <paramref name="M"/> are determined by the values in the binary stream; 
            otherwise, the input values of <paramref name="N"/> and <paramref name="M"/> are used to truncate the coefficients read from the stream at the given degree and order.
            </param>
            <remarks>
            <paramref name="N"/> and <paramref name="M"/> are read as 4-byte ints.
            are resized to accommodate all the coefficients (with the <i>m</i> = 0 coefficients for <i>S</i> excluded)
            and the data for these coefficients read as 8-byte doubles. The coefficients are stored in column major order.
            The bytes in the stream should use little-endian ordering. IEEE floating point is assumed for the coefficients.
            </remarks>
            <returns>
            <i>C</i>, the vector of cosine coefficients and <i>S</i>, the vector of sine coefficients.
            </returns>
        </member>
        <member name="T:GeographicLib.SphericalHarmonics.SphericalHarmonic">
            <summary>
            Spherical harmonic series.
            </summary>
            <remarks>
            This class evaluates the spherical harmonic sum
            <code>
            V(x, y, z) = sum(n = 0..N)[ q^(n+1) * sum(m = 0..n)[
              (C[n, m] * cos(m* lambda) + S[n, m] * sin(m* lambda)) *
              P[n, m](cos(theta)) ] ]
            </code>
            <para>
            where
            <list type="bullet">
            <item><i>p</i>^2 = <i>x</i>^2 + <i>y</i>^2,</item>
            <item><i>r</i>^2 = <i>p</i>^2 + <i>z</i>^2,</item>
            <item><i>q</i> = <i>a</i> / <i>r</i>,</item>
            <item>θ = atan2(<i>p</i>, <i>z</i>) = the spherical <i>colatitude</i>,</item>
            <item>λ = atan2(<i>y</i>, <i>x</i>) = the longitude.</item>
            <item>P<i>nm</i>(<i>t</i>) is the associated Legendre polynomial of degree <i>n</i> and order <i>m</i>.</item>
            </list>
            </para>
            <para>
            Two normalizations are supported for P<i>nm</i>
            <list type="bullet">
            <item>fully normalized denoted by <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Full"/>.</item>
            <item>Schmidt semi-normalized denoted by <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Schmidt"/>.</item>
            </list>
            </para>
            <para>
            Clenshaw summation is used for the sums over both <i>n</i> and <i>m</i>.
            This allows the computation to be carried out without the need for any temporary arrays.
            See <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine"/> for more information on the implementation.
            </para>
            <para>
            References:
            <list type="bullet">
            <item>
            C. W. Clenshaw, <a href="https://doi.org/10.1090/S0025-5718-1955-0071856-0">
            A note on the summation of Chebyshev series</a>, Math. Tables Aids Comput. 9(51), 118–120 (1955).
            </item>
            <item>
            R. E. Deakin, Derivatives of the earth's potentials, Geomatics Research Australasia 68, 31–60, (June 1998).
            </item>
            <item>
            <a href="https://archive.org/details/HeiskanenMoritz1967PhysicalGeodesy">Physical Geodesy (Freeman, San Francisco, 1967)</a>. (See Sec. 1-14, for a definition of Pbar.)
            </item>
            <item>
            S. A. Holmes and W. E. Featherstone, 
            <a href="https://doi.org/10.1007/s00190-002-0216-2">
            A unified approach to the Clenshaw summation and the recursive computation of very high degree and order normalised associated Legendre functions</a>,
            J. Geodesy 76(5), 279–299 (2002).
            </item>
            <item>
            C. C. Tscherning and K. Poder, Some geodetic applications of Clenshaw summation, Boll. Geod. Sci. Aff. 41(4), 349–375 (1982).
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.#ctor(System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.Double,GeographicLib.SphericalHarmonics.Normalization)">
            <summary>
            Constructor with a full set of coefficients specified.
            </summary>
            <param name="C">the coefficients <i>Cnm</i>.</param>
            <param name="S">the coefficients <i>Snm</i>.</param>
            <param name="N">the maximum degree and order of the sum</param>
            <param name="a">the reference radius appearing in the definition of the sum.</param>
            <param name="norm">the normalization for the associated Legendre polynomials,
            either <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Full"/> (the default) or <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Schmidt"/>.</param>
            <remarks>
            The coefficients <i>Cnm</i> and <i>Snm</i> are stored in the one-dimensional vectors
            <i>C</i> and <i>S</i> which must contain (<i>N</i> + 1)(<i>N</i> + 2)/2 and <i>N</i> (<i>N</i> + 1)/2 elements,
            respectively, stored in "column-major" order. 
            Thus for <i>N</i> = 3, the order would be: <i>C</i>00, <i>C</i>10, <i>C</i>20, <i>C</i>30, <i>C</i>11, <i>C</i>21, <i>C</i>31, <i>C</i>22, <i>C</i>32, <i>C</i>33.
            In general the (<i>n</i>,<i>m</i>) element is at index <i>m</i> <i>N</i> − <i>m</i> (<i>m</i> − 1)/2 + <i>n</i>.
            The layout of <i>S</i> is the same except that the first column is omitted (since the <i>m</i> = 0 terms never contribute to the sum)
            and the 0th element is <i>S</i>11.
            <para>
            The class stores <i>pointers</i> to the first elements of <i>C</i> and <i>S</i>.
            These arrays should not be altered or destroyed during the lifetime of a <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> object.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.#ctor(System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.Int32,System.Int32,System.Double,GeographicLib.SphericalHarmonics.Normalization)">
            <summary>
            Constructor with a subset of coefficients specified.
            </summary>
            <param name="C">the coefficients <i>Cnm</i>.</param>
            <param name="S">the coefficients <i>Snm</i>.</param>
            <param name="N">the maximum degree and order of the sum</param>
            <param name="nmx">the maximum degree used in the sum. The sum over <i>n</i> is from <c>0</c> thru <i>nmx</i>.</param>
            <param name="mmx">the maximum order used in the sum. The sum over <i>m</i> is from <c>0</c> thru min(<i>n</i>, <i>mmx</i>).</param>
            <param name="a">the reference radius appearing in the definition of the sum.</param>
            <param name="norm">the normalization for the associated Legendre polynomials,
            either <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Full"/> (the default) or <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Schmidt"/>.</param>
            <remarks>
            <para>
            The class stores <i>pointers</i> to the first elements of <i>C</i> and <i>S</i>.
            These arrays should not be altered or destroyed during the lifetime of a <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> object.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.#ctor(GeographicLib.SphericalHarmonics.SphericalEngine.Coeff,System.Double,GeographicLib.SphericalHarmonics.Normalization)">
            <summary>
            Constructor with a subset of coefficients specified.
            </summary>
            <param name="coeff">A <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object containing <i>Cnm</i> and <i>Snm</i> coefficients.</param>
            <param name="a">the reference radius appearing in the definition of the sum.</param>
            <param name="norm">the normalization for the associated Legendre polynomials,
            either <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Full"/> (the default) or <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Schmidt"/>.</param>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.Evaluate(System.Double,System.Double,System.Double)">
            <summary>
            Compute the spherical harmonic sum.
            </summary>
            <param name="x"><i>x</i> component of the cartesian coordinate.</param>
            <param name="y"><i>y</i> component of the cartesian coordinate.</param>
            <param name="z"><i>z</i> component of the cartesian coordinate.</param>
            <returns><i>V</i>, the spherical harmonic sum.</returns>
            <remarks>
            This routine requires constant memory and thus never throws an exception.
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.Evaluate(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute the spherical harmonic sum and its gradient.
            </summary>
            <param name="x"><i>x</i> component of the cartesian coordinate.</param>
            <param name="y"><i>y</i> component of the cartesian coordinate.</param>
            <param name="z"><i>z</i> component of the cartesian coordinate.</param>
            <param name="gradx"><i>x</i> component of the gradient.</param>
            <param name="grady"><i>y</i> component of the gradient.</param>
            <param name="gradz"><i>z</i> component of the gradient.</param>
            <returns><i>V</i>, the spherical harmonic sum.</returns>
            <remarks>
            This is the same as <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.Evaluate(System.Double,System.Double,System.Double)"/>,
            except that the components of the gradients of the sum in the <i>x</i>, <i>y</i>, and <i>z</i> directions are computed.
            This routine requires constant memory and thus never throws an exception.
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.Circle(System.Double,System.Double,System.Boolean)">
            <summary>
            Create a <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> to allow the efficient evaluation of several points on a circle of latitude.
            </summary>
            <param name="p">the radius of the circle.</param>
            <param name="z">the height of the circle above the equatorial plane.</param>
            <param name="gradp">if <see langword="true"/> the returned object will be able to compute the gradient of the sum.</param>
            <returns>A <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> instance.</returns>
            <remarks>
            <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.Evaluate(System.Double,System.Double,System.Double)"/> exchanges the order of the sums in the definition,
            i.e., ∑<i>n</i> = 0..<i>N</i> ∑<i>m</i> = 0..<i>n</i> becomes ∑<i>m</i> = 0..<i>N</i> ∑<i>n</i> = <i>m</i>..<i>N</i>.
            <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic.Circle(System.Double,System.Double,System.Boolean)"/> performs the inner sum over degree n (which entails about <i>N</i>^2 operations).
            Calling <see cref="M:GeographicLib.SphericalHarmonics.CircularEngine.Evaluate(System.Double)"/> on the returned object performs the outer sum over the order <i>m</i> (about <i>N</i> operations).
            </remarks>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalHarmonic.Coefficients">
            <summary>
            Gets the zeroth <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object.
            </summary>
        </member>
        <member name="T:GeographicLib.SphericalHarmonics.SphericalHarmonic1">
            <summary>
            Spherical harmonic series with a correction to the coefficients.
            </summary>
            <remarks>
            This classes is similar to <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/>, 
            except that the coefficients <i>Cnm</i> are replaced by <i>Cnm</i> + <i>tau</i> <i>C</i> '<i>nm</i> (and similarly for <i>Snm</i>).
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic1.#ctor(System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.Double,GeographicLib.SphericalHarmonics.Normalization)">
            <summary>
            Constructor with a full set of coefficients specified.
            </summary>
            <param name="C">the coefficients <i>Cnm</i>.</param>
            <param name="S">the coefficients <i>Snm</i>.</param>
            <param name="N">the maximum degree and order of the sum</param>
            <param name="C1">the coefficients <i>C'nm</i>.</param>
            <param name="S1">the coefficients <i>S'nm</i>.</param>
            <param name="N1">the maximum degree and order of the correction coefficients <i>C'nm</i> and <i>S'nm</i>.</param>
            <param name="a">the reference radius appearing in the definition of the sum.</param>
            <param name="norm">the normalization for the associated Legendre polynomials,
            either <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Full"/> (the default) or <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Schmidt"/>.</param>
            <remarks>
            See <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> for the way the coefficients should be stored.
            <para>
            The class stores pointers to the first elements of <i>C</i>, <i>S</i>, <i>C</i> ', and <i>S</i> '.
            These arrays should not be altered or destroyed during the lifetime of a <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> object.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic1.#ctor(System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.Int32,System.Int32,System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.Int32,System.Int32,System.Double,GeographicLib.SphericalHarmonics.Normalization)">
            <summary>
            Constructor with a full set of coefficients specified.
            </summary>
            <param name="C">the coefficients <i>Cnm</i>.</param>
            <param name="S">the coefficients <i>Snm</i>.</param>
            <param name="N">the degree used to determine the layout of <i>C</i> and <i>S</i>.</param>
            <param name="nmx">the maximum degree used in the sum. The sum over <i>n</i> is from <c>0</c> thru <i>nmx</i>.</param>
            <param name="mmx">the maximum order used in the sum. The sum over <i>m</i> is from <c>0</c> thru min(<i>n</i>, <i>mmx</i>).</param>
            <param name="C1">the coefficients <i>C'nm</i>.</param>
            <param name="S1">the coefficients <i>S'nm</i>.</param>
            <param name="N1">the degree used to determine the layout of <i>C</i> ' and <i>S</i> '.</param>
            <param name="nmx1">the maximum degree used for <i>C</i> ' and <i>S</i> '.</param>
            <param name="mmx1">the maximum order used for <i>C</i> ' and <i>S</i> '.</param>
            <param name="a">the reference radius appearing in the definition of the sum.</param>
            <param name="norm">the normalization for the associated Legendre polynomials,
            either <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Full"/> (the default) or <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Schmidt"/>.</param>
            <remarks>
            See <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> for the way the coefficients should be stored.
            <para>
            The class stores pointers to the first elements of <i>C</i>, <i>S</i>, <i>C</i> ', and <i>S</i> '.
            These arrays should not be altered or destroyed during the lifetime of a <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> object.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic1.#ctor(GeographicLib.SphericalHarmonics.SphericalEngine.Coeff,GeographicLib.SphericalHarmonics.SphericalEngine.Coeff,System.Double,GeographicLib.SphericalHarmonics.Normalization)">
            <summary>
            Constructor with a subset of coefficients specified.
            </summary>
            <param name="coeff0">A <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object containing <i>Cnm</i> and <i>Snm</i> coefficients.</param>
            <param name="coeff1">A <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object containing <i>C'nm</i> and <i>S'nm</i> coefficients.</param>
            <param name="a">the reference radius appearing in the definition of the sum.</param>
            <param name="norm">the normalization for the associated Legendre polynomials,
            either <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Full"/> (the default) or <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Schmidt"/>.</param>
            <remarks>See <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> for the way the coefficients should be stored.</remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic1.Evaluate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compute a spherical harmonic sum with a correction term.
            </summary>
            <param name="tau">multiplier for correction coefficients <i>C</i> ' and <i>S</i> '.</param>
            <param name="x"><i>x</i> component of the cartesian coordinate.</param>
            <param name="y"><i>y</i> component of the cartesian coordinate.</param>
            <param name="z"><i>z</i> component of the cartesian coordinate.</param>
            <returns><i>V</i>, the spherical harmonic sum.</returns>
            <remarks>
            This routine requires constant memory and thus never throws an exception.
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic1.Evaluate(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute a spherical harmonic sum with a correction term and its gradient.
            </summary>
            <param name="tau">multiplier for correction coefficients <i>C</i> ' and <i>S</i> '.</param>
            <param name="x"><i>x</i> component of the cartesian coordinate.</param>
            <param name="y"><i>y</i> component of the cartesian coordinate.</param>
            <param name="z"><i>z</i> component of the cartesian coordinate.</param>
            <param name="gradx"><i>x</i> component of the gradient.</param>
            <param name="grady"><i>y</i> component of the gradient.</param>
            <param name="gradz"><i>z</i> component of the gradient.</param>
            <returns><i>V</i>, the spherical harmonic sum.</returns>
            <remarks>
            This is the same as <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic1.Evaluate(System.Double,System.Double,System.Double,System.Double)"/>,
            except that the components of the gradients of the sum in the <i>x</i>, <i>y</i>, and <i>z</i> directions are computed.
            This routine requires constant memory and thus never throws an exception.
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic1.Circle(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Create a <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> to allow the efficient evaluation of several points on a circle of latitude at a fixed value of <i>tau</i>.
            </summary>
            <param name="tau">multiplier for correction coefficients <i>C</i> ' and <i>S</i> '.</param>
            <param name="p">the radius of the circle.</param>
            <param name="z">the height of the circle above the equatorial plane.</param>
            <param name="gradp">if <see langword="true"/> the returned object will be able to compute the gradient of the sum.</param>
            <returns>A <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> instance.</returns>
            <remarks>
            <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic1.Evaluate(System.Double,System.Double,System.Double,System.Double)"/> exchanges the order of the sums in the definition,
            i.e., ∑<i>n</i> = 0..<i>N</i> ∑<i>m</i> = 0..<i>n</i> becomes ∑<i>m</i> = 0..<i>N</i> ∑<i>n</i> = <i>m</i>..<i>N</i>.
            <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic1.Circle(System.Double,System.Double,System.Double,System.Boolean)"/> performs the inner sum over degree n (which entails about <i>N</i>^2 operations).
            Calling <see cref="M:GeographicLib.SphericalHarmonics.CircularEngine.Evaluate(System.Double)"/> on the returned object performs the outer sum over the order <i>m</i> (about <i>N</i> operations).
            </remarks>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalHarmonic1.Coefficients">
            <summary>
            Gets the zeroth <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object.
            </summary>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalHarmonic1.Coefficients1">
            <summary>
            Gets the first <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object.
            </summary>
        </member>
        <member name="T:GeographicLib.SphericalHarmonics.SphericalHarmonic2">
            <summary>
            Spherical harmonic series with two corrections to the coefficients.
            </summary>
            <remarks>
            This classes is similar to <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/>, 
            except that the coefficients <i>Cnm</i> are replaced by <i>Cnm</i> + <i>tau</i> ' <i>C'nm</i> + <i>tau</i>'' <i>C''nm</i> 
            (and similarly for <i>Snm</i>).
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic2.#ctor(System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.Double,GeographicLib.SphericalHarmonics.Normalization)">
            <summary>
            Constructor with a subset of coefficients specified.
            </summary>
            <param name="C">the coefficients <i>Cnm</i>.</param>
            <param name="S">the coefficients <i>Snm</i>.</param>
            <param name="N">the maximum degree and order of the sum.</param>
            <param name="C1">the coefficients <i>C'nm</i>.</param>
            <param name="S1">the coefficients <i>S'nm</i>.</param>
            <param name="N1">the maximum degree and order of the first correction coefficients <i>C'nm</i> and <i>S'nm</i>.</param>
            <param name="C2">the coefficients <i>C''nm</i>.</param>
            <param name="S2">the coefficients <i>S''nm</i>.</param>
            <param name="N2">the maximum degree and order of the first correction coefficients <i>C''nm</i> and <i>S''nm</i>.</param>
            <param name="a">the reference radius appearing in the definition of the sum.</param>
            <param name="norm">the normalization for the associated Legendre polynomials,
            either <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Full"/> (the default) or <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Schmidt"/>.</param>
            <remarks>
            See <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> for the way the coefficients should be stored.
            <para>
            The class stores pointers to the first elements of <i>C</i>, <i>S</i>, <i>C</i> ', <i>S</i> ', <i>C</i> '' and <i>S</i> ''.
            These arrays should not be altered or destroyed during the lifetime of a <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> object.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic2.#ctor(System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.Int32,System.Int32,System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.Int32,System.Int32,System.ReadOnlyMemory{System.Double},System.ReadOnlyMemory{System.Double},System.Int32,System.Int32,System.Int32,System.Double,GeographicLib.SphericalHarmonics.Normalization)">
            <summary>
            Constructor with a subset of coefficients specified.
            </summary>
            <param name="C">the coefficients <i>Cnm</i>.</param>
            <param name="S">the coefficients <i>Snm</i>.</param>
            <param name="N">the degree used to determine the layout of <i>C</i> and <i>S</i>.</param>
            <param name="nmx">the maximum degree used in the sum. The sum over <i>n</i> is from <c>0</c> thru <i>nmx</i>.</param>
            <param name="mmx">the maximum order used in the sum. The sum over <i>m</i> is from <c>0</c> thru min(<i>n</i>, <i>mmx</i>).</param>
            <param name="C1">the coefficients <i>C'nm</i>.</param>
            <param name="S1">the coefficients <i>S'nm</i>.</param>
            <param name="N1">the degree used to determine the layout of <i>C</i> ' and <i>S</i> '.</param>
            <param name="nmx1">the maximum degree used for <i>C</i> ' and <i>S</i> '.</param>
            <param name="mmx1">the maximum order used for <i>C</i> ' and <i>S</i> '.</param>
            <param name="C2">the coefficients <i>C''nm</i>.</param>
            <param name="S2">the coefficients <i>S''nm</i>.</param>
            <param name="N2">the degree used to determine the layout of <i>C</i> '' and <i>S</i> ''.</param>
            <param name="nmx2">the maximum degree used for <i>C</i> '' and <i>S</i> ''.</param>
            <param name="mmx2">the maximum order used for <i>C</i> '' and <i>S</i> ''.</param>
            <param name="a">the reference radius appearing in the definition of the sum.</param>
            <param name="norm">the normalization for the associated Legendre polynomials,
            either <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Full"/> (the default) or <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Schmidt"/>.</param>
            <remarks>
            See <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> for the way the coefficients should be stored.
            <para>
            The class stores pointers to the first elements of <i>C</i>, <i>S</i>, <i>C</i> ', <i>S</i> ', <i>C</i> '' and <i>S</i> ''.
            These arrays should not be altered or destroyed during the lifetime of a <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> object.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic2.#ctor(GeographicLib.SphericalHarmonics.SphericalEngine.Coeff,GeographicLib.SphericalHarmonics.SphericalEngine.Coeff,GeographicLib.SphericalHarmonics.SphericalEngine.Coeff,System.Double,GeographicLib.SphericalHarmonics.Normalization)">
            <summary>
            Constructor with a subset of coefficients specified.
            </summary>
            <param name="coeff0">A <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object containing <i>Cnm</i> and <i>Snm</i> coefficients.</param>
            <param name="coeff1">A <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object containing <i>C'nm</i> and <i>S'nm</i> coefficients.</param>
            <param name="coeff2">A <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object containing <i>C''nm</i> and <i>S''nm</i> coefficients.</param>
            <param name="a">the reference radius appearing in the definition of the sum.</param>
            <param name="norm">the normalization for the associated Legendre polynomials,
            either <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Full"/> (the default) or <see cref="F:GeographicLib.SphericalHarmonics.Normalization.Schmidt"/>.</param>
            <remarks>See <see cref="T:GeographicLib.SphericalHarmonics.SphericalHarmonic"/> for the way the coefficients should be stored.</remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic2.Evaluate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compute a spherical harmonic sum with a correction term.
            </summary>
            <param name="tau1">multiplier for correction coefficients <i>C</i> ' and <i>S</i> '.</param>
            <param name="tau2">multiplier for correction coefficients <i>C</i> '' and <i>S</i> ''.</param>
            <param name="x"><i>x</i> component of the cartesian coordinate.</param>
            <param name="y"><i>y</i> component of the cartesian coordinate.</param>
            <param name="z"><i>z</i> component of the cartesian coordinate.</param>
            <returns><i>V</i>, the spherical harmonic sum.</returns>
            <remarks>
            This routine requires constant memory and thus never throws an exception.
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic2.Evaluate(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Compute a spherical harmonic sum with a correction term and its gradient.
            </summary>
            <param name="tau1">multiplier for correction coefficients <i>C</i> ' and <i>S</i> '.</param>
            <param name="tau2">multiplier for correction coefficients <i>C</i> '' and <i>S</i> ''.</param>
            <param name="x"><i>x</i> component of the cartesian coordinate.</param>
            <param name="y"><i>y</i> component of the cartesian coordinate.</param>
            <param name="z"><i>z</i> component of the cartesian coordinate.</param>
            <param name="gradx"><i>x</i> component of the gradient.</param>
            <param name="grady"><i>y</i> component of the gradient.</param>
            <param name="gradz"><i>z</i> component of the gradient.</param>
            <returns><i>V</i>, the spherical harmonic sum.</returns>
            <remarks>
            This is the same as <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic2.Evaluate(System.Double,System.Double,System.Double,System.Double,System.Double)"/>,
            except that the components of the gradients of the sum in the <i>x</i>, <i>y</i>, and <i>z</i> directions are computed.
            This routine requires constant memory and thus never throws an exception.
            </remarks>
        </member>
        <member name="M:GeographicLib.SphericalHarmonics.SphericalHarmonic2.Circle(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Create a <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> to allow the efficient evaluation of several points on a circle of latitudeat a fixed value of <i>tau</i>.
            </summary>
            <param name="tau1">multiplier for correction coefficients <i>C</i> ' and <i>S</i> '.</param>
            <param name="tau2">multiplier for correction coefficients <i>C</i> '' and <i>S</i> ''.</param>
            <param name="p">the radius of the circle.</param>
            <param name="z">the height of the circle above the equatorial plane.</param>
            <param name="gradp">if <see langword="true"/> the returned object will be able to compute the gradient of the sum.</param>
            <returns>A <see cref="T:GeographicLib.SphericalHarmonics.CircularEngine"/> instance.</returns>
            <remarks>
            <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic2.Evaluate(System.Double,System.Double,System.Double,System.Double,System.Double)"/> exchanges the order of the sums in the definition,
            i.e., ∑<i>n</i> = 0..<i>N</i> ∑<i>m</i> = 0..<i>n</i> becomes ∑<i>m</i> = 0..<i>N</i> ∑<i>n</i> = <i>m</i>..<i>N</i>.
            <see cref="M:GeographicLib.SphericalHarmonics.SphericalHarmonic2.Circle(System.Double,System.Double,System.Double,System.Double,System.Boolean)"/> performs the inner sum over degree n (which entails about <i>N</i>^2 operations).
            Calling <see cref="M:GeographicLib.SphericalHarmonics.CircularEngine.Evaluate(System.Double)"/> on the returned object performs the outer sum over the order <i>m</i> (about <i>N</i> operations).
            </remarks>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalHarmonic2.Coefficients">
            <summary>
            Gets the zeroth <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object.
            </summary>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalHarmonic2.Coefficients1">
            <summary>
            Gets the first <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object.
            </summary>
        </member>
        <member name="P:GeographicLib.SphericalHarmonics.SphericalHarmonic2.Coefficients2">
            <summary>
            Gets the second <see cref="T:GeographicLib.SphericalHarmonics.SphericalEngine.Coeff"/> object.
            </summary>
        </member>
        <member name="T:GeographicLib.TrailingUnit">
            <summary>
            Indicator for trailing units on an angle.
            </summary>
        </member>
        <member name="F:GeographicLib.TrailingUnit.Degree">
            <summary>
            Trailing unit is degrees.
            </summary>
        </member>
        <member name="F:GeographicLib.TrailingUnit.Minute">
            <summary>
            Trailing unit is arc minutes.
            </summary>
        </member>
        <member name="F:GeographicLib.TrailingUnit.Second">
            <summary>
            Trailing unit is arc seconds.
            </summary>
        </member>
        <member name="T:GeographicLib.Utility">
            <summary>
            Some utility routines for GeographicLib.NET.
            </summary>
        </member>
        <member name="M:GeographicLib.Utility.Swab``1(System.Span{``0})">
            <summary>
            Swap byte order of elements in the specified array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:GeographicLib.Utility.ReadArray``1(System.IO.Stream,System.Span{``0},System.Boolean)">
            <summary>
            Read data of type <see cref="T:System.Byte"/> from a binary stream to an array of type <typeparamref name="IntT"/>.
            <para>
            The data in the file is in (<paramref name="bigendp"/> ? big : little)-endian format.
            </para>
            </summary>
            <typeparam name="IntT">the type of the objects in the array (internal).</typeparam>
            <param name="stream">the input stream containing the data of type <see cref="T:System.Byte"/> (external).</param>
            <param name="array">the output array of type <typeparamref name="IntT"/> (internal).</param>
            <param name="bigendp"><see langword="true"/> if the external storage format is big-endian.</param>
        </member>
        <member name="M:GeographicLib.Utility.FractionalYear(System.String)">
            <summary>
            Convert a string representing a date to a fractional year.
            </summary>
            <param name="s">the string to be converted.</param>
            <returns>the fractional year.</returns>
            <remarks>
            The string is first read as an ordinary number (e.g., 2010 or 2012.5);
            if this is successful, the value is returned.  Otherwise the string
            should be of the form yyyy-mm or yyyy-mm-dd and this is converted to a
            number with 2010-01-01 giving 2010.0 and 2012-07-03 giving 2012.5.  The
            string "now" is interpreted as the present date.
            </remarks>
        </member>
        <member name="T:GeographicLib.UTMUPS">
            <summary>
            Convert between geographic coordinates and UTM/UPS.
            </summary>
            <remarks>
            UTM and UPS are defined
            <list type="bullet">
            <item>
            J. W. Hager, J. F. Behensky, and B. W. Drew,
            <a href="https://web.archive.org/web/20161214054445/http://earth-info.nga.mil/GandG/publications/tm8358.2/TM8358_2.pdf">The Universal Grids: Universal Transverse Mercator (UTM) and Universal Polar Stereographic (UPS)</a>,
            Defense Mapping Agency, Technical Manual TM8358.2 (1989).
            </item>
            </list>
            Section 2-3 defines UTM and section 3-2.4 defines UPS.
            This document also includes approximate algorithms for the computation of the underlying transverse Mercator and polar stereographic projections.
            Here we substitute much more accurate algorithms given by <see cref="T:GeographicLib.Projections.TransverseMercator"/> and <see cref="T:GeographicLib.Projections.PolarStereographic"/>.
            These are the algorithms recommended by the NGA document
            <list type="bullet">
            <item>
            <a href="https://earth-info.nga.mil/coordsys/coord-download.php?file=website/NGA.SIG.0012_2.0.0_UTMUPS.pdf">The Universal Grids and the Transverse Mercator and Polar Stereographic Map Projections</a>,
            NGA.SIG.0012_2.0.0_UTMUPS (2014).
            </item>
            </list>
            In this implementation, the conversions are closed, i.e., output from Forward is legal input for Reverse and vice versa.
            The error is about 5nm in each direction.
            However, the conversion from legal UTM/UPS coordinates to geographic coordinates and back might throw an error if the initial point
            is within 5nm of the edge of the allowed range for the UTM/UPS coordinates.
            <para>
            The simplest way to guarantee the closed property is to define allowed ranges for the eastings and northings for UTM and UPS coordinates.
            The UTM boundaries are the same for all zones.
            (The only place the exceptional nature of the zone boundaries is evident is when converting to UTM/UPS coordinates requesting the standard zone.)
            The MGRS lettering scheme imposes natural limits on UTM/UPS coordinates which may be converted into MGRS coordinates.
            For the conversion to/from geographic coordinates these ranges have been extended by 100km in order to provide a generous overlap
            between UTM and UPS and between UTM zones.
            </para>
            <para>
            The <a href="http://www.nga.mil/">NGA</a> software package <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84#tab_geotrans">geotrans</a> also provides conversions to and from UTM and UPS.
            Version 2.4.2 (and earlier) suffers from some drawbacks:
            </para>
            <list type="bullet">
            <item>Inconsistent rules are used to determine the whether a particular UTM or UPS coordinate is legal. A more systematic approach is taken here.</item>
            <item>The underlying projections are not very accurately implemented.</item>
            </list>
            The <see cref="M:GeographicLib.UTMUPS.EncodeZone(System.Int32,System.Boolean,System.Boolean)"/> encodes the UTM zone and hemisphere to allow UTM/UPS coordinates to be displayed as,
            for example, "<c>38N 444500 3688500</c>". According to NGA.SIG.0012_2.0.0_UTMUPS the use of "<c>N</c>" to denote "north" in the context is not 
            allowed (since a upper case letter in this context denotes the MGRS latitude band).
            Consequently, as of version 1.36, <see cref="M:GeographicLib.UTMUPS.EncodeZone(System.Int32,System.Boolean,System.Boolean)"/> uses the lower case letters "<c>n</c>" and "<c>s</c>" to denote the hemisphere.
            In addition <see cref="M:GeographicLib.UTMUPS.EncodeZone(System.Int32,System.Boolean,System.Boolean)"/> accepts an optional final argument <i>abbrev</i>, which, if <see langword="false"/>,
            results in the hemisphere being spelled out as in "<c>38north</c>".
            </remarks>
        </member>
        <member name="P:GeographicLib.UTMUPS.EquatorialRadius">
            <summary>
            Gets a value representing the equatorial radius of the WGS84 ellipsoid (meters).
            </summary>
            <remarks>
            The WGS84 value is returned because the UTM and UPS projections are based on this ellipsoid.
            </remarks>
        </member>
        <member name="P:GeographicLib.UTMUPS.Flattening">
            <summary>
            Gets a value representing the flattening of the WGS84 ellipsoid.
            </summary>
            <remarks>
            The WGS84 value is returned because the UTM and UPS projections are based on this ellipsoid.
            </remarks>
        </member>
        <member name="P:GeographicLib.UTMUPS.UTMShift">
            <summary>
            Gets a value representing the shift (meters) necessary to align north and south halves of a UTM zone (10^7).
            </summary>
        </member>
        <member name="M:GeographicLib.UTMUPS.StandardZone(System.Double,System.Double,System.Int32)">
            <summary>
            Gets the standard zone.
            </summary>
            <param name="lat">latitude (degrees).</param>
            <param name="lon">longitude (degrees).</param>
            <param name="setzone">
            zone override (optional). If omitted, use the standard rules for picking the zone.
            If setzone is given then use that zone if it is non-negative, otherwise apply the rules given in <see cref="T:GeographicLib.ZoneSpec"/>.
            </param>
            <returns></returns>
            <remarks>
            This is exact.
            </remarks>
        </member>
        <member name="M:GeographicLib.UTMUPS.Reverse(System.Int32,System.Boolean,System.Double,System.Double,System.Boolean)">
            <summary>
            <see cref="M:GeographicLib.UTMUPS.Reverse(System.Int32,System.Boolean,System.Double,System.Double,System.Double@,System.Double@,System.Boolean)"/> without returning convergence and scale.
            </summary>
            <param name="zone">the UTM zone (zero means UPS).</param>
            <param name="northp">hemisphere (true means north, false means south).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="mgrslimits">if <see langword="true"/> enforce the stricter MGRS limits on the coordinates(default = <see langword="false"/>).</param>
            <returns>
            <i>lat</i>, latitude of point (degrees) and <i>lon</i>, longitude of point (degrees).
            </returns>
        </member>
        <member name="M:GeographicLib.UTMUPS.Reverse(System.Int32,System.Boolean,System.Double,System.Double,System.Double@,System.Double@,System.Boolean)">
            <summary>
            Reverse projection, from UTM/UPS to geographic.
            </summary>
            <param name="zone">the UTM zone (zero means UPS).</param>
            <param name="northp">hemisphere (true means north, false means south).</param>
            <param name="x">easting of point (meters).</param>
            <param name="y">northing of point (meters).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">scale of projection at point.</param>
            <param name="mgrslimits">if <see langword="true"/> enforce the stricter MGRS limits on the coordinates(default = <see langword="false"/>).</param>
            <returns>
            <i>lat</i>, latitude of point (degrees) and <i>lon</i>, longitude of point (degrees).
            </returns>
            <remarks>
            The accuracy of the conversion is about 5nm.
            <para>
            UTM eastings are allowed to be in the range [0km, 1000km], northings are allowed to be in in [0km, 9600km] for the northern hemisphere
            and in [900km, 10000km] for the southern hemisphere.
            However UTM northings can be continued across the equator.
            So the actual limits on the northings are [-9100km, 9600km] for the "northern" hemisphere and [900km, 19600km] for the "southern" hemisphere.
            </para>
            <para>
            UPS eastings and northings are allowed to be in the range [1200km, 2800km] in the northern hemisphere and in [700km, 3300km] in the southern hemisphere.
            </para>
            <para>
            These ranges are 100km larger than allowed for the conversions to <see cref="T:GeographicLib.Geocodes.MGRS"/>.
            (100km is the maximum extra padding consistent with eastings remaining non-negative.)
            This allows generous overlaps between zones and UTM and UPS. If <paramref name="mgrslimits"/> = <see langword="true"/>,
            then all the ranges are shrunk by 100km so that they agree with the stricter <see cref="T:GeographicLib.Geocodes.MGRS"/> ranges.
            No checks are performed besides these (e.g., to limit the distance outside the standard zone boundaries).
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.UTMUPS.Forward(System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            <see cref="M:GeographicLib.UTMUPS.Forward(System.Double,System.Double,System.Double@,System.Double@,System.Int32,System.Boolean)"/> without convergence and scale.
            </summary>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="setzone">zone override (optional).</param>
            <param name="mgrslimits">if <see langword="true"/> enforce the stricter MGRS limits on the coordinates(default = <see langword="false"/>).</param>
            <returns>
            <list type="bullet">
            <item><i>zone</i>, the UTM zone (zero means UPS).</item>
            <item><i>northp</i>, hemisphere (<see langword="true"/> means north, <see langword="false"/> means south).</item>
            <item><i>x</i>, easting of point (meters).</item>
            <item><i>y</i>, northing of point (meters).</item>
            </list>
            </returns>
            <remarks>
            If <paramref name="setzone"/> is omitted, use the standard rules for picking the zone.
            If <paramref name="setzone"/> is given then use that zone if it is non-negative, otherwise apply the rules given in <see cref="T:GeographicLib.ZoneSpec"/>.
            The accuracy of the conversion is about 5nm.
            <para>
            The northing <i>y</i> jumps by <see cref="P:GeographicLib.UTMUPS.UTMShift"/> when crossing the equator in the southerly direction.
            Sometimes it is useful to remove this discontinuity in <i>y</i> by extending the "northern" hemisphere using <see cref="M:GeographicLib.UTMUPS.Transfer(System.Int32,System.Boolean,System.Double,System.Double,System.Int32,System.Boolean)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.UTMUPS.Forward(System.Double,System.Double,System.Double@,System.Double@,System.Int32,System.Boolean)">
            <summary>
            Forward projection, from geographic to UTM/UPS.
            </summary>
            <param name="lat">latitude of point (degrees).</param>
            <param name="lon">longitude of point (degrees).</param>
            <param name="setzone">zone override (optional).</param>
            <param name="gamma">meridian convergence at point (degrees).</param>
            <param name="k">scale of projection at point.</param>
            <param name="mgrslimits">if <see langword="true"/> enforce the stricter MGRS limits on the coordinates(default = <see langword="false"/>).</param>
            <returns>
            <list type="bullet">
            <item><i>zone</i>, the UTM zone (zero means UPS).</item>
            <item><i>northp</i>, hemisphere (<see langword="true"/> means north, <see langword="false"/> means south).</item>
            <item><i>x</i>, easting of point (meters).</item>
            <item><i>y</i>, northing of point (meters).</item>
            </list>
            </returns>
        </member>
        <member name="M:GeographicLib.UTMUPS.Transfer(System.Int32,System.Boolean,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Transfer UTM/UPS coordinates from one zone to another.
            </summary>
            <param name="zonein">the UTM zone for <paramref name="xin"/> and <paramref name="yin"/> (or zero for UPS).</param>
            <param name="northpin">hemisphere for <paramref name="xin"/> and <paramref name="yin"/>
            (<see langword="true"/> means north, <see langword="false"/> means south).</param>
            <param name="xin">easting of point (meters) in <paramref name="zonein"/>.</param>
            <param name="yin">northing of point (meters) in <paramref name="zonein"/>.</param>
            <param name="zoneout">the requested UTM zone for <i>xout</i> and <i>yout</i> (or zero for UPS).</param>
            <param name="northpout">hemisphere for <i>xout</i> and <i>yout</i>.</param>
            <returns>
            <list type="bullet">
            <item><i>zone</i>, the actual UTM zone for <i>xout</i> and <i>yout</i> (or zero for UPS);
            this equals <paramref name="zoneout"/> if <paramref name="zoneout"/> ≥ 0.</item>
            <item><i>xout</i>, easting of point (meters) in <paramref>zoneout</paramref>.</item>
            <item><i>yout</i>, northing of point (meters) in <paramref>zoneout</paramref>.</item>
            </list>
            </returns>
            <remarks>
            <paramref name="zonein"/> must be in the range [0, 60] with <paramref name="zonein"/> = <see cref="F:GeographicLib.ZoneSpec.UPS"/>, 0, indicating UPS.
            <paramref name="zonein"/> may also be <see cref="F:GeographicLib.ZoneSpec.Invalid"/>.
            <para>
            <paramref name="zoneout"/> must be in the range [-4, 60]. If <paramref name="zoneout"/> &lt; <see cref="F:GeographicLib.ZoneSpec.MinZone"/> then the rules
            give in the documentation of <see cref="T:GeographicLib.ZoneSpec"/> are applied, and <i>zone</i> is set to the actual zone used for output.
            </para>
            <para>
            (<i>xout, yout</i>) can overlap with (<i>xin, yin</i>).
            </para>
            </remarks>
        </member>
        <member name="M:GeographicLib.UTMUPS.DecodeZone(System.ReadOnlySpan{System.Char})">
            <summary>
            Decode a UTM/UPS zone string.
            </summary>
            <param name="zonestr">string representation of zone and hemisphere.</param>
            <returns>
            <i>zone</i>, the UTM zone (zero means UPS) and <i>northp</i>, hemisphere (<see langword="true"/> means north, <see langword="false"/> means south).
            </returns>
            <remarks>
            For UTM, <paramref name="zonestr"/> has the form of a zone number in the range [1, 60] followed by a hemisphere letter,
            <c>n</c> or <c>s</c> (or "<c>north</c>" or "<c>south</c>" spelled out).
            For UPS, it consists just of the hemisphere letter (or the spelled out hemisphere).
            The returned value of <i>zone</i> is 0 for UPS.
            Note well that "<c>38s</c>" indicates the southern hemisphere of zone 38 and not latitude band <c>S</c>, 32° ≤ <i>lat</i> &lt; 40°.
            <c>n</c>, <c>01s</c>, <c>2n</c>, <c>38s</c>, <c>south</c>, <c>3north</c> are legal.
            <c>0n</c>, <c>001s</c>, <c>+3n</c>, <c>61n</c>, <c>38P</c> are illegal.
            <c>INV</c> is a special value for which the returned value of is <see cref="F:GeographicLib.ZoneSpec.Invalid"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.UTMUPS.EncodeZone(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Encode a UTM/UPS zone string.
            </summary>
            <param name="zone">the UTM zone (zero means UPS).</param>
            <param name="northp">hemisphere (<see langword="true"/> means north, <see langword="false"/> means south).</param>
            <param name="abbrev">
            if <see langword="true"/> (the default) use abbreviated (<c>n</c>/<c>s</c>) notation for hemisphere;
            otherwise spell out the hemisphere (<c>north</c>/<c>south</c>).
            </param>
            <returns>string representation of zone and hemisphere.</returns>
            <remarks>
            <paramref name="zone"/> must be in the range [0, 60] with zone = 0, indicating UPS (but the resulting string does not contain "0").
            <paramref name="zone"/> may also be <see cref="F:GeographicLib.ZoneSpec.Invalid"/>, in which case the returned string is "<c>inv</c>".
            This reverses <see cref="M:GeographicLib.UTMUPS.DecodeZone(System.ReadOnlySpan{System.Char})"/>.
            </remarks>
        </member>
        <member name="M:GeographicLib.UTMUPS.DecodeEPSG(System.Int32)">
            <summary>
            Decode EPSG.
            </summary>
            <param name="epsg">the EPSG code.</param>
            <returns>
            <list type="bullet">
            <item><i>zone</i>, the UTM zone (zero means UPS).</item>
            <item><i>northp</i>, hemisphere (<see langword="true"/> means north, <see langword="false"/> means south).</item>
            </list>
            </returns>
            <remarks>
            EPSG (European Petroleum Survery Group) codes are a way to refer to many different projections.
            <see cref="M:GeographicLib.UTMUPS.DecodeEPSG(System.Int32)"/> decodes those referring to UTM or UPS projections for the WGS84 ellipsoid.
            If the code does not refer to one of these projections, <i>zone</i> is set to <see cref="F:GeographicLib.ZoneSpec.Invalid"/>.
            See <a href="https://www.spatialreference.org/ref/epsg/"></a>.
            </remarks>
        </member>
        <member name="M:GeographicLib.UTMUPS.EncodeEPSG(System.Int32,System.Boolean)">
            <summary>
            Encode zone as EPSG.
            </summary>
            <param name="zone">the UTM zone (zero means UPS).</param>
            <param name="northp">hemisphere (true means north, false means south).</param>
            <returns>EPSG code (or -1 if zone is not in the range [0, 60])</returns>
            <remarks>
            Convert <paramref name="zone"/> and <paramref name="northp"/> to the corresponding EPSG (European Petroleum Survery Group) codes.
            </remarks>
        </member>
        <member name="T:GeographicLib.ZoneSpec">
            <summary>
            In this class we bring together the UTM and UPS coordinates systems.
            The UTM divides the earth between latitudes −80° and 84° into 60 zones numbered 1 thru 60.
            Zone assign zone number 0 to the UPS regions, covering the two poles.
            Within <see cref="T:GeographicLib.UTMUPS"/>, non-negative zone numbers refer to one of the "physical" zones,
            0 for UPS and [1, 60] for UTM. Negative "pseudo-zone" numbers are used to select one of the physical zones.
            </summary>
        </member>
        <member name="F:GeographicLib.ZoneSpec.MinPseudoZone">
            <summary>
            The smallest pseudo-zone number.
            </summary>
        </member>
        <member name="F:GeographicLib.ZoneSpec.Invalid">
            <summary>
            A marker for an undefined or invalid zone. Equivalent to NaN.
            </summary>
        </member>
        <member name="F:GeographicLib.ZoneSpec.Match">
            <summary>
            If a coordinate already include zone information (e.g., it is an <see cref="T:GeographicLib.Geocodes.MGRS"/> coordinate),
            use that, otherwise apply the <see cref="F:GeographicLib.ZoneSpec.Standard"/> rules.
            </summary>
        </member>
        <member name="F:GeographicLib.ZoneSpec.UTM">
            <summary>
            Apply the standard rules for UTM zone assigment extending the UTM zone to each pole to give a zone number in [1, 60].
            For example, use UTM zone 38 for longitude in [42°, 48°). The rules include the Norway and Svalbard exceptions.
            </summary>
        </member>
        <member name="F:GeographicLib.ZoneSpec.Standard">
            <summary>
            Apply the standard rules for zone assignment to give a zone number in [0, 60].
            If the latitude is not in [−80°, 84°), then use <see cref="F:GeographicLib.ZoneSpec.UPS"/> = 0,
            otherwise apply the rules for <see cref="F:GeographicLib.ZoneSpec.UTM"/>.
            The tests on latitudes and longitudes are all closed on the lower end open on the upper.
            Thus for UTM zone 38, latitude is in [−80°, 84°) and longitude is in [42°, 48°).
            </summary>
        </member>
        <member name="F:GeographicLib.ZoneSpec.MaxPseudoZone">
            <summary>
            The largest pseudo-zone number.
            </summary>
        </member>
        <member name="F:GeographicLib.ZoneSpec.MinZone">
            <summary>
            The smallest physical zone number.
            </summary>
        </member>
        <member name="F:GeographicLib.ZoneSpec.UPS">
            <summary>
            The zone number used for UPS.
            </summary>
        </member>
        <member name="F:GeographicLib.ZoneSpec.MinUTMZone">
            <summary>
            The smallest UTM zone number.
            </summary>
        </member>
        <member name="F:GeographicLib.ZoneSpec.MaxUTMZone">
            <summary>
            The largest UTM zone number.
            </summary>
        </member>
        <member name="F:GeographicLib.ZoneSpec.MaxZone">
            <summary>
            The largest physical zone number.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
