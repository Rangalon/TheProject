using System;
using System.Globalization;
using System.Xml.Serialization;

namespace Math3D
{
    public struct Vec3 : IEquatable<Vec3>
    {
        #region Public Fields

        [XmlAttribute]
        public double X;

        [XmlAttribute]
        public double Y;

        [XmlAttribute]
        public double Z;

        #endregion Public Fields

        #region Public Constructors

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public Vec3(double x, double y, double z)
        {
            X = x;
            Y = y;
            Z = z;
        }

        #endregion Public Constructors

        #region Public Properties

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public double Length
        {
            get
            {
                return System.Math.Sqrt(X * X + Y * Y + Z * Z);
            }
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //public Double LengthFast
        //{
        //    get
        //    {
        //        return 1.0 / MathHelper.InverseSqrtFast(X * X + Y * Y + Z * Z);
        //    }
        //}
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public double LengthSquared
        {
            get
            {
                return X * X + Y * Y + Z * Z;
            }
        }

        #endregion Public Properties

        #region Public Methods

        public static Vec3 CreatePolarVector(Vec2 pCoord, double R)
        {
            Vec3 v;
            v.X = Math.Cos(pCoord.X) * Math.Cos(pCoord.Y) * R;
            v.Y = Math.Sin(pCoord.X) * Math.Cos(pCoord.Y) * R;
            v.Z = Math.Sin(pCoord.Y) * R;
            return v;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec3 Cross(Vec3 left, Vec3 right)
        {
            Vec3 result = new Vec3(left.Y * right.Z - left.Z * right.Y,
                left.Z * right.X - left.X * right.Z,
                left.X * right.Y - left.Y * right.X);
            return result;
        }

        public static Vec3 Cross(Ept left, Vec3 right)
        {
            Vec3 result = new Vec3(left.Y * right.Z - left.Z * right.Y,
                left.Z * right.X - left.X * right.Z,
                left.X * right.Y - left.Y * right.X);
            return result;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static double Dot(Vec3 left, Vec3 right)
        {
            return left.X * right.X + left.Y * right.Y + left.Z * right.Z;
        }

        public static double Dot(Ept left, Vec3 right)
        {
            return left.X * right.X + left.Y * right.Y + left.Z * right.Z;
        }

        public static double Dot(Vec4 left, Vec3 right)
        {
            return left.X * right.X + left.Y * right.Y + left.Z * right.Z;
        }

        public static double Dot(Vec3 left, Vec4 right)
        {
            return left.X * right.X + left.Y * right.Y + left.Z * right.Z;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static explicit operator Vec3(Vec4f v4)
        {
            Vec3 v3;
            v3.X = v4.X;
            v3.Y = v4.Y;
            v3.Z = v4.Z;
            return v3;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static explicit operator Vec3(Vec4 v4)
        {
            Vec3 v3;
            v3.X = v4.X;
            v3.Y = v4.Y;
            v3.Z = v4.Z;
            return v3;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static explicit operator Vec3(Vec3f v4)
        {
            Vec3 v3;
            v3.X = v4.X;
            v3.Y = v4.Y;
            v3.Z = v4.Z;
            return v3;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec3 Normalize(Vec3 vec)
        {
            double scale = 1.0 / vec.Length;
            vec.X *= scale;
            vec.Y *= scale;
            vec.Z *= scale;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec3 operator -(Vec3 vec)
        {
            vec.X = -vec.X;
            vec.Y = -vec.Y;
            vec.Z = -vec.Z;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec3 operator -(Vec3 left, Vec3 right)
        {
            left.X -= right.X;
            left.Y -= right.Y;
            left.Z -= right.Z;
            return left;
        }

        public static Vec3 operator -(Vec3 left, Vec4 right)
        {
            left.X -= right.X;
            left.Y -= right.Y;
            left.Z -= right.Z;
            return left;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static bool operator !=(Vec3 left, Vec3 right)
        {
            return !left.Equals(right);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec3 operator *(double scale, Vec3 vec)
        {
            vec.X *= scale;
            vec.Y *= scale;
            vec.Z *= scale;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec3 operator *(Vec3 vec, double scale)
        {
            vec.X *= scale;
            vec.Y *= scale;
            vec.Z *= scale;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec3 operator /(Vec3 vec, double scale)
        {
            double mult = 1 / scale;
            vec.X *= mult;
            vec.Y *= mult;
            vec.Z *= mult;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec3 operator +(Vec3 left, Vec3 right)
        {
            left.X += right.X;
            left.Y += right.Y;
            left.Z += right.Z;
            return left;
        }

        public static Vec3 operator +(Vec3 left, Vec4 right)
        {
            left.X += right.X;
            left.Y += right.Y;
            left.Z += right.Z;
            return left;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static bool operator ==(Vec3 left, Vec3 right)
        {
            return left.Equals(right);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec3 Transform(Vec3 vec, Mtx4 mat)
        {
            Vec4 v4 = new Vec4(vec.X, vec.Y, vec.Z, 1.0);
            v4 = Vec4.Transform(v4, mat);
            return (Vec3)v4;
        }

        public static Vec3 Transform(Vec3 vec, Mtx3 mat)
        {
            Vec3 result = new Vec3(
               vec.X * mat.Row0.X + vec.Y * mat.Row1.X + vec.Z * mat.Row2.X,
               vec.X * mat.Row0.Y + vec.Y * mat.Row1.Y + vec.Z * mat.Row2.Y,
               vec.X * mat.Row0.Z + vec.Y * mat.Row1.Z + vec.Z * mat.Row2.Z);
            return result;
        }

        public static explicit operator Vec3(Ept v)
        {
            return new Vec3(v.X, v.Y, v.Z);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public bool Equals(Vec3 other)
        {
            return
                X == other.X &&
                Y == other.Y &&
                Z == other.Z;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public override bool Equals(object obj)
        {
            if (!(obj is Vec3))
            {
                return false;
            }

            return this.Equals((Vec3)obj);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public override int GetHashCode()
        {
            return X.GetHashCode() ^ Y.GetHashCode() ^ Z.GetHashCode();
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public void Normalize()
        {
            double scale = 1.0 / this.Length;
            X *= scale;
            Y *= scale;
            Z *= scale;
        }

        public override string ToString()
        {
            return X.ToString(CultureInfo.InvariantCulture) + ";" + Y.ToString(CultureInfo.InvariantCulture) + ";" + Z.ToString(CultureInfo.InvariantCulture);
        }

        #endregion Public Methods

        //------------------------------------------------------------------------------------------------------------------------------------------------------
    }
}