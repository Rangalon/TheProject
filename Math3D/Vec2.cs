using System;
using System.Globalization;

namespace Math3D
{
    public struct Vec2 : IEquatable<Vec2>
    {
        #region "Shared Public Functions"

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static double Dot(Vec2 left, Vec2 right)
        {
            return left.X * right.X + left.Y * right.Y;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static explicit operator Vec2(Vec3 v3)
        {
            Vec2 v2;
            v2.X = v3.X;
            v2.Y = v3.Y;
            return v2;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static bool operator !=(Vec2 left, Vec2 right)
        {
            return !left.Equals(right);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2 operator *(double f, Vec2 vec)
        {
            vec.X *= f;
            vec.Y *= f;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2 operator *(Vec2 vec, double f)
        {
            vec.X *= f;
            vec.Y *= f;
            return vec;
        }

        public static Vec2 operator %(Vec2 vec, double f)
        {
            vec.X %= f;
            vec.Y %= f;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2 operator +(Vec2 left, Vec2 right)
        {
            left.X += right.X;
            left.Y += right.Y;
            return left;
        }

        public static Vec2 operator /(Vec2 left, Vec2 right)
        {
            left.X /= right.X;
            left.Y /= right.Y;
            return left;
        }

        public static Vec2 operator *(Vec2 left, Vec2 right)
        {
            left.X *= right.X;
            left.Y *= right.Y;
            return left;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2 operator -(Vec2 left, Vec2 right)
        {
            left.X -= right.X;
            left.Y -= right.Y;
            return left;
        }
        public static Vec2 operator -(Vec2 left, Vec2i right)
        {
            left.X -= right.X;
            left.Y -= right.Y;
            return left;
        }

        public static Vec2 operator -(Vec2 left)
        {
            return new Vec2(-left.X, -left.Y);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2 operator /(Vec2 vec, double f)
        {
            double mult = 1.0 / f;
            vec.X *= mult;
            vec.Y *= mult;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static bool operator ==(Vec2 left, Vec2 right)
        {
            return left.Equals(right);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------

        public override string ToString()
        {
            return X.ToString(CultureInfo.InvariantCulture) + ";" + Y.ToString(CultureInfo.InvariantCulture);
        }

        #endregion "Shared Public Functions"

        #region "Public Variables"

        public double X;
        public double Y;

        #endregion "Public Variables"

        #region "Public Functions"

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public bool Equals(Vec2 other)
        {
            return
                X == other.X &&
                Y == other.Y;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public override bool Equals(object obj)
        {
            if (!(obj is Vec2))
                return false;

            return this.Equals((Vec2)obj);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public override int GetHashCode()
        {
            return X.GetHashCode() ^ Y.GetHashCode();
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public void Normalize()
        {
            double scale = 1.0 / Length;
            X *= scale;
            Y *= scale;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public Vec2(double x, double y)
        {
            this.X = x;
            this.Y = y;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------

        #endregion "Public Functions"

        #region "Public Properties"

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public double Length
        {
            get
            {
                return System.Math.Sqrt(X * X + Y * Y);
            }
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public double LengthSquared
        {
            get
            {
                return X * X + Y * Y;
            }
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------

        #endregion "Public Properties"
    }
}