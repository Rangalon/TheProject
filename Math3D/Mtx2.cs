using System;

namespace Math3D
{
    /// <summary>
    /// Represents a 2x2 matrix
    /// </summary>
    public struct Mtx2 : IEquatable<Mtx2>
    {
        #region "Shared Public Functions"

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Mtx2 Invert(Mtx2 mat)
        {
            Mtx2 result;
            Invert(ref mat, out result);
            return result;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static void Invert(ref Mtx2 mat, out Mtx2 result)
        {
            double det = mat.Determinant;

            if (det == 0)
                throw new InvalidOperationException("Matrix is singular and cannot be inverted.");

            double invDet = 1f / det;

            result.Row0.X = mat.Row1.Y * invDet;
            result.Row0.Y = -mat.Row0.Y * invDet;
            result.Row1.X = -mat.Row1.X * invDet;
            result.Row1.Y = mat.Row0.X * invDet;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------

        public static Mtx2 operator *(Mtx2 left, Mtx2 right)
        {
            double lM11 = left.Row0.X, lM12 = left.Row0.Y,
                lM21 = left.Row1.X, lM22 = left.Row1.Y,
                 rM11 = right.Row0.X, rM12 = right.Row0.Y,
                rM21 = right.Row1.X, rM22 = right.Row1.Y;
            Mtx2 result;
            result.Row0.X = ((lM11 * rM11) + (lM12 * rM21));
            result.Row0.Y = ((lM11 * rM12) + (lM12 * rM22));
            result.Row1.X = ((lM21 * rM11) + (lM22 * rM21));
            result.Row1.Y = ((lM21 * rM12) + (lM22 * rM22));
            return result;
        }

        #endregion "Shared Public Functions"

        #region "Public Variables"

        public Vec2 Row0;
        public Vec2 Row1;

        #endregion "Public Variables"

        #region "Public Functions"

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public bool Equals(Mtx2 other)
        {
            return
                Row0 == other.Row0 &&
                Row1 == other.Row1;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public override bool Equals(object obj)
        {
            if (!(obj is Mtx2))
                return false;

            return this.Equals((Mtx2)obj);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public override int GetHashCode()
        {
            return Row0.GetHashCode() ^ Row1.GetHashCode();
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public void Invert()
        {
            this = Mtx2.Invert(this);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public Mtx2(
            double m00, double m01,
            double m10, double m11)
        {
            Row0 = new Vec2(m00, m01);
            Row1 = new Vec2(m10, m11);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------

        #endregion "Public Functions"

        #region "Public Properties"

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public double Determinant
        {
            get
            {
                double m11 = Row0.X, m12 = Row0.Y,
                      m21 = Row1.X, m22 = Row1.Y;

                return m11 * m22 - m12 * m21;
            }
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------

        #endregion "Public Properties"
    }
}