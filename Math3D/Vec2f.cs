using System;
using System.Globalization;

namespace Math3D
{
    public struct Vec2f : IEquatable<Vec2f>
    {
        #region Public Fields

        public float X;

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public float Y;

        #endregion Public Fields

        #region Public Constructors

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public Vec2f(float x, float y)
        {
            this.X = x;
            this.Y = y;
        }

        #endregion Public Constructors

        #region Public Properties

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public float Length
        {
            get
            {
                return (float)System.Math.Sqrt(X * X + Y * Y);
            }
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public float LengthSquared
        {
            get
            {
                return X * X + Y * Y;
            }
        }

        #endregion Public Properties

        #region Public Methods

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static float Dot(Vec2f left, Vec2f right)
        {
            return left.X * right.X + left.Y * right.Y;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static explicit operator Vec2f(Vec3f v3)
        {
            Vec2f v2;
            v2.X = v3.X;
            v2.Y = v3.Y;
            return v2;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2f operator -(Vec2f left, Vec2f right)
        {
            left.X -= right.X;
            left.Y -= right.Y;
            return left;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static bool operator !=(Vec2f left, Vec2f right)
        {
            return !left.Equals(right);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2f operator *(float f, Vec2f vec)
        {
            vec.X *= f;
            vec.Y *= f;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2f operator *(Vec2f vec, float f)
        {
            vec.X *= f;
            vec.Y *= f;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2f operator /(Vec2f vec, float f)
        {
            float mult = 1.0F / f;
            vec.X *= mult;
            vec.Y *= mult;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2f operator +(Vec2f left, Vec2f right)
        {
            left.X += right.X;
            left.Y += right.Y;
            return left;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static bool operator ==(Vec2f left, Vec2f right)
        {
            return left.Equals(right);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public bool Equals(Vec2f other)
        {
            return
                X == other.X &&
                Y == other.Y;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public override bool Equals(object obj)
        {
            if (!(obj is Vec2f))
            {
                return false;
            }

            return this.Equals((Vec2f)obj);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public override int GetHashCode()
        {
            return X.GetHashCode() ^ Y.GetHashCode();
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public void Normalize()
        {
            float scale = 1.0F / Length;
            X *= scale;
            Y *= scale;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------

        public override string ToString()
        {
            return X.ToString(CultureInfo.InvariantCulture) + ";" + Y.ToString(CultureInfo.InvariantCulture);
        }

        #endregion Public Methods
    }
}