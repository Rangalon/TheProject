using System;
using System.Globalization;

namespace Math3D
{
    public struct Vec2i : IEquatable<Vec2i>
    {
        #region Public Fields

        public int X;

        public int Y;

        #endregion Public Fields

        #region Public Constructors

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public Vec2i(int x, int y)
        {
            this.X = x;
            this.Y = y;
        }

        #endregion Public Constructors

        #region Public Properties

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public int LengthSquared
        {
            get
            {
                return X * X + Y * Y;
            }
        }

        #endregion Public Properties

        #region Public Methods

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static int Dot(Vec2i left, Vec2i right)
        {
            return left.X * right.X + left.Y * right.Y;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static explicit operator Vec2i(Vec3 v)
        {
            return new Vec2i((int)v.X, (int)v.Y);
        }

        public static explicit operator Vec2i(Vec2f v)
        {
            return new Vec2i((int)v.X, (int)v.Y);
        }

        public static explicit operator Vec2i(Vec2 v)
        {
            return new Vec2i((int)v.X, (int)v.Y);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2i operator -(Vec2i left, Vec2i right)
        {
            left.X -= right.X;
            left.Y -= right.Y;
            return left;
        }

        public static Vec2i operator -(Vec2i left)
        {
            return new Vec2i(-left.X, -left.Y);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static bool operator !=(Vec2i left, Vec2i right)
        {
            return !left.Equals(right);
        }

        public static Vec2i operator %(Vec2i vec, int f)
        {
            vec.X %= f;
            vec.Y %= f;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2i operator *(int f, Vec2i vec)
        {
            vec.X *= f;
            vec.Y *= f;
            return vec;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2i operator *(Vec2i vec, int f)
        {
            vec.X *= f;
            vec.Y *= f;
            return vec;
        }

        public static Vec2i operator *(Vec2i left, Vec2i right)
        {
            left.X *= right.X;
            left.Y *= right.Y;
            return left;
        }

        public static Vec2i operator /(Vec2i left, Vec2i right)
        {
            left.X /= right.X;
            left.Y /= right.Y;
            return left;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static Vec2i operator +(Vec2i left, Vec2i right)
        {
            left.X += right.X;
            left.Y += right.Y;
            return left;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public static bool operator ==(Vec2i left, Vec2i right)
        {
            return left.Equals(right);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public bool Equals(Vec2i other)
        {
            return
                X == other.X &&
                Y == other.Y;
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public override bool Equals(object obj)
        {
            if (!(obj is Vec2i))
                return false;

            return this.Equals((Vec2i)obj);
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        public override int GetHashCode()
        {
            return X.GetHashCode() ^ Y.GetHashCode();
        }

        public override string ToString()
        {
            return X.ToString(CultureInfo.InvariantCulture) + ";" + Y.ToString(CultureInfo.InvariantCulture);
        }

        #endregion Public Methods

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------

        //------------------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------------------------------------------
    }
}